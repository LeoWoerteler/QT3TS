<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-TryCatchExpr">
   <description>Tests for the prod-TryCatchExpr operator</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="prod-TryCatchExpr"/>
   <link type="spec" document="XQuery 1.1" section-number="3.12" idref="id-try-catch"/>
   
   <dependency type="spec" value="XQ30+"/>

   <environment name="err">
     <namespace prefix="err" uri="http://www.w3.org/2005/xqt-errors"/> 
   </environment>

   <test-case name="try-001">
      <description/>
      <created by="Michael Kay" on="2008-11-25"/>
      <modified by="O'Neil Delpratt" on="2011-10-12" change="Removed local dependency. See bug# 14438"/>
      <test><![CDATA[try { doc('rubbish.xml') } catch * {"ok"}]]></test>
      <result>
         <assert-string-value>ok</assert-string-value>
      </result>
   </test-case>

   <test-case name="try-002">
      <description/>
      <created by="Michael Kay" on="2008-11-25"/>
      <dependency type="spec" value="XQ30+"/>
      <environment ref="err"/>
      <test><![CDATA[try { doc('rubbish.xml') } catch err:FODC0001 | err:FODC0002 | err:FODC0005 {"ok"}]]></test>
      <result>
         <assert-string-value>ok</assert-string-value>
      </result>
   </test-case>

   <test-case name="try-003">
      <description/>
      <created by="Michael Kay" on="2008-11-25"/>
      <modified by="O'Neil Delpratt" on="2011-10-12" change="Removed local dependency. See bug# 14438"/>
      <test><![CDATA[try { doc('rubbish.xml') } catch *:FODC0001 | *:FODC0002 | *:FODC0005 {"ok"}]]></test>
      <result>
         <assert-string-value>ok</assert-string-value>
      </result>
   </test-case>

   <test-case name="try-004">
      <description/>
      <created by="Michael Kay" on="2008-11-25"/>
      <modified by="O'Neil Delpratt" on="2011-10-12" change="Removed local dependency. See bug# 14438"/>
      <environment ref="err"/>
      <test><![CDATA[
        try { doc('rubbish.xml') } 
        catch err:FODC0001 {<caught-error code="FODC0001"/>} 
        catch err:FODC0002 {<caught-error code="FODC0002"/>} 
        catch err:FODC0005 {<caught-error code="FODC0005"/>} 
        catch err:* {<caught-error code="other"/>}
      ]]></test>
      <result>
         <assert-serialization><![CDATA[<caught-error code="FODC0002"/>]]></assert-serialization>
      </result>
   </test-case>

   <test-case name="try-005">
      <description>test try/catch as an ExprSingle </description>
      <created by="Michael Kay" on="2008-11-25"/>
      <modified by="O'Neil Delpratt" on="2011-10-12" change="Removed local dependency. See bug# 14438"/>
      <test><![CDATA[<out>{ try { doc('rubbish.xml') } catch * {<caught-error/>}, try { doc('rubbish.xml') } catch * {<caught-another/>} }</out>]]></test>
      <result>
         <assert-serialization><![CDATA[<out><caught-error/><caught-another/></out>]]></assert-serialization>
      </result>
   </test-case>

   <test-case name="try-006">
      <description>try/catch doesn't catch error evaluating global variable </description>
      <created by="Michael Kay" on="2008-11-25"/>
      <test><![CDATA[
        declare variable $doc := doc('rubbish.xml'); 
        try { $doc } catch * {<caught-error/>}
       ]]></test>
      <result>
         <error code="FODC0002"/>
      </result>
   </test-case>

   <test-case name="try-007">
      <description>doesn't catch error evaluating local variable </description>
      <created by="Michael Kay" on="2008-11-25"/>
      <modified by="O'Neil Delpratt" on="2011-10-12" change="Removed local dependency. See bug# 14438"/>
      <test><![CDATA[
        let $doc := doc('rubbish.xml') 
        return try { $doc } catch * {<caught-error/>}]]></test>
      <result>
         <error code="FODC0002"/>
      </result>
   </test-case>

   <test-case name="try-008">
      <description>does catch error evaluating function call </description>
      <created by="Michael Kay" on="2008-11-25"/>
      <modified by="O'Neil Delpratt" on="2011-10-12" change="Removed local dependency. See bug# 14438"/>
      <test><![CDATA[
        declare function local:f() { doc('rubbish.xml') }; 
        try { local:f() } catch * {"ok"}
      ]]></test>
      <result>
         <assert-string-value>ok</assert-string-value>
      </result>
   </test-case>

   <test-case name="try-009">
      <description>does catch error evaluating function call </description>
      <created by="Michael Kay" on="2008-11-25"/>
      <modified by="O'Neil Delpratt" on="2011-10-12" change="Removed local dependency. See bug# 14438"/>
      <environment ref="err"/>
      <test><![CDATA[
        declare function local:f($d as xs:integer) { 10 div $d }; 
        try { local:f(0) } catch err:FOAR0001 {"ok"}
      ]]></test>
      <result>
         <assert-string-value>ok</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="try-010">
      <description>Use err:code local variable, implicitly declared</description>
      <created by="Michael Kay" on="2011-12-23"/>
      <environment ref="err"/>
      <test><![CDATA[
        declare function local:f($d as xs:integer) { 10 div $d };
        try { local:f(0) } catch * {local-name-from-QName($err:code)}
      ]]></test>
      <result>
         <assert-string-value>FOAR0001</assert-string-value>
      </result>
   </test-case>

    <test-case name="try-011">
      <description>Use err:code local variable in a nested tryCatch. The cast as expr should throw a dynamic error</description>
      <created by="O'Neil Delpratt" on="2012-03-02"/>
      <environment ref="err"/>
      <test><![CDATA[
        declare function local:f($d as xs:integer) { 10 div $d };
        declare variable $t as xs:string := "text";
        try { local:f(0) } catch * { try { local:f($t cast as xs:integer) } catch * {local-name-from-QName($err:code)} }
      ]]></test>
      <result>
         <assert-string-value>FORG0001</assert-string-value>
      </result>
   </test-case>

    <test-case name="try-012">
      <description>Use err:description local variable, implicitly declared</description>
      <created by="O'Neil Delpratt" on="2012-03-02"/>
      <environment ref="err"/>
      <test><![CDATA[
        declare function local:f($d as xs:integer) { 10 div $d };
        try { local:f(0) } catch * {$err:description}
      ]]></test>
      <result>
         <any-of>
            <assert-string-value>Integer division by zero</assert-string-value>
            <assert-type>xs:string</assert-type>
         </any-of>
      </result>
   </test-case>

    <test-case name="try-013">
      <description>Use err:value, err:line-number and err:column-number local variable, implicitly declared</description>
      <created by="O'Neil Delpratt" on="2012-03-02"/>
      <environment ref="err"/>
      <test><![CDATA[
        declare function local:f($d as xs:integer) { 10 div $d };
        try { local:f(0) } catch * {$err:column-number, $err:line-number, $err:line-number}
      ]]></test>
      <result>
            <assert-type>xs:integer*</assert-type>
      </result>
   </test-case>
</test-set>