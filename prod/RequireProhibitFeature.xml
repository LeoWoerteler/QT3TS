<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-RequireProhibitFeature"
          covers="require-and-prohibit-feature">
   <description>Tests for the require-feature and prohibit-feature options.</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-RequireProhibitFeature"/>
   <link type="spec" document="XQuery" section-number="4.20"
         idref="id-require-prohibit-feature"/>

  <environment name="dummy-schema">
    <schema uri="http://www.w3.org/XQueryTest/RequireProhibitFeature" file="RequireProhibitFeature/dummy.xsd">
      <description>An empty schema</description>
      <created by="Ghislain Fourny" on="2012-10-15"/>
    </schema>
  </environment>

  <environment name="data-doc">
    <source role="." file="RequireProhibitFeature/data.xml">
      <description>Simple xml document</description>
      <created by="O'Neil Delpratt, Saxonica" on="2012-10-23"/>
    </source>
  </environment>
  
  <test-case name="require-schema-aware-1">
    <description>An error must be thrown if the feature is not supported.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <modified by="O'Neil Delpratt, Saxonica" on="2012-10-23" change="assert-eq changed to assert-empty" />
    <environment ref="dummy-schema"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      import schema namespace s = "http://www.w3.org/XQueryTest/RequireProhibitFeature";
      declare option require-feature "schema-aware";
      ()
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- supported -->
        <assert-empty />
        <!-- not supported -->
        <error code="XQST0120"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="require-schema-aware-2">
    <description>An error must be thrown if the feature is not supported.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <environment ref="dummy-schema"/>
    <dependency type="spec" value="XQ30+"/>
    <test><![CDATA[
      declare option require-feature "schema-aware";
      (validate lax { <element
                         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                         xmlns:xs="http://www.w3.org/2001/XMLSchema"
                         xsi:type="xs:integer">42</element> }) instance of element(*, xs:integer)
      ]]>
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- supported -->
        <assert-true/>
        <!-- not supported -->
        <error code="XQST0120"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="require-schema-aware-3">
    <description>An error must be thrown if the feature is not supported.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <modified by="O'Neil Delpratt, Saxonica" on="2012-10-23" change="assert-eq changed to assert-empty" />
    <environment ref="dummy-schema"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      import schema namespace s = "http://www.w3.org/XQueryTest/RequireProhibitFeature";
      ()
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- supported -->
        <assert-empty />
        <!-- not supported -->
        <error code="XQST0009"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="require-schema-aware-4">
    <description>An error must be thrown if the feature is not supported.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <modified by="O'Neil Delpratt, Saxonica" on="2012-10-23" change="declaration of require-feature option missing" />
    <environment ref="dummy-schema"/>
    <dependency type="spec" value="XQ30+"/>
    <test><![CDATA[
      declare option require-feature "schema-aware";
      (validate lax { <element
                         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                         xmlns:xs="http://www.w3.org/2001/XMLSchema"
                         xsi:type="xs:integer">42</element> }) instance of element(*, xs:integer)
      ]]>
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- supported -->
        <assert-true/>
        <!-- not supported -->
        <error code="XQST0075"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="require-static-typing-1">
    <description>An error must be thrown if the feature is not supported.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option require-feature "static-typing";
      let $i as xs:integer := "foo" return $i
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- supported -->
        <error code="XPTY0004"/>
        <!-- not supported -->
        <error code="XQST0120"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="require-module-1">
    <description>An error must be thrown if the feature is not supported.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <modified by="O'Neil Delpratt" on="2012-10-22" change="declare option now appears after import. Bug issue #19597. Also changed assert-eq to assert-empty" />
    <modified by="Tim Mills" on="2012-10-23" change="set module namespace to match actual module namespace" />
    <module uri="http://www.w3.org/XQueryTest/RequireProhibitFeature" file="RequireProhibitFeature/dummy.xquery"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      import module namespace m = "http://www.w3.org/XQueryTest/RequireProhibitFeature";
      declare option require-feature "module";
      ()
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- supported -->
        <assert-empty />
        <!-- not supported -->
        <error code="XQST0120"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="require-module-2">
    <description>An error must be thrown if the feature is not supported.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <modified by="O'Neil Delpratt, Saxonica" on="2012-10-23" change="assert-eq changed to assert-empty" />
    <modified by="O'Neil Delpratt" on="2012-10-25" change="Added query body and set module namespace to match actual module namespace" />
    <module uri="http://www.w3.org/XQueryTest/RequireProhibitFeature" file="RequireProhibitFeature/dummy.xquery"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      import module namespace m = "http://www.w3.org/XQueryTest/RequireProhibitFeature";
      ()
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- supported -->
        <assert-empty />
        <!-- not supported -->
        <error code="XPST0016"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="require-serialization-1">
    <description>An error must be thrown if the feature is not supported.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <modified by="O'Neil Delpratt, Saxonica" on="2012-10-23" change="assert-eq changed to assert-empty" />
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option require-feature "serialization";
      ()
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- supported -->
        <assert-empty />
        <!-- not supported -->
        <error code="XQST0120"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="require-higher-order-function-1">
    <description>An error must be thrown if the feature is not supported.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option require-feature "higher-order-function";
      1 instance of function(*)
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- supported -->
        <assert-false/>
        <!-- not supported -->
        <error code="XQST0120"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="require-higher-order-function-2">
    <description>An error must be thrown if the feature is not supported.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <modified by="O'Neil Delpratt, Saxonica" on="2012-10-23" change="assert-eq changed to assert-empty" />
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option require-feature "higher-order-function";
      for $f in () return $f(1)
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- supported -->
        <assert-empty />
        <!-- not supported -->
        <error code="XQST0120"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="require-higher-order-function-3">
    <description>An error must be thrown if the feature is not supported.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <modified by="O'Neil Delpratt, Saxonica" on="2012-10-23" change="assert-eq changed to assert-empty" />
    <modified by="Tim Mills" on="2012-10-23" change="changed result of test to match assert-empty" />
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option require-feature "higher-order-function";
      let $f := function($x) { $x + 1 } return ()
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- supported -->
        <assert-empty />
        <!-- not supported -->
        <error code="XQST0120"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="require-higher-order-function-4">
    <description>An error must be thrown if the feature is not supported.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option require-feature "higher-order-function";
      let $f := sum#1 return 0
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- supported -->
        <assert-eq>0</assert-eq>
        <!-- not supported -->
        <error code="XQST0120"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="require-higher-order-function-5">
    <description>An error must be thrown if the feature is not supported.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <modified by="O'Neil Delpratt, Saxonica" on="2012-10-23" change="assert-eq changed to assert-empty" />
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option require-feature "higher-order-function";
      for $f in () return $f(1, ?)
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- supported -->
        <assert-empty />
        <!-- not supported -->
        <error code="XQST0120"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="require-higher-order-function-6">
    <description>An error must be thrown if the feature is not supported.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      1 instance of function(*)
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- supported -->
        <assert-false/>
        <!-- not supported -->
        <error code="XQST0129"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="require-higher-order-function-7">
    <description>An error must be thrown if the feature is not supported.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <modified by="O'Neil Delpratt, Saxonica" on="2012-10-23" change="assert-eq changed to assert-empty" />
    <dependency type="spec" value="XQ30+"/>
    <test>
      for $f in () return $f(1)
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- supported -->
        <assert-empty />
        <!-- not supported -->
        <error code="XQST0129"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="require-higher-order-function-8">
    <description>An error must be thrown if the feature is not supported.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      let $f := function($x) { $x + 1 } return 0
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- supported -->
        <assert-eq>0</assert-eq>
        <!-- not supported -->
        <error code="XQST0129"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="require-higher-order-function-9">
    <description>An error must be thrown if the feature is not supported.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      let $f := sum#1 return 0
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- supported -->
        <assert-eq>0</assert-eq>
        <!-- not supported -->
        <error code="XQST0129"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="require-higher-order-function-10">
    <description>An error must be thrown if the feature is not supported.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <modified by="O'Neil Delpratt, Saxonica" on="2012-10-23" change="assert-eq changed to assert-empty" />
    <dependency type="spec" value="XQ30+"/>
    <test>
      for $f in () return $f(1, ?)
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- supported -->
       <assert-empty />
        <!-- not supported -->
        <error code="XQST0129"/>
      </any-of>
    </result>
  </test-case>  
  
    <test-case name="prohibit-schema-aware-1">
    <description>An error must be thrown if the feature is prohibited and used.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <environment ref="dummy-schema"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      import schema namespace s = "http://www.w3.org/XQueryTest/RequireProhibitFeature";
      declare option prohibit-feature "schema-aware";
      ()
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- can deactivate -->
        <error code="XQST0009"/>
        <!-- cannot deactivate -->
        <error code="XQST0128"/>
      </any-of>
    </result>
  </test-case>
  
      <test-case name="prohibit-schema-aware-2">
    <description>An error must be thrown if the feature is prohibited and used.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <modified by="O'Neil, Saxonica" on="2012-10-23" change="Added prohibited-feature option. See bug issue #19597" />
    <dependency type="spec" value="XQ30+"/>
    <test><![CDATA[
    declare option prohibit-feature "schema-aware";
    (validate lax { <element
                         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                         xmlns:xs="http://www.w3.org/2001/XMLSchema"
                         xsi:type="xs:integer">42</element> }) instance of element(*, xs:integer)
      ]]>
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- can deactivate -->
        <error code="XQST0075"/>
        <!-- cannot deactivate -->
        <error code="XQST0128"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="prohibit-static-typing-1">
    <description>An error must be thrown if the feature is prohibited and used.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option prohibit-feature "static-typing";
      try { let $i as xs:integer := "foo" return $i } catch * { 0 }
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- can deactivate -->
        <assert-eq>0</assert-eq>
        <!-- cannot deactivate -->
        <error code="XQST0128"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="prohibit-module-1">
    <description>An error must be thrown if the feature is prohibited and used.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <modified by="O'Neil Delpratt, Saxonica" on="" change="Bug fix to issue #19597" />
    <module uri="http://www.w3.org/XQueryTest/RequireProhibitFeature" file="RequireProhibitFeature/dummy.xquery"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      import module namespace m = "http://www.example.com/dummy-module";
      declare option prohibit-feature "module";
      ()
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- can deactivate -->
        <error code="XQST0016"/>
        <!-- cannot deactivate -->
        <error code="XQST0128"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="prohibit-serialization-1">
    <description>An error must be thrown if the feature is prohibited and used.  </description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <modified by="O'Neil Delpratt, Saxonica" on="2012-10-23" change="assert-eq changed to assert-empty" />
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option prohibit-feature "serialization";
      ()
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- can deactivate -->
        <assert-empty />
        <!-- cannot deactivate -->
        <error code="XQST0128"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="prohibit-higher-order-function-1">
    <description>An error must be thrown if the feature is prohibited and used. </description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option prohibit-feature "higher-order-function";
      1 instance of function(*)
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- can deactivate -->
        <error code="XQST0129"/>
        <!-- cannot deactivate -->
        <error code="XQST0128"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="prohibit-higher-order-function-2">
    <description>An error must be thrown if the feature is prohibited and used. </description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option prohibit-feature "higher-order-function";
      for $f in () return $f(1)
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- can deactivate -->
        <error code="XQST0129"/>
        <!-- cannot deactivate -->
        <error code="XQST0128"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="prohibit-higher-order-function-3">
    <description>An error must be thrown if the feature is prohibited and used.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option prohibit-feature "higher-order-function";
      let $f := function($x) { $x + 1 } return 0
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- can deactivate -->
        <error code="XQST0129"/>
        <!-- cannot deactivate -->
        <error code="XQST0128"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="prohibit-higher-order-function-4">
    <description>An error must be thrown if the feature is prohibited and used.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option prohibit-feature "higher-order-function";
      let $f := sum#1 return 0
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- can deactivate -->
        <error code="XQST0129"/>
        <!-- cannot deactivate -->
        <error code="XQST0128"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="prohibit-higher-order-function-5">
    <description>An error must be thrown if the feature is prohibited and used.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option prohibit-feature "higher-order-function";
      for $f in () return $f(1, ?)
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- can deactivate -->
        <error code="XQST0129"/>
        <!-- cannot deactivate -->
        <error code="XQST0128"/>
      </any-of>
    </result>
  </test-case>  
  
  <test-case name="unknown-feature">
    <description>An error must be thrown if the feature is not recognized.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare namespace example = "http://www.example.com/does/not/exist";
      declare option require-feature "example:does-not-exist";
      ()
    </test>
    <result>
      <error code="XQST0123"/>
    </result>
  </test-case>
  
  <test-case name="well-formed-feature-1">
    <description>Features must be lexical QNames.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option require-feature "not:a:qname";
      ()
    </test>
    <result>
      <error code="XQST0122"/>
    </result>
  </test-case>

  <test-case name="well-formed-feature-2">
    <description>Features must be lexical QNames.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option require-feature "qname not:a:qname";
      ()
    </test>
    <result>
      <error code="XQST0122"/>
    </result>
  </test-case>
  
  <test-case name="well-formed-feature-3">
    <description>Features must be lexical QNames.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option require-feature "123";
      ()
    </test>
    <result>
      <error code="XQST0122"/>
    </result>
  </test-case>
  
  <test-case name="well-formed-feature-4">
    <description>The prefix of a feature must be bound.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option require-feature "unkonwn:prefix";
      ()
    </test>
    <result>
      <error code="XQST0081"/>
    </result>
  </test-case>
  
  <test-case name="require-prohibit-1">
    <description>A feature cannot be both required and prohibited.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option require-feature "schema-aware";
      declare option prohibit-feature "schema-aware";
      ()
    </test>
    <result>
      <error code="XQST0127"/>
    </result>
  </test-case>
  
  <test-case name="require-prohibit-2">
    <description>A feature cannot be both required and prohibited.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option require-feature "module";
      declare option prohibit-feature "module";
      ()
    </test>
    <result>
      <error code="XQST0127"/>
    </result>
  </test-case>
  
  <test-case name="require-prohibit-3">
    <description>A feature cannot be both required and prohibited.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option require-feature "serialization";
      declare option prohibit-feature "serialization";
      ()
    </test>
    <result>
      <error code="XQST0127"/>
    </result>
  </test-case>
  
  <test-case name="require-prohibit-4">
    <description>A feature cannot be both required and prohibited.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option require-feature "higher-order-function";
      declare option prohibit-feature "higher-order-function";
      ()
    </test>
    <result>
      <error code="XQST0127"/>
    </result>
  </test-case>
  
  <test-case name="require-prohibit-5">
    <description>A feature cannot be both required and prohibited.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option require-feature "static-typing";
      declare option prohibit-feature "static-typing";
      ()
    </test>
    <result>
      <error code="XQST0127"/>
    </result>
  </test-case>
  
  <test-case name="require-all-extensions-1">
    <description>All extensions features cannot be activated.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option require-feature "all-extensions";
      ()
    </test>
    <result>
      <error code="XQST0126"/>
    </result>
  </test-case>
  
  <test-case name="require-all-optional-features-1">
    <description>An error must be thrown if the feature is not supported.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <modified by="O'Neil Delpratt, Saxonica" on="2012-10-23" change="assert-eq changed to assert-empty" />
    <environment ref="dummy-schema"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      import schema namespace s = "http://www.w3.org/XQueryTest/RequireProhibitFeature";
      declare option require-feature "all-optional-features";
      ()
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- supported -->
        <assert-empty />
        <!-- not supported -->
        <error code="XQST0120"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="require-all-optional-features-3">
    <description>An error must be thrown if the feature is prohibited and used. </description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option prohibit-feature "higher-order-function";
      declare option require-feature "all-optional-features";
      1 instance of function(*)
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- can deactivate -->
        <error code="XQST0129"/>
        <!-- cannot deactivate -->
        <error code="XQST0128"/>
        <!-- not supported -->
        <error code="XQST0120"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="require-all-optional-features-2">
    <description>An error must be thrown if the feature is prohibited and used. </description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option require-feature "all-optional-features";
      declare option prohibit-feature "higher-order-function";
      1 instance of function(*)
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- can deactivate -->
        <error code="XQST0129"/>
        <!-- cannot deactivate -->
        <error code="XQST0128"/>
        <!-- not supported -->
        <error code="XQST0120"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="prohibit-all-optional-features-1">
    <description>An error must be thrown if the feature is prohibited and used. </description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option prohibit-feature "all-optional-features";
      1 instance of function(*)
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- can deactivate -->
        <error code="XQST0129"/>
        <!-- cannot deactivate -->
        <error code="XQST0128"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="prohibit-all-optional-features-2">
    <description>An error must be thrown if the feature is not supported.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <modified by="O'Neil Delpratt, Saxonica" on="2012-10-23" change="assert-eq changed to assert-empty" />
    <environment ref="dummy-schema"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      import schema namespace s = "http://www.w3.org/XQueryTest/RequireProhibitFeature";
      declare option prohibit-feature "all-optional-features";
      declare option require-feature "schema-aware";
      ()
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- supported -->
        <assert-empty />
        <!-- not supported -->
        <error code="XQST0120"/>
        <!-- cannot deactivate -->
        <error code="XQST0128"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="prohibit-all-optional-features-3">
    <description>An error must be thrown if the feature is not supported.</description>
    <created by="Ghislain Fourny" on="2012-10-15"/>
    <modified by="O'Neil Delpratt, Saxonica" on="2012-10-23" change="assert-eq changed to assert-empty" />
    <environment ref="dummy-schema"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      import schema namespace s = "http://www.w3.org/XQueryTest/RequireProhibitFeature";
      declare option require-feature "schema-aware";
      declare option prohibit-feature "all-optional-features";
      ()
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- supported -->
        <assert-empty />
        <!-- not supported -->
        <error code="XQST0120"/>
        <!-- cannot deactivate -->
        <error code="XQST0128"/>
      </any-of>
    </result>
  </test-case>


  <test-case name="require-all-optional-features-5">
    <description>Test should succeed if feature is supported by implementation, otherwise error. </description>
    <created by="O'Neil Delpratt, Saxonica" on="2012-10-24"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option prohibit-feature "all-optional-features";
      declare option require-feature "higher-order-function";
      1 instance of function(*)
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- is supported -->
        <assert-false />
        <!-- not supported -->
        <error code="XQST0120"/>
      </any-of>
    </result>
  </test-case>



  <test-case name="require-all-optional-features-6">
    <description>An error must be thrown if the feature is prohibited and used. </description>
    <created by="O'Neil Delpratt, Saxonica" on="2012-10-24"/>
    <environment ref="data-doc"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
        declare option require-feature 'serialization';
        declare option prohibit-feature 'all-optional-features';
        let $data:= . return fn:serialize($data)
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- is supported -->
        <assert-xml ><![CDATA[&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;a b="3"/&gt;]]></assert-xml>
        <!-- not supported -->
        <error code="XQST0120"/>
      </any-of>
    </result>
  </test-case>

  <test-case name="require-all-optional-features-7">
    <description>An error must be thrown if the feature is prohibited and used. </description>
    <created by="O'Neil Delpratt, Saxonica" on="2012-10-24"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare option prohibit-feature "all-optional-features";
      declare option require-feature "module";
      1 instance of function(*)
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- is deactivated -->
         <error code="XQST0129"/>
        <!-- not supported -->
        <error code="XQST0120"/>
        <!-- cannot deactivate -->
        <error code="XQST0128"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="separate-modules-1">
    <description>Prohibiting or requiring a feature only affects the module.</description>
    <created by="Ghislain Fourny" on="2012-10-18"/>
    <module uri="http://www.w3.org/XQueryTest/RequireProhibitFeature" file="RequireProhibitFeature/uses.xquery"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      import module namespace module = "http://www.w3.org/XQueryTest/RequireProhibitFeature";
      declare option prohibit-feature "higher-order-function";
      let $f := module:one() return 1
    </test>
    <result>
      <any-of>
        <assert-eq>1</assert-eq>
        <!-- cannot deactivate -->
        <error code="XQST0128"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="separate-modules-2">
    <description>Prohibiting or requiring a feature only affects the module.</description>
    <created by="Ghislain Fourny" on="2012-10-18"/>
    <modified by="O'Neil Delpratt, Saxonica" on="2012-10-25" change="Bug fix #19630" />
    <module uri="http://www.w3.org/XQueryTest/RequireProhibitFeature" file="RequireProhibitFeature/uses.xquery"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      import module namespace module = "http://www.w3.org/XQueryTest/RequireProhibitFeature";
      declare option prohibit-feature "all-optional-features";
      for $f in module:one() return 1
    </test>
    <result>
      <any-of>
        <assert-eq>1</assert-eq>
        <!-- cannot deactivate -->
        <error code="XQST0128"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="separate-modules-3">
    <description>Prohibiting or requiring a feature only affects the module.</description>
    <created by="Ghislain Fourny" on="2012-10-18"/>
    <module uri="http://www.w3.org/XQueryTest/RequireProhibitFeature" file="RequireProhibitFeature/requires.xquery"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      import module namespace module = "http://www.w3.org/XQueryTest/RequireProhibitFeature";
      declare option prohibit-feature "higher-order-function";
      for $f := module:one() return 1
    </test>
    <result>
      <any-of>
        <assert-eq>1</assert-eq>
        <!-- cannot deactivate -->
        <error code="XQST0128"/>
        <!-- not supported -->
        <error code="XQST0120"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="separate-modules-4">
    <description>Prohibiting or requiring a feature only affects the module.</description>
    <created by="Ghislain Fourny" on="2012-10-18"/>
    <module uri="http://www.w3.org/XQueryTest/RequireProhibitFeature" file="RequireProhibitFeature/requires.xquery"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      import module namespace module = "http://www.w3.org/XQueryTest/RequireProhibitFeature";
      module:one()()
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <assert-eq>1</assert-eq>
        <!-- not supported -->
        <error code="XQST0120"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="separate-modules-5">
    <description>Prohibiting or requiring a feature only affects the module.</description>
    <created by="Ghislain Fourny" on="2012-10-18"/>
    <module uri="http://www.w3.org/XQueryTest/RequireProhibitFeature" file="RequireProhibitFeature/requires.xquery"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      import module namespace module = "http://www.w3.org/XQueryTest/RequireProhibitFeature";
      declare option prohibit-feature "higher-order-function";
      module:one()()
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- can deactivate -->
        <error code="XQST0129"/>
        <!-- cannot deactivate -->
        <error code="XQST0128"/>
        <!-- not supported -->
        <error code="XQST0120"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="separate-modules-6">
    <description>Prohibiting or requiring a feature only affects the module.</description>
    <created by="Ghislain Fourny" on="2012-10-18"/>
    <module uri="http://www.w3.org/XQueryTest/RequireProhibitFeature" file="RequireProhibitFeature/prohibits-uses.xquery"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      import module namespace module = "http://www.w3.org/XQueryTest/RequireProhibitFeature";
      ()
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- can deactivate -->
        <error code="XQST0129"/>
        <!-- cannot deactivate -->
        <error code="XQST0128"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="separate-modules-7">
    <description>Prohibiting or requiring a feature only affects the module.</description>
    <created by="Ghislain Fourny" on="2012-10-18"/>
    <module uri="http://www.w3.org/XQueryTest/RequireProhibitFeature" file="RequireProhibitFeature/prohibits-uses.xquery"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      import module namespace module = "http://www.w3.org/XQueryTest/RequireProhibitFeature";
      declare option require-feature "higher-order-function";
      ()
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <!-- can deactivate -->
        <error code="XQST0129"/>
        <!-- cannot deactivate -->
        <error code="XQST0128"/>
        <!-- not supported -->
        <error code="XQST0120"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="separate-modules-8">
    <description>Prohibiting or requiring a feature only affects the module.</description>
    <created by="Ghislain Fourny" on="2012-10-18"/>
    <modified by="O'Neil Delpratt, Saxonica" on="2012-10-23" change="assert-eq changed to assert-empty" />
    <module uri="http://www.w3.org/XQueryTest/RequireProhibitFeature" file="RequireProhibitFeature/prohibits.xquery"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      import module namespace module = "http://www.w3.org/XQueryTest/RequireProhibitFeature";
      let $f := () return $f()
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
       <assert-empty />
        <!-- cannot deactivate -->
        <error code="XQST0128"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="separate-modules-9">
    <description>Prohibiting or requiring a feature only affects the module.</description>
    <created by="Ghislain Fourny" on="2012-10-18"/>
    <module uri="http://www.w3.org/XQueryTest/RequireProhibitFeature" file="RequireProhibitFeature/prohibits.xquery"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      import module namespace module = "http://www.w3.org/XQueryTest/RequireProhibitFeature";
      declare option require-feature "higher-order-function";
      let $f := () return $f()
    </test>
    <result>
      <!-- The test must be reported to fail if a different error is returned -->
      <any-of>
        <assert-eq>1</assert-eq>
        <!-- cannot deactivate -->
        <error code="XQST0128"/>
        <!-- not supported -->
        <error code="XQST0120"/>
      </any-of>
    </result>
  </test-case>
  
</test-set>
