<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-WhereClause">
   <description>Tests for the WhereClause production</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-WhereClause"/>
   <link type="spec" document="XQuery" section-number="3.8.2" idref="id-where"/>
   
   <environment name="fsx">
      <source role="." file="ForClause/fsx.xml">
         <description>Data about a filesystem represented in XML.</description>
         <created by="Mike Rorke" on="2003-03-25"/>
      </source>    
   </environment>
   
   <dependency type="spec" value="XQ10+"/>

   <test-case name="WhereExpr001">
      <description> For+Where+Return - test existence of child elements in Where clause </description>
      <created by="Jinghao Liu" on="2003-02-10"/>
      <environment ref="fsx"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[if ( count( for $f in //* where $f/File return $f/File[1] ) = count( //File[1]) ) then <Same/> else <notSame/>]]></test>
      <result>
         <assert-xml><![CDATA[<Same />]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WhereExpr002">
      <description> For+Where+Return - error, variable in 'Where' Expr hasn't been defined </description>
      <created by="Jinghao Liu" on="2003-02-10"/>
      <environment ref="fsx"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[for $folder in //Folder where $folde/@name = "ABC" return <folder/>]]></test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="WhereExpr003">
      <description> For+Where+Return - using same predicate (as FLWOR003) in 'Where' predicate </description>
      <created by="Jinghao Liu" on="2003-02-10"/>
      <environment ref="fsx"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[for $d in /MyComputer/Drive4 where $d/Folder[@id="128"] return <FolderName>{$d/Folder/@name}</FolderName>]]></test>
      <result>
         <assert-xml><![CDATA[<FolderName name="Folder00000000047" />]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WhereExpr004">
      <description> For+Where+Return - filters in 'Where' expr and in 'In' expr using predicate </description>
      <created by="Jinghao Liu" on="2003-02-10"/>
      <environment ref="fsx"/>
      <test>for $f in /MyComputer/Drive1/Folder[@creator="Mani"]/File where $f/@creation_date="08/06/00" return $f</test>
      <result>
         <assert-xml><![CDATA[<File creation_date="08/06/00" creator="Leon" name="File00000000000" type="FileType" idref="1" id="2">
				<FileName>File00000000000</FileName>
				<description> abides fullest charms aprons batter perspective brags yesterday honor bluest<bold> wills crimeful calm lobby truer miser perseus take</bold> tapers owe ceas rhyme mindful surly suspect fantasticoes spirits legitimation holofernes portraiture trouts suffocating deed strides ithaca<bold> smiles sunshine loud right disdainfully figs searching</bold> curl reins humble nurture hue doom hidden abridgement seein<bold> invisible authentic shapes quae several reaches howled</bold> merry purpos howl burneth scholars untreasur maidenliest dealing</description>
				<SecurityObject name="so00000000001">
					<Denies>
						<Deny>
							<security/>
							<user>system\Changyuan</user>
						</Deny>
						<Deny>
							<security>
								<right>Read</right>
							</security>
							<user>system\Toshiko</user>
						</Deny>
					</Denies>
					<Allows>
						<Allow>
							<security>
								<right>Read</right>
								<right>Write</right>
							</security>
							<user>system\Hyungjeong</user>
						</Allow>
					</Allows>
				</SecurityObject>
				<Stream binary="false" streamid="1" content-type="text/xml" size="1001.33" name="sample.xml" type="StreamType">
					<StreamType>StreamType</StreamType>
					<StreamSize>1001.33</StreamSize>
					<StreamID>1</StreamID>
					<Binary>false</Binary>
					<Summary>This value is constant</Summary>
				</Stream>
			</File>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WhereExpr005">
      <description> For+Where+Return - use always-false-predicate in 'Where' expr </description>
      <created by="Jinghao Liu" on="2003-02-10"/>
      <environment ref="fsx"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<empty> { for $folder in /MyComputer/Drive2//Folder where 1 = 2 return <Folder> { $folder/FolderName/text() } </Folder> } </empty>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<empty/>]]></assert-xml>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="WhereExpr006">
      <description> For+Where+Return - In the inner For+Where+Return, uses outer variable in 'Where' expr </description>
      <created by="Jinghao Liu" on="2003-02-10"/>
      <environment ref="fsx"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[for $folder in /MyComputer/Drive4//Folder return <Folder>{ $folder/@name }{ for $file in /MyComputer/Drive4//File where $file/@idref = $folder/@id return <File>{ $file/@name }</File> }</Folder>]]></test>
      <result>
         <assert-xml><![CDATA[<Folder name="Folder00000000047"/><Folder name="Folder00000000048"><File name="File00000000077"/><File name="File00000000078"/><File name="File00000000079"/><File name="File00000000080"/><File name="File00000000081"/></Folder><Folder name="Folder00000000049"><File name="File00000000082"/><File name="File00000000083"/><File name="File00000000084"/><File name="File00000000085"/><File name="File00000000086"/></Folder><Folder name="Folder00000000050"><File name="File00000000087"/><File name="File00000000088"/></Folder><Folder name="Folder00000000051"><File name="File00000000089"/><File name="File00000000090"/><File name="File00000000091"/><File name="File00000000092"/><File name="File00000000093"/><File name="File00000000094"/></Folder><Folder name="Folder00000000052"><File name="File00000000095"/><File name="File00000000096"/></Folder><Folder name="Folder00000000053"><File name="File00000000097"/><File name="File00000000098"/><File name="File00000000099"/></Folder><Folder name="Folder00000000054"><File name="File00000000100"/></Folder>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WhereExpr007">
      <description> For+Where+Return - 2 iterations use 'Where' to build relationship </description>
      <created by="Jinghao Liu" on="2003-02-10"/>
      <environment ref="fsx"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<fragment-result>{ for $folder in /MyComputer/Drive3/Folder ,$file in /MyComputer/Drive3/Folder/File where $folder/@id = $file/@idref return <Folder> { $folder/@name, $folder/@id } <file>{ $file/@idref, $file/FileName/text() }</file> </Folder> }</fragment-result>]]></test>
      <result>
         <assert-xml><![CDATA[<fragment-result><Folder name="Folder00000000017" id="67"><file idref="67">File00000000047</file></Folder><Folder name="Folder00000000032" id="97"><file idref="97">File00000000062</file></Folder></fragment-result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WhereExpr008">
      <description> Test 'where' expression with the empty sequence literal </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<empty> { for $file in (//Folder)[1]/File where () return $file/FileName } </empty>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<empty/>]]></assert-xml>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="WhereExpr009">
      <description> Test 'where' expression returning a sequence with one or more nodes </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File where $file/SecurityObject/Denies/Deny/security/right return $file/FileName</test>
      <result>
         <assert-xml><![CDATA[<FileName>File00000000000</FileName><FileName>File00000000002</FileName><FileName>File00000000004</FileName><FileName>File00000000006</FileName><FileName>File00000000007</FileName><FileName>File00000000008</FileName><FileName>File00000000011</FileName><FileName>File00000000014</FileName><FileName>File00000000016</FileName><FileName>File00000000017</FileName><FileName>File00000000018</FileName><FileName>File00000000020</FileName><FileName>File00000000022</FileName><FileName>File00000000023</FileName><FileName>File00000000024</FileName><FileName>File00000000025</FileName><FileName>File00000000027</FileName><FileName>File00000000028</FileName><FileName>File00000000029</FileName><FileName>File00000000030</FileName>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WhereExpr010">
      <description> Test 'where' expression returning a sequence with multiple values </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File where data( $file/SecurityObject//right ) return $file/FileName</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="WhereExpr013">
      <description> Test 'where' expression returning a sequence with a single boolean value </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File where $file/SecurityObject/Denies/Deny/security/right="Change" return $file/FileName</test>
      <result>
         <assert-xml><![CDATA[<FileName>File00000000002</FileName><FileName>File00000000004</FileName><FileName>File00000000008</FileName><FileName>File00000000014</FileName><FileName>File00000000018</FileName><FileName>File00000000020</FileName><FileName>File00000000022</FileName><FileName>File00000000025</FileName><FileName>File00000000030</FileName>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WhereExpr014">
      <description> Test 'where' expression returning a sequence with a constant boolean value </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File where true() return $file/FileName</test>
      <result>
         <assert-xml><![CDATA[<FileName>File00000000000</FileName><FileName>File00000000001</FileName><FileName>File00000000002</FileName><FileName>File00000000003</FileName><FileName>File00000000004</FileName><FileName>File00000000005</FileName><FileName>File00000000006</FileName><FileName>File00000000007</FileName><FileName>File00000000008</FileName><FileName>File00000000009</FileName><FileName>File00000000010</FileName><FileName>File00000000011</FileName><FileName>File00000000012</FileName><FileName>File00000000013</FileName><FileName>File00000000014</FileName><FileName>File00000000015</FileName><FileName>File00000000016</FileName><FileName>File00000000017</FileName><FileName>File00000000018</FileName><FileName>File00000000019</FileName><FileName>File00000000020</FileName><FileName>File00000000021</FileName><FileName>File00000000022</FileName><FileName>File00000000023</FileName><FileName>File00000000024</FileName><FileName>File00000000025</FileName><FileName>File00000000026</FileName><FileName>File00000000027</FileName><FileName>File00000000028</FileName><FileName>File00000000029</FileName><FileName>File00000000030</FileName>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WhereExpr015">
      <description> Test 'where' expression returning a sequence with a constant boolean value </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<empty> { for $file in (//Folder)[1]/File where false() return $file/FileName } </empty>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<empty/>]]></assert-xml>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="WhereExpr016">
      <description> Test 'where' clause based on a positional variable </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <test>for $file at $offset in (//Folder)[1]/File where $offset mod 2 = 1 return $file/FileName</test>
      <result>
         <assert-xml><![CDATA[<FileName>File00000000000</FileName><FileName>File00000000002</FileName><FileName>File00000000004</FileName><FileName>File00000000006</FileName><FileName>File00000000008</FileName><FileName>File00000000010</FileName><FileName>File00000000012</FileName><FileName>File00000000014</FileName><FileName>File00000000016</FileName><FileName>File00000000018</FileName><FileName>File00000000020</FileName><FileName>File00000000022</FileName><FileName>File00000000024</FileName><FileName>File00000000026</FileName><FileName>File00000000028</FileName><FileName>File00000000030</FileName>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WhereExpr017">
      <description> Attempt to use multiple expressions in a 'where' clause </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File where true(), true() return $file/FileName</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="WhereExpr018">
      <description> Use of undefined variable in 'where' clause </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File where $undefined return $file/FileName</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="WhereExpr019">
      <description> Typo on 'where' clause </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File where_ true() return $file/FileName</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="WhereExpr020">
      <description> Multiple 'where' clauses (XQuery 1.0)</description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <modified by="Michael Kay" on="2011-07-30" change="add XQuery 1.0 dependency"/>
      <environment ref="fsx"/>
      <dependency type="spec" value="XQ10"/>
      <test>for $file in (//Folder)[1]/File where true() where false() return $file/FileName</test>
      <result>
        <error code="XPST0003"/>
      </result>
   </test-case>
   
   <test-case name="WhereExpr020a">
      <description> Multiple 'where' clauses (XQuery 3,0)</description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <modified by="Michael Kay" on="2011-07-30" change="add XQuery 3.0 dependency"/>
      <environment ref="fsx"/>
      <dependency type="spec" value="XQ30+"/>
      <test>for $file in (//Folder)[1]/File where true() where false() return $file/FileName</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   
   <test-case name="WhereExpr021">
      <description> Check that context item is NOT changed when evaluating the where clause</description>
      <created by="Michael Kay" on="2011-07-30"/>
      <environment ref="fsx"/>
      <dependency type="spec" value="XQ10"/>
      <test>for $file in (//Folder)[1]/File where (. instance of element(File)) return $file/FileName</test>
      <result>
        <assert-empty/>
      </result>
   </test-case>
   
   <test-case name="WhereExpr022">
      <description> Composite where clause depending on multiple variables </description>
      <created by="Michael Kay" on="2011-09-01"/>
      <environment ref="fsx"/>
      <dependency type="spec" value="XQ10+"/>
      <test>
         for $file in //File 
         let $namelen := string-length($file/FileName)
         where ($namelen = 15 and $file//Allow/user = 'system\Hyungjeong') 
         return $file/FileName
      </test>
      <result>
         <assert-string-value>File00000000000</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="WhereExpr023">
      <description> Where clause appearing after a count clause </description>
      <created by="Michael Kay" on="2011-09-01"/>
      <environment ref="fsx"/>
      <dependency type="spec" value="XQ30+"/>
      <test>
         for $file in //File
         count $c
         where ($file//Allow/user = 'system\Aladin') 
         return $c
      </test>
      <result>
         <assert-string-value>2</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="WhereExpr024">
      <description> Multiple where clauses in suboptimal order </description>
      <created by="Michael Kay" on="2011-09-01"/>
      <environment ref="fsx"/>
      <dependency type="spec" value="XQ30+"/>
      <test>
         for $file in //File 
         let $prefix := substring($file/FileName, 1, 4)
         where ($prefix = 'File')
         where ($file//Allow/user = 'system\Hyungjeong')
         return $file/FileName
      </test>
      <result>
         <assert-string-value>File00000000000</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="WhereExpr025">
      <description> Where clause with no dependencies on FLWOR variables </description>
      <created by="Michael Kay" on="2011-09-01"/>
      <environment ref="fsx"/>
      <dependency type="spec" value="XQ30+"/>
      <test>
         for $file in //File 
         where current-date() gt xs:date('1900-01-01')
         let $prefix := substring($file/FileName, 1, 4)
         where ($prefix = 'File')
         where ($file//Allow/user = 'system\Hyungjeong')
         return $file/FileName
      </test>
      <result>
         <assert-string-value>File00000000000</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="WhereExpr026">
      <description> Where clause that depends on position() </description>
      <created by="Michael Kay" on="2011-09-01"/>
      <environment ref="fsx"/>
      <dependency type="spec" value="XQ30+"/>
      <test>
         let $doc := (/)
         return (11 to 15)!
            (for $file in $doc//File
            count $c
            where $c = position()
            return $file/FileName)
      </test>
      <result>
         <assert-string-value>File00000000000 File00000000001 File00000000002 File00000000003 File00000000004</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="WhereExpr027">
      <description> Where clause that depends on last() </description>
      <created by="Michael Kay" on="2011-09-01"/>
      <environment ref="fsx"/>
      <dependency type="spec" value="XQ30+"/>
      <test>
         let $doc := (/)
         return (11 to 15)!
            (for $file at $c in $doc//File
            where $c = last()
            return string($file/FileName))
      </test>
      <result>
         <assert-string-value>File00000000004 File00000000004 File00000000004 File00000000004 File00000000004</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="WhereExpr028">
      <description> Where clause with let (and no for) </description>
      <created by="Michael Kay" on="2011-09-01"/>
      <dependency type="spec" value="XQ10+"/>
      <test>
         let $x := 1 to 10
         where $x = 1
         return $x
      </test>
      <result>
         <assert-string-value>1 2 3 4 5 6 7 8 9 10</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="WhereExpr029">
      <description> Where clause with let (and no for) </description>
      <created by="Michael Kay" on="2011-09-01"/>
      <dependency type="spec" value="XQ10+"/>
      <test>
         let $x := 1 to 10
         where count($x) = 1
         return $x
      </test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   
   <test-case name="WhereExpr030">
      <description> Where clause with "outer for" </description>
      <created by="Michael Kay" on="2011-09-01"/>
      <dependency type="spec" value="XQ30+"/>
      <test>
         declare variable $n external := 10;
         for $x allowing empty in 1 to $n
         where $x lt 5
         return $x
      </test>
      <result>
         <assert-string-value>1 2 3 4</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="WhereExpr031">
      <description> Where clause with "outer for" </description>
      <created by="Michael Kay" on="2011-09-01"/>
      <dependency type="spec" value="XQ30+"/>
      <test>
         declare variable $n external := 0;
         for $x allowing empty in 1 to $n
         where not($x = 5)
         return concat("[", $x, "]")
      </test>
      <result>
         <assert-string-value>[]</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="WhereExpr032">
      <description> Where clause with "outer for". A trap for systems that rewrite where clauses as predicates. </description>
      <created by="Michael Kay" on="2011-09-01"/>
      <dependency type="spec" value="XQ30+"/>
      <test>
         for $x allowing empty in 1 to 5
         where $x lt 0
         return empty($x)
      </test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   
   <test-case name="WhereExpr033">
      <description> Integer-valued where clause. A trap for systems that rewrite where clauses as predicates. </description>
      <created by="Michael Kay" on="2011-09-01"/>
      <dependency type="spec" value="XQ30+"/>
      <test>
         declare variable $n external := 0;
         for $x in -2 to +2
         where ($n - $x)
         return $x
      </test>
      <result>
         <assert-string-value>-2 -1 1 2</assert-string-value>
      </result>
   </test-case>

   <test-case name="whereClause-1">
      <description> use of where clause involving an "or" expression. Use fn:true() </description>
      <created by="Carmelo Montanez" on="2005-11-18"/>
      <test>let $var := (fn:true()) where $var or fn:true() return $var or fn:true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="whereClause-2">
      <description> use of where clause involving an "or" expression. Use fn:false() Use fn:not() </description>
      <created by="Carmelo Montanez" on="2005-11-18"/>
      <test>let $var := (fn:false()) where fn:not($var or fn:false()) return $var or fn:false()</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="whereClause-3">
      <description> use of where clause involving an "or" ("and" operator) expression. Use fn:true() </description>
      <created by="Carmelo Montanez" on="2005-11-18"/>
      <test>let $var := (fn:true()) where $var and fn:true() return $var and fn:true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="whereClause-4">
      <description> use of where clause involving an "or" ("and" operator) expression. Use fn:false() Use fn:not() </description>
      <created by="Carmelo Montanez" on="2005-11-18"/>
      <test>let $var := (fn:false()) where fn:not($var and fn:false()) return $var and fn:false()</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="whereClause-5">
      <description> use of where clause with a typeswitch expression </description>
      <created by="Carmelo Montanez" on="2005-11-18"/>
      <test>let $var := 100 where typeswitch($var) case $i as xs:string return fn:false() case $i as xs:integer return fn:true() default return fn:false() return $var</test>
      <result>
         <assert-eq>100</assert-eq>
      </result>
   </test-case>

   <test-case name="whereClause-6">
      <description> use of where clause used with a string value and fn:string </description>
      <created by="Carmelo Montanez" on="2005-11-18"/>
      <test>let $var := "String" where fn:string($var) = "String" return $var</test>
      <result>
         <assert-string-value>String</assert-string-value>
      </result>
   </test-case>

   <test-case name="whereClause-7">
      <description> use of where clause used with a string-length function. </description>
      <created by="Carmelo Montanez" on="2005-11-18"/>
      <test>let $var := "String" where fn:string-length($var) = 6 return fn:string-length($var)</test>
      <result>
         <assert-eq>6</assert-eq>
      </result>
   </test-case>

   <test-case name="whereClause-8">
      <description> use of where clause used with a fn:count() function. </description>
      <created by="Carmelo Montanez" on="2005-11-18"/>
      <test>let $var := 100 where fn:count(($var)) = 1 return fn:count(($var))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="whereClause-9">
      <description> use of where clause used with is comparator. </description>
      <created by="Carmelo Montanez" on="2005-11-18"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $var := <anElement>Some content</anElement> where $var is $var return $var is $var]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="whereClause-10">
      <description> use of where clause used with quantified expression (some keyword). </description>
      <created by="Carmelo Montanez" on="2005-11-18"/>
      <test>
         let $var := 1 
         where some $x in (1, 2) satisfies fn:string($var) = "1" 
         return fn:string($var )</test>
      <result>
         <assert-string-value>1</assert-string-value>
      </result>
   </test-case>

   <test-case name="whereClause-11">
      <description> use of where clause used with quantified expression (every keyword). </description>
      <created by="Carmelo Montanez" on="2005-11-18"/>
      <test>
         let $var := 1 
         where every $x in (1, 1) satisfies fn:string($var) = "1" 
         return fn:string($var )</test>
      <result>
         <assert-string-value>1</assert-string-value>
      </result>
   </test-case>

   <test-case name="K-WhereExpr-1">
      <description> A for/where combination where the cardinality of the return statement is crucially affected by the binding sequence. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(for $fo in (1, 2, 3) where $fo eq 3 return $fo)</test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>

   <test-case name="K-WhereExpr-2">
      <description> Get the string value of the return statement of a for expression after being filtered by a where clause. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>string(exactly-one((for $fo in (1, 2, 3) where $fo eq 3 return $fo)))</test>
      <result>
         <assert-string-value>3</assert-string-value>
      </result>
   </test-case>

   <test-case name="K-WhereExpr-3">
      <description> A where clause containing a value which EBV cannot be extracted from. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count((for $fo in (1, 2, 3) where xs:time("08:08:23Z") return $fo)) eq 3</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-WhereExpr-4">
      <description> A for/where expression combined with fn:count(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>for $i in 1 where count(($i, 2, timezone-from-time(current-time()))) return true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-WhereExpr-5">
      <description> A for expression binding to one single value, combined with a positive where clause. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(for $i in 1 where false() return $i)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-WhereExpr-6">
      <description> A for expression binding to one single value, combined with a negative where clause. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(for $i in 1 where true() return $i) eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-WhereExpr-7">
      <description> A for expression binding to one single value, combined with a positive where clause. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(for $i in 1 where (1, current-time())[1] treat as xs:integer eq 0 return $i)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-WhereExpr-8">
      <description> A for expression binding to one single value, combined with a negative where clause. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(for $i in 1 where (1, current-time())[1] treat as xs:integer eq 1 return $i) eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-WhereExpr-9">
      <description> A for/where expression combined with fn:boolean. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>for $i in (1, 2, current-time())[1] where fn:boolean($i treat as xs:integer) return true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-WhereExpr-10">
      <description> A for/where expression combined with fn:boolean and xs:anyURI. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>for $i in (1, 2, current-time())[1] where xs:anyURI("example.com/") return true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-WhereExpr-11">
      <description> A for/where expression combined with fn:boolean and xs:anyURI. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(for $i in (1, 2, current-time())[1] where xs:anyURI("") return true())</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-WhereExpr-1">
      <description> Multiple where clauses is not allowed in XQuery 1.0. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="Michael Dyck" on="2011-09-05" change="Split off XQuery 3.0 expectation (to K2-WhereExpr-1b)"/>
      <dependency type="spec" value="XQ10"/>
      <test>for $a in 1 where true() where true() return $a</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-WhereExpr-1b">
      <description> Multiple where clauses are allowed in XQuery 3.0. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="Michael Dyck" on="2011-09-05" change="Split off XQuery 3.0 expectation (from K2-WhereExpr-1)"/>
      <dependency type="spec" value="XQ30+"/>
      <test>for $a in 1 where true() where true() return $a</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="K2-WhereExpr-2">
      <description> Multiple where clauses is not allowed(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>for $a in 1 where true(), true() return $a</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>
</test-set>
