<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-MapTest">
   <description>Tests for the MapTest production: map types in XPath 3.1</description>

         
   <dependency type="spec" value="XP31+ XQ31+"/>      

   <test-case name="MapTest-001" covers="map-constructor map-general">
      <description>instance of generic map type</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <test>map{} instance of map(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="MapTest-002" covers="map-constructor map-general">
      <description>instance of generic map type</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <test>map{1:"London"} instance of map(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="MapTest-003" covers="map-constructor map-general">
      <description>instance of generic map type</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <test>map{1:"London", "London":1} instance of map(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>   
   
   <test-case name="MapTest-004" covers="map-constructor map-general">
      <description>instance of specific map type</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <test>map{} instance of map(xs:integer, xs:string)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="MapTest-005" covers="map-constructor map-general">
      <description>instance of generic map type</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <test>map{1:"London"} instance of map(xs:integer, xs:string)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="MapTest-006" covers="map-constructor map-general">
      <description>instance of generic map type</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <test>map{1:"London", "London":1} instance of map(xs:integer, xs:string)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>   
   
   <test-case name="MapTest-007" covers="map-constructor map-general">
      <description>invalid map type</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <test>map{1:"London"} instance of map(xs:integer)</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case> 
   
   <test-case name="MapTest-008" covers="map-constructor map-general">
      <description>invalid map type</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <test>map{1:"London"} instance of map(integer, string)</test>
      <result>
         <error code="XPST0051"/>
      </result>
   </test-case>
   
   <test-case name="MapTest-009" covers="map-constructor map-general">
      <description>instance of map type after remove</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <test>map:remove(map{1:"London", "London":1}, "London") instance of map(xs:integer, xs:string)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>  
   
   <test-case name="MapTest-010" covers="map-constructor map-general">
      <description>instance of map type after addition</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <test>map:put(map{1:"London", 2:"Paris"}, 3, current-date()) instance of map(xs:integer, xs:string)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="MapTest-011" covers="map-constructor map-general">
      <description>instance of a less specific map type</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <test>map:put(map{1:"London", 2:"Paris"}, 3, "Berlin") instance of map(xs:decimal, xs:string+)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="MapTest-012" covers="map-constructor map-general">
      <description>map test requiring empty sequence</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <test>map{"London":(), "Paris":(), "Berlin":()} instance of map(xs:string, empty-sequence())</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="MapTest-013" covers="map-constructor map-general">
      <description>map test requiring empty sequence</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <test>map{"London":(), "Paris":(), "Berlin":(), "Rome":5} instance of map(xs:string, empty-sequence())</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="MapTest-014" covers="map-constructor map-general">
      <description>map test with cardinality constraint</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <test>map{"London":1, "Paris":2, "Berlin":3, "Rome":()} instance of map(xs:string, xs:integer?)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="MapTest-015" covers="map-constructor map-general">
      <description>map test with cardinality constraint</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <test>map{"London":1, "Paris":2, "Berlin":3, "Rome":()} instance of map(xs:string, xs:integer+)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="MapTest-016" covers="map-constructor map-general">
      <description>key type must be an item type</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <test>map{"London":1, "Paris":2, "Berlin":3, "Rome":5} instance of map(xs:string+, xs:integer+)</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>
   
   <test-case name="MapTest-017" covers="map-constructor map-general">
      <description>sequence of maps</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <test>map{"London":1, "Paris":2, "Berlin":3, "Rome":5} instance of map(xs:string, xs:integer+)*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="MapTest-018" covers="map-constructor map-general">
      <description>sequence of maps</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <test>(map{"London":1, "Paris":2, "Berlin":3, "Rome":5}, map{}) instance of map(xs:string, xs:integer+)*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="MapTest-019" covers="map-constructor map-general">
      <description>sequence of maps</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <test>(map{"London":1, "Paris":2, "Berlin":3, "Rome":5}, map{}) instance of map(xs:string, xs:integer+)?</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="MapTest-020" covers="map-contains map-constructor">
      <description>no conversion on function call</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
         let $f := function($m as map(xs:integer, xs:integer)) as xs:boolean {
             map:contains($m, 17)
         }
         return $f(map{17: xs:untypedAtomic('234')})
      </test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="MapTest-040" covers="map-size map-general">
      <description>map type subsumption</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
         function($m as map(xs:integer, xs:string)) as xs:integer {map:size($m)} 
         instance of function(map(*)) as xs:integer
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="MapTest-041" covers="map-size map-general">
      <description>map type subsumption</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
         function($m as map(xs:integer, xs:string)) as xs:integer {map:size($m)} 
         instance of function(map(xs:decimal, xs:string+)) as xs:integer
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="MapTest-042" covers="map-size map-general">
      <description>map type subsumption</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
         function($m as map(*)) as xs:integer {map:size($m)} 
         instance of function(function(*)) as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="MapTest-043" covers="map-size map-general">
      <description>map type subsumption</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
         function($m as map(xs:integer, xs:string)) as xs:integer {map:size($m)} 
         instance of function(function(*)) as xs:integer
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="MapTest-044" covers="map-size map-general">
      <description>map type subsumption</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
         function($m as map(xs:integer, xs:string)) as xs:integer {map:size($m)} 
         instance of function(function(xs:anyAtomicType) as item()*) as xs:integer
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="MapTest-045" covers="map-size map-general">
      <description>map type subsumption</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
         function($m as map(xs:integer, xs:string)) as xs:integer {map:size($m)} 
         instance of function(function(xs:integer) as item()*) as xs:integer
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="MapTest-050" covers="map-size map-general">
      <description>map type subsumption</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
         function($m as map(*)) as xs:integer {map:size($m)} 
         instance of function(map(xs:integer, xs:string)) as xs:integer
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="MapTest-051" covers="map-size map-general">
      <description>map type subsumption</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
         function($m as map(xs:decimal, xs:string+)) as xs:integer {map:size($m)} 
         instance of function(map(xs:integer, xs:string)) as xs:integer
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="MapTest-052" covers="map-general">
      <description>map type subsumption</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
         function($m as function(*)) as xs:integer {function-arity($m)} 
         instance of function(map(*)) as xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="MapTest-053" covers="map-general">
      <description>map type subsumption</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
         function($m as function(*)) as xs:integer {function-arity($m)} 
         instance of function(map(xs:integer, xs:string)) as xs:integer
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="MapTest-054" covers="map-size">
      <description>map type subsumption</description>
      <created by="Michael Kay" on="2014-10-08"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
         function($m as function(xs:anyAtomicType) as item()*) as xs:integer {map:size($m)} 
         instance of function(map(xs:integer, xs:string)) as xs:integer
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="MapTest-055" covers="map-general">
      <description>Dynamic function call with operand a map</description>
      <created by="Debbie Lockett" on="2016-04-18"/>
      <dependency type="spec" value="XP31+ XQ31+"/>
      <test>map{1:2, 2:4, 3:6}(2)</test>
      <result>
         <assert-eq>4</assert-eq>
      </result>
   </test-case>
   
   <test-case name="MapTest-057" covers="map-general">
      <description>Dynamic function call with operand a map</description>
      <created by="Debbie Lockett" on="2016-04-18"/>
      <dependency type="spec" value="XP31+ XQ31+"/>
      <test>let $map:= map{1:'a', 2:'b', 3:'c', 4:'d'} return $map(3)</test>
      <result>
         <assert-deep-eq>'c'</assert-deep-eq>
      </result>
   </test-case>


</test-set>
