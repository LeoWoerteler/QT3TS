<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-filter">
    <description>Tests for the higher-order fn:filter function</description>
    <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/" idref="func-filter"/>
    

    <dependency type="spec" value="XP30+ XQ30+"/>
    
    <test-case name="filter-001">
        <description>Basic test using starts-with()</description>
        <created by="Michael Kay" on="2010-02-10"/>
        <test>filter(starts-with(?, "a"), ("apple", "pear", "apricot", "advocado", "orange"))</test>
        <result>
            <assert-deep-eq>"apple", "apricot", "advocado"</assert-deep-eq>
        </result>
    </test-case>
    <test-case name="filter-002">
        <description>Test using an inline user-defined function</description>
        <created by="Michael Kay" on="2010-02-10"/>
        <test>filter(function($x){$x gt 10}, (12, 4, 46, 23, -8))</test>
        <result>
            <assert-deep-eq>12, 46, 23</assert-deep-eq>
        </result>
    </test-case>
    <test-case name="filter-003">
        <description>Test using an inline user-defined function</description>
        <created by="Michael Kay" on="2010-02-10"/>
        <environment>
            <source role="." file="filter/filter003.xml">
                <description/>
                <created by="Michael Kay" on="2010-02-10"/>
            </source>
        </environment>
        <dependency type="spec" value="XQ30+"/>
        <test>let $data := (/employees)
              return filter(function($x as element(emp)){xs:int($x/@salary) lt 300}, $data/emp)</test>
        <result>
                <all-of>
                    <assert-count>3</assert-count>
                    <assert-type>element(emp)*</assert-type>
                    <assert>$result/@name = 'john'</assert>
                    <assert>$result/@name = 'anne'</assert>
                    <assert>$result/@name = 'kumar'</assert>
                </all-of>
        </result>
    </test-case>
    <test-case name="filter-004">
        <description>Test using an inline user-defined function</description>
        <created by="Michael Kay" on="2010-02-10"/>
        <test>(1 to 20)[. = filter(function($x){$x idiv 2 * 2 = $x}, 1 to position())]</test>
        <result>
                <assert-deep-eq>2, 4, 6, 8, 10, 12, 14, 16, 18, 20</assert-deep-eq>
        </result>
    </test-case>
    <test-case name="filter-005">
        <description>implement eg:index-of-node()</description>
        <created by="Michael Kay" on="2010-02-10"/>
        <environment>
            <source role="." file="filter/filter005.xml">
                <description/>
                <created by="Michael Kay" on="2010-02-10"/>
            </source>
        </environment>
        <test>let $index-of-node := function($seqParam as node()*, $srchParam as node()) as xs:integer* 
                                    { filter( function($this as xs:integer) as xs:boolean 
                                              {$seqParam[$this] is $srchParam}, 1 to count($seqParam) ) },
            $nodes := /*/*,
            $perm := ($nodes[1], $nodes[2], $nodes[3], $nodes[1], $nodes[2], $nodes[4], $nodes[2], $nodes[1]) 
            return $index-of-node($perm, $nodes[2]) </test>
        <result>
                <assert-deep-eq>2, 5, 7</assert-deep-eq>
        </result>
    </test-case>
    <test-case name="filter-901">
        <description>filter function - not a boolean</description>
        <created by="Michael Kay" on="2010-02-10"/>
        <test>filter(normalize-space#1, ("apple", "pear", "apricot", "advocado", "orange"))</test>
        <result>
                <error code="XPTY0004"/>
        </result>
    </test-case>
    <test-case name="filter-902">
        <description>filter function - returns empty sequence </description>
        <created by="Michael Kay" on="2010-02-10"/>
        <test>filter(function($x){if(starts-with($x,'a')) then true() else ()}, ("apple", "pear", "apricot", "advocado", "orange"))</test>
        <result>
                <error code="XPTY0004"/>
        </result>
    </test-case>
    <test-case name="filter-903">
        <description>filter function - returns non-singleton sequence</description>
        <created by="Michael Kay" on="2010-02-10"/>
        <test>filter(function($x){if(starts-with($x,'a')) then (true(), true()) else false()}, ("apple", "pear", "apricot", "advocado", "orange"))</test>
        <result>
                <error code="XPTY0004"/>
        </result>
    </test-case>
    <test-case name="filter-904">
        <description>filter function - item in sequence is of wrong type</description>
        <created by="Michael Kay" on="2010-02-10"/>
        <test>filter(ends-with(?, 'e'), ("apple", "pear", "apricot", "advocado", "orange", current-date()))</test>
        <result>
                <error code="XPTY0004"/>
        </result>
    </test-case>
    
</test-set>
