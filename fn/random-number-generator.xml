<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-random-number-generator" covers="fn-random-number-generator">

   <description>Tests the fn:random-number-generator() function</description>

    <link type="spec" document="http://www.w3.org/TR/xpath-functions-31/"
       idref="func-random-number-generator"/>
   
    <dependency type="spec" value="XP31+ XQ31+"/>
    <dependency type="feature" value="higherOrderFunctions"/>
   
    <test-case name="fn-random-number-generator-1">
        <description>Test function is present</description>
        <created by="Debbie Lockett" on="2015-01-23"/>
        <test>fn:random-number-generator()</test>
        <result>
            <all-of>
                <assert-type>map(*)</assert-type>
                <assert-type>map(xs:string, item())</assert-type>
            </all-of>            
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-2">
        <description>Test for 'number' generator</description>
        <created by="Debbie Lockett" on="2015-01-23"/>
        <test>fn:random-number-generator()?number</test>
        <result>
            <assert-type>xs:double</assert-type>
        </result>
    </test-case>
            
    <test-case name="fn-random-number-generator-3">
        <description>Test randomly generated number is greater than 0</description>
        <created by="Debbie Lockett" on="2015-01-23"/>
        <test>random-number-generator()?number ge 0</test>
        <result>
            <assert-true/>
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-4">
        <description>Test randomly generated number is in correct range; variable reference</description>
        <created by="Debbie Lockett" on="2015-01-23"/>
        <test>let $r := random-number-generator()?number return ($r ge 0 and $r lt 1)</test>
        <result>
            <assert-true/>
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-5">
        <description>Test randomly generated number is in correct range; variable reference</description>
        <created by="Debbie Lockett" on="2015-01-23"/>
        <test>let $r := random-number-generator()?number return ($r lt 0 or $r ge 1)</test>
        <result>
            <assert-false/>
        </result>
    </test-case>    
        
    <test-case name="fn-random-number-generator-6">
        <description>'next' function</description>
        <created by="Debbie Lockett" on="2015-01-23"/>
        <test>fn:random-number-generator()?next()</test>
        <result>
            <all-of>
                <assert-type>map(*)</assert-type>
                <assert-type>map(xs:string, item())</assert-type>
            </all-of>  
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-7">
        <description>'next' function and 'number' generator</description>
        <created by="Debbie Lockett" on="2015-01-23"/>
        <test>fn:random-number-generator()?next()?number</test>
        <result>
            <assert-type>xs:double</assert-type>
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-8">
        <description>'next' function and 'number' generator; variable reference</description>
        <created by="Debbie Lockett" on="2015-01-23"/>
        <test>let $r := fn:random-number-generator()?next()?number return ($r ge 0 and $r lt 1)</test>
        <result>
            <assert-true/>
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-9">
        <description>'next' function and 'number' generator; variable reference</description>
        <created by="Debbie Lockett" on="2015-01-23"/>
        <test>let $r := fn:random-number-generator()?next()?number return ($r lt 0 or $r ge 1)</test>
        <result>
            <assert-false/>
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-10">
        <description>Test function with seed supplied</description>
        <created by="Debbie Lockett" on="2015-01-23"/>
        <test>fn:random-number-generator(23482)</test>
        <result>
            <all-of>
                <assert-type>map(*)</assert-type>
                <assert-type>map(xs:string, item())</assert-type>
            </all-of>            
        </result>
    </test-case>    
    
    <test-case name="fn-random-number-generator-11">
        <description>Test function with seed supplied, 'number' generator</description>
        <created by="Debbie Lockett" on="2015-01-23"/>
        <test>fn:random-number-generator(0000)?number</test>
        <result>
            <assert-type>xs:double</assert-type>
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-12">
        <description>Random number generator with seed, 'number' generator</description>
        <created by="Debbie Lockett" on="2015-01-26"/>
        <test>random-number-generator(3147)?number ge 0</test>
        <result>
            <assert-true/>
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-13">
        <description>Random number generator with seed, check number is in correct range</description>
        <created by="Debbie Lockett" on="2015-01-26"/>
        <test>let $r := random-number-generator("random")?number return ($r ge 0 and $r lt 1)</test>
        <result>
            <assert-true/>
        </result>
    </test-case>    
    
    <test-case name="fn-random-number-generator-14">
        <description>Random number generator with seed, 'next' function</description>
        <created by="Debbie Lockett" on="2015-01-23"/>
        <test>fn:random-number-generator(0000)?next()</test>
        <result>
            <all-of>
                <assert-type>map(*)</assert-type>
                <assert-type>map(xs:string, item())</assert-type>
            </all-of>  
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-15">
        <description>Random number generator with seed, 'next' function and 'number' generator</description>
        <created by="Debbie Lockett" on="2015-01-23"/>
        <test>fn:random-number-generator()?next()?number</test>
        <result>
            <assert-type>xs:double</assert-type>
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-16">
        <description>Random number generator with seed, 'next' function and 'number' generator</description>
        <created by="Debbie Lockett" on="2015-01-23"/>
        <test>let $r := fn:random-number-generator()?next()?number return ($r ge 0 and $r lt 1)</test>
        <result>
            <assert-true/>
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-17">
        <description>Permute sequence of integers</description>
        <created by="Debbie Lockett" on="2015-01-26"/>
        <test>fn:random-number-generator()?permute(1 to 100)</test>
        <result>
            <assert-permutation>1 to 100</assert-permutation>
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-18">
        <description>Permute sequence of strings</description>
        <created by="Debbie Lockett" on="2015-01-26"/>
        <test>fn:random-number-generator()?permute(("a","b","c","d","e","f","g"))</test>
        <result>
            <assert-permutation>("a","b","c","d","e","f","g")</assert-permutation>
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-19">
        <description>Permute sequence, take subsequence</description>
        <created by="Debbie Lockett" on="2015-01-23"/>
        <test>subsequence(fn:random-number-generator()?permute(("a","b","c","d","e","f","g")),2,5)</test>
        <result>
            <all-of>
                <assert-type>xs:string*</assert-type>
                <assert>count($result) eq 5</assert>
            </all-of>
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-20">
        <description>Permute sequence, take subsequence with arrow operator</description>
        <created by="Debbie Lockett" on="2015-01-23"/>
        <dependency type="spec" value="XP31+ XQ31+"/>
        <test>fn:random-number-generator()?permute(("a","b","c","d","e","f","g")) => subsequence(2,5)</test>
        <result>
            <all-of>
                <assert-type>xs:string*</assert-type>
                <assert>count($result) eq 5</assert>
            </all-of>
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-21">
        <description>Function to give sequence (of any finite length) of randomly generated numbers</description>
        <created by="Debbie Lockett" on="2015-01-23"/>
        <modified by="Debbie Lockett" on="2015-02-27" change="Change dependency"/>
        <dependency type="spec" value="XQ31+"/>
        <test><![CDATA[
            declare namespace r="http://example.com/random/";
            declare %public function r:random-sequence($length as xs:integer) as xs:double* {
  r:random-sequence($length, fn:random-number-generator())
};
declare %private function r:random-sequence($length as xs:integer, $G as map(xs:string, item())) {
  if ($length eq 0)
  then ()
  else ($G?number, r:random-sequence($length - 1, $G?next()))
};
r:random-sequence(200)]]></test>
        <result>
            <all-of>
                <assert-type>xs:double*</assert-type>
                <assert>count($result) eq 200</assert>
            </all-of>
        </result>
    </test-case>

    <test-case name="fn-random-number-generator-22">
        <description>Detect randomness</description>
        <created by="Loren Cahlander" on="2015-01-18"/>
        <modified by="Loren Cahlander" on="2015-04-21" change="Moved to proper location"/>
        <modified by="Christian Gruen" on="2015-06-22" change="First condition fixed"/>
        <dependency type="spec" value="XQ31+"/>
        <test><![CDATA[
         declare function local:random-sequence($length as xs:integer) as xs:double* {
         local:random-sequence($length, fn:random-number-generator())
         };
         declare function local:random-sequence($length as xs:integer, $G as map(xs:string, item())) {
         if ($length eq 0)
         then ()
         else ($G?number, local:random-sequence($length - 1, $G?next()))
         };
         
         let $r := local:random-sequence(200)
         
         return if (not(count(distinct-values($r)) >= 0.5*count($r)))
         then fn:false()
         else if (not(not(deep-equal($r, fn:sort($r)))))
         then fn:false()
         else if (not(count($r[. lt 0.5]) > 0.2*count($r) and count($r[. gt 0.5]) > 0.2*count($r)))
         then fn:false()
         else fn:true()
      ]]></test>
        <result>
            <assert-true/>
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-23">
        <description>Highly unlikely that two random number generators produce the same result</description>
        <created by="Michael Kay" on="2015-04-22"/>
        <dependency type="spec" value="XP31+ XQ31+"/>
        <test>let $G := fn:random-number-generator(fn:current-dateTime()) return deep-equal($G?permute(1 to 100), $G?next()?permute(1 to 100))</test>
        <result>
            <assert-false/>
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-24">
        <description>The arity-1 function is deterministic</description>
        <created by="Michael Kay" on="2015-04-22"/>
        <dependency type="spec" value="XP31+ XQ31+"/>
        <test>deep-equal(fn:random-number-generator(fn:current-dateTime())?permute(1 to 100), fn:random-number-generator(fn:current-dateTime())?permute(1 to 100))</test>
        <result>
            <assert-true/>
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-25">
        <description>The arity-0 function is deterministic</description>
        <created by="Michael Kay" on="2015-04-22"/>
        <dependency type="spec" value="XP31+ XQ31+"/>
        <test>deep-equal(fn:random-number-generator()?permute(1 to 100), fn:random-number-generator()?permute(1 to 100))</test>
        <result>
            <assert-true/>
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-26">
        <description>The choice of seed makes a difference</description>
        <created by="Michael Kay" on="2015-04-22"/>
        <dependency type="spec" value="XP31+ XQ31+"/>
        <test>deep-equal(fn:random-number-generator(0)?permute(1 to 100), fn:random-number-generator(1)?permute(1 to 100))</test>
        <result>
            <assert-false/>
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-27">
        <description>NaN is a valid seed</description>
        <created by="Michael Kay" on="2015-04-22"/>
        <dependency type="spec" value="XP31+ XQ31+"/>
        <test>fn:random-number-generator(xs:double('NaN'))?permute(1)</test>
        <result>
            <assert-eq>1</assert-eq>
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-28">
        <description>Permute an empty sequence</description>
        <created by="Michael Kay" on="2015-04-22"/>
        <dependency type="spec" value="XP31+ XQ31+"/>
        <test>fn:random-number-generator('a')?permute((1 to 100)[. lt 0])</test>
        <result>
            <assert-empty/>
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-29">
        <description>map:keys() applied to result</description>
        <created by="Michael Kay" on="2015-04-22"/>
        <environment ref="map"/>
        <dependency type="spec" value="XP31+ XQ31+"/>
        <test>map:keys(fn:random-number-generator('a'))</test>
        <result>
            <all-of>
                <assert>$result = 'next'</assert>
                <assert>$result = 'number'</assert>
                <assert>$result = 'permute'</assert>
            </all-of>
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-30">
        <description>Dynamic call to the function item</description>
        <created by="Michael Kay" on="2015-04-22"/>
        <dependency type="spec" value="XP31+ XQ31+"/>
        <test>fn:random-number-generator('a')?next => fn:apply([]) => fn:apply(["number"])</test>
        <result>
            <assert-type>xs:double</assert-type>
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-31">
        <description>Use the map as function item</description>
        <created by="Michael Kay" on="2015-04-22"/>
        <dependency type="spec" value="XQ31+"/>
        <test><![CDATA[
            declare function local:test($f as function(*)) as xs:integer {
               count($f('zzz'))
            };
            local:test(fn:random-number-generator())
            ]]></test>
        <result>
            <assert-eq>0</assert-eq>
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-32">
        <description>Test function is present</description>
        <created by="Tim Mills" on="2016-06-13"/>
        <test>fn:random-number-generator( () )</test>
        <result>
            <all-of>
                <assert-type>map(*)</assert-type>
                <assert-type>map(xs:string, item())</assert-type>
            </all-of>            
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-33">
        <description>Test for 'number' generator</description>
        <created by="Tim Mills" on="2016-06-13"/>
        <test>fn:random-number-generator( () )?number</test>
        <result>
            <assert-type>xs:double</assert-type>
        </result>
    </test-case>
            
    <test-case name="fn-random-number-generator-34">
        <description>Test that random-number-generator with empty sequence is equivalent to unary function.</description>
        <created by="Tim Mills" on="2016-06-13"/>
        <test>random-number-generator()?number eq
              random-number-generator( () )?number</test>
        <result>
            <assert-true/>
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-35">
        <description>Test for 'next' generator</description>
        <created by="Tim Mills" on="2016-06-13"/>
        <test>fn:random-number-generator()?next</test>
        <result>
            <all-of>
                <assert-type>function(*)</assert-type>
                <assert-type>function() as map(xs:string, item())</assert-type>
            </all-of>  
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-36">
        <description>Test for 'next' generator</description>
        <created by="Tim Mills" on="2016-06-13"/>
        <test>fn:random-number-generator( () )?next</test>
        <result>
            <all-of>
                <assert-type>function(*)</assert-type>
                <assert-type>function() as map(xs:string, item())</assert-type>
            </all-of>  
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-37">
        <description>Test for 'next' generator</description>
        <created by="Tim Mills" on="2016-06-13"/>
        <test>fn:random-number-generator( 0 )?next</test>
        <result>
            <all-of>
                <assert-type>function(*)</assert-type>
                <assert-type>function() as map(xs:string, item())</assert-type>
            </all-of>  
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-38">
        <description>'next' function</description>
        <created by="Tim Mills" on="2016-06-13"/>
        <test>fn:random-number-generator( () )?next()</test>
        <result>
            <all-of>
                <assert-type>map(*)</assert-type>
                <assert-type>map(xs:string, item())</assert-type>
            </all-of>  
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-39">
        <description>Test that random-number-generator with empty sequence is equivalent to unary function.</description>
        <created by="Tim Mills" on="2016-06-13"/>
        <test>fn:random-number-generator()?next()?number eq
              fn:random-number-generator( () )?next()?number</test>
        <result>
            <assert-true />
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-40">
        <description>Test for 'permute' generator</description>
        <created by="Tim Mills" on="2016-06-13"/>
        <test>fn:random-number-generator()?permute</test>
        <result>
            <all-of>
                <assert-type>function(*)</assert-type>
                <assert-type>function(item()*) as item()*</assert-type>
            </all-of>  
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-41">
        <description>Test for 'permute' generator</description>
        <created by="Tim Mills" on="2016-06-13"/>
        <test>fn:random-number-generator( () )?permute</test>
        <result>
            <all-of>
                <assert-type>function(*)</assert-type>
                <assert-type>function(item()*) as item()*</assert-type>
            </all-of>  
        </result>
    </test-case>

    <test-case name="fn-random-number-generator-42">
        <description>Test for 'permute' generator</description>
        <created by="Tim Mills" on="2016-06-13"/>
        <test>fn:random-number-generator( 0 )?permute</test>
        <result>
            <all-of>
                <assert-type>function(*)</assert-type>
                <assert-type>function(item()*) as item()*</assert-type>
            </all-of>  
        </result>
    </test-case>

    <test-case name="fn-random-number-generator-43">
        <description>Permute sequence of integers</description>
        <created by="Tim Mills" on="2016-06-13"/>
        <test>deep-equal(fn:random-number-generator()?permute(1 to 100),
                         fn:random-number-generator( () )?permute(1 to 100))</test>
        <result>
            <assert-true />
        </result>
    </test-case>
    
    <test-case name="fn-random-number-generator-44">
        <description>Use fold-left() to generate a sequence of random numbers</description>
        <created by="Michael Kay" on="2017-01-12"/>
        <test>fold-left(1 to 10, random-number-generator(), 
                function($z, $i){ head($z)('next')(), tail($z), head($z)('number')}) => tail()
        </test>
        <result>
            <all-of>
                <assert>count($result) = 10</assert>
                <assert>count(distinct-values($result)) ge 9</assert>
                  <!-- One pair of duplicates might happen occasionally, more than one needs investigation -->
                <assert-type>xs:double+</assert-type>
                <assert>every $x in $result satisfies ($x ge 0 and $x lt 1)</assert>
            </all-of>
        </result>
    </test-case>
    
    
    
</test-set>
