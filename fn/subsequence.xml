<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-subsequence">
   <description>Tests for the subsequence() function</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="func-subsequence"/>

   <test-case name="fn-subsequence-mix-args-001">
      <description> arg1: sequence of string, arg2 &amp; arg3: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:subsequence( ("a", "b", "c"), 1, 1)</test>
      <result>
         <assert-deep-eq>"a"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-subsequence-mix-args-002">
      <description> arg1: sequence of string, arg2 &amp; arg3: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:subsequence( ("a", "b", "c"), 3, 12)</test>
      <result>
         <assert-deep-eq>"c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-subsequence-mix-args-003">
      <description> arg1: sequence of string, arg2 &amp; arg3: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:subsequence( ("a", xs:string(""),"b", "c"), 1, 3)</test>
      <result>
         <assert-deep-eq>"a", "", "b"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-subsequence-mix-args-004">
      <description> arg1: sequence of string, arg2 &amp; arg3: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:subsequence( ("a", xs:string("hello"),"b", "c"), 1, 3)</test>
      <result>
         <assert-deep-eq>"a", "hello", "b"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-subsequence-mix-args-005">
      <description> arg1: sequence of string &amp; anyURI, arg2 &amp; arg3: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:subsequence( ("a", xs:anyURI("www.example.com"),"b", "c"), 1, 3)</test>
      <result>
         <assert-deep-eq>"a", "www.example.com", "b"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-subsequence-mix-args-006">
      <description> arg1: sequence of string, arg2 &amp; arg3: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:subsequence( ("a", (), (), "b", "c"), 1, 3)</test>
      <result>
         <assert-deep-eq>"a", "b", "c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-subsequence-mix-args-007">
      <description> arg1: sequence of string &amp; integer, arg2 &amp; arg3: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:subsequence( ("a", xs:integer("100"), xs:integer("-100"), "b", "c"),2,4)</test>
      <result>
         <assert-deep-eq>100, -100, "b", "c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-subsequence-mix-args-008">
      <description> arg1: sequence of string,decimal &amp; integer, arg2 &amp; arg3: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:subsequence( ("a", xs:decimal("-1.000000000001"), xs:integer("-100"), "b", "c"), 2,3)</test>
      <result>
         <assert-deep-eq>-1.000000000001, -100, "b"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-subsequence-mix-args-009">
      <description> arg1: sequence of string &amp; float , arg2 &amp; arg3: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:subsequence( ("a", xs:float("INF"), "b", "c"),-2,3)</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="fn-subsequence-mix-args-010">
      <description> arg1: sequence of string &amp; float , arg2 &amp; arg3: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:subsequence ( ("a", xs:float("-INF"), "b", "c"), 1,2)</test>
      <result>
         <assert-deep-eq>"a", xs:float("-INF")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-subsequence-mix-args-011">
      <description> arg1: sequence of string &amp; float , arg2 &amp; arg3: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:subsequence ( ("a", xs:float("NaN"), "b", "c"), 0, 2)</test>
      <result>
         <assert-eq>"a"</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-subsequence-mix-args-012">
      <description> arg1: sequence of string &amp; float , arg2 &amp; arg3: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:subsequence ( ("a", xs:float("1.01"), "b", "c"), 2,4)</test>
      <result>
         <assert-deep-eq>1.01, "b", "c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-subsequence-mix-args-013">
      <description> arg1: sequence of string &amp; double , arg2 &amp; arg3: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:subsequence ( ("a", xs:double("NaN"), "b", "c"), 2, 20)</test>
      <result>
         <assert-deep-eq>xs:double('NaN'), "b", "c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-subsequence-mix-args-014">
      <description> arg1: sequence of string &amp; double , arg2 &amp; arg3: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:subsequence ( ("a", xs:double("1.01"), "b", "c"), 2,3)</test>
      <result>
         <assert-deep-eq>1.01, "b", "c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-subsequence-mix-args-015">
      <description> arg1: sequence of string &amp; double , arg2 &amp; arg3: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:subsequence ( ("a", xs:double("-INF"), "b", "c"), 2,2)</test>
      <result>
         <assert-deep-eq>xs:double('-INF'), "b"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-subsequence-mix-args-016">
      <description> arg1: sequence of string &amp; double , arg2 &amp; arg3: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:subsequence ( ("a", xs:double("INF"), "b", "c"), 2, 1)</test>
      <result>
         <assert-eq>xs:double("INF")</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-subsequence-mix-args-017">
      <description> arg1: sequence of string &amp; boolean, arg2 &amp; arg3: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:subsequence ( ("a", xs:boolean("1"), "b", "c"), 1,2)</test>
      <result>
         <assert-deep-eq>"a", true()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-subsequence-mix-args-018">
      <description> arg1: sequence of string &amp; boolean, arg2 &amp; arg3: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:subsequence ( ("a", xs:boolean("0"), "b", "c"), 2,1)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fn-subsequence-mix-args-019">
      <description> arg1: sequence of string &amp; boolean, arg2 &amp; arg3: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:subsequence ( ("a", xs:boolean("true"), "b", "c"), 1,2)</test>
      <result>
         <assert-deep-eq>"a", true()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-subsequence-mix-args-020">
      <description> arg1: sequence of string &amp; boolean, arg2 &amp; arg3: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:subsequence ( ("a", xs:boolean("false"), "b", "c"), 1, 3)</test>
      <result>
         <assert-deep-eq>"a", false(), "b"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-subsequence-mix-args-021">
      <description> arg1: sequence of string &amp; date , arg2 &amp; arg3: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:subsequence ( ("a", xs:date("1993-03-31"), "b", "c"), 1,2)</test>
      <result>
         <assert-deep-eq>"a", xs:date('1993-03-31')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-subsequence-mix-args-022">
      <description> arg1: sequence of string &amp; dateTime, arg2 &amp; arg3: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:subsequence ( ("a", xs:dateTime("1972-12-31T00:00:00"), "b", "c"), 0,2)</test>
      <result>
         <assert-eq>"a"</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-subsequence-mix-args-023">
      <description> arg1: sequence of string &amp; time , arg2 &amp; arg3: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:subsequence ( ("a", xs:time("12:30:00"), "b", "c"), 1, 2)</test>
      <result>
         <assert-deep-eq>"a", xs:time('12:30:00')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-subsequence-mix-args-024">
      <description> subsequence(X, -INF, +INF Returns () because -INF + INF = NaN, and position() lt NaN is false. See XSLT test case bug 837 (member only bugzilla) </description>
      <created by="Michael Kay" on="2010-06-18"/>
      <test>fn:subsequence (1 to 10, xs:double('-INF'), xs:double('INF'))</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-1">
      <description> A test whose essence is: `subsequence()`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence()</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-2">
      <description> A test whose essence is: `subsequence(1)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence(1)</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-3">
      <description> A test whose essence is: `subsequence(1, 1, 1, 1)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence(1, 1, 1, 1)</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-4">
      <description> A test whose essence is: `empty(subsequence((), 2, 3))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(subsequence((), 2, 3))</test>
      <result>
         <any-of>
            <assert-true/>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-5">
      <description> A test whose essence is: `empty(subsequence((1, 2, 3), 2, -10))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(subsequence((1, 2, 3), 2, -10))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-6">
      <description> A test whose essence is: `count(subsequence((1, 2, 3, "four"), 4)) eq 1`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(subsequence((1, 2, 3, "four"), 4)) eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-7">
      <description> A test whose essence is: `count(subsequence((1, 2, 3, "four"), 4, 1)) eq 1`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(subsequence((1, 2, 3, "four"), 4, 1)) eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-8">
      <description> A test whose essence is: `subsequence((1, 2, 3.1, "four"), 4)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence((1, 2, 3.1, "four"), 4)</test>
      <result>
         <assert-eq>"four"</assert-eq>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-9">
      <description> A test whose essence is: `subsequence((1, 2, 3.1, "four"), 4, 1)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence((1, 2, 3.1, "four"), 4, 1)</test>
      <result>
         <assert-eq>"four"</assert-eq>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-10">
      <description> A test whose essence is: `subsequence((1, 2, 3.1, "four"), 3, 1) instance of xs:decimal`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence((1, 2, 3.1, "four"), 3, 1) instance of xs:decimal</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-11">
      <description> A test whose essence is: `subsequence((1, 2, 3.1, "four"), 1, 1)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence((1, 2, 3.1, "four"), 1, 1)</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-12">
      <description> A test whose essence is: `empty(subsequence((1, 2, 3, "four"), 4, -3))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(subsequence((1, 2, 3, "four"), 4, -3))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-13">
      <description> A test whose essence is: `empty(subsequence((1, 2, 3, "four"), -4, -3))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(subsequence((1, 2, 3, "four"), -4, -3))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-14">
      <description> A test whose essence is: `subsequence((1, 2, 3), 1, 1) eq 1`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence((1, 2, 3), 1, 1) eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-15">
      <description> A test whose essence is: `subsequence((1, 2, 3), 1, 1) eq 1`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence((1, 2, 3), 1, 1) eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-16">
      <description> A test whose essence is: `subsequence((1, 2, 3), 3) eq 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence((1, 2, 3), 3) eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-17">
      <description> A test whose essence is: `count(subsequence((1, 2, 3), 1, 1)) eq 1`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(subsequence((1, 2, 3), 1, 1)) eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-18">
      <description> A test whose essence is: `count(subsequence((1, 2, 3), 1, 3)) eq 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(subsequence((1, 2, 3), 1, 3)) eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-19">
      <description> A test whose essence is: `count(subsequence((1, 2, 3, "four"), 4)) eq 1`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(subsequence((1, 2, 3, "four"), 4)) eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-20">
      <description> A test whose essence is: `count(subsequence(1 to 3, 1, 1)) eq 1`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(subsequence(1 to 3, 1, 1)) eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-21">
      <description> A test whose essence is: `empty(subsequence((1, 2), 4))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(subsequence((1, 2), 4))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-22">
      <description> A test whose essence is: `subsequence((5, 6, 7, 8), 2, 1) eq 6`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence((5, 6, 7, 8), 2, 1) eq 6</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-23">
      <description> A test whose essence is: `count(subsequence((1, 2), 2)) eq 1`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(subsequence((1, 2), 2)) eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-24">
      <description> A test whose essence is: `count(subsequence((1, 2, 3, "four"), 2)) eq 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(subsequence((1, 2, 3, "four"), 2)) eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-25">
      <description> A test whose essence is: `count(subsequence((1, 2, 3, "four"), 2, 2)) eq 2`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(subsequence((1, 2, 3, "four"), 2, 2)) eq 2</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-26">
      <description> A test whose essence is: `subsequence((1, 2, 3.1, "four"), 1, 1)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence((1, 2, 3.1, "four"), 1, 1)</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-27">
      <description> A test whose essence is: `1 eq "a string"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>1 eq "a string"</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-28">
      <description> A test whose essence is: `1 eq subsequence(("1", 2, 3.1, "four"), 1, 1)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>1 eq subsequence(("1", 2, 3.1, "four"), 1, 1)</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-29">
      <description> A test whose essence is: `subsequence(("1", 2, 3.1, "four"), 1, 1) eq 1`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence(("1", 2, 3.1, "four"), 1, 1) eq 1</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-30">
      <description> A test whose essence is: `subsequence(error(), 1, 1)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence(error(), 1, 1)</test>
      <result>
         <error code="FOER0000"/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-31">
      <description> A test whose essence is: `count(subsequence((1, 2, 2, current-time()), 2, 2)) eq 2`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(subsequence((1, 2, 2, current-time()), 2, 2)) eq 2</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-32">
      <description> A test whose essence is: `count(subsequence(remove(current-time(), 1), 1, 1)) eq 0`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(subsequence(remove(current-time(), 1), 1, 1)) eq 0</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-33">
      <description> A test whose essence is: `deep-equal(1, subsequence((1, 2, current-time()), 1, 1))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>deep-equal(1, subsequence((1, 2, current-time()), 1, 1))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-34">
      <description> Using subsequence inside a predicate. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(1)[deep-equal(1, subsequence((1, 2, current-time()), 1, 1))] eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-35">
      <description> A test whose essence is: `empty(subsequence((current-time(), 1), 4))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(subsequence((current-time(), 1), 4))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-36">
      <description> A test whose essence is: `count(subsequence((current-time(), 1), 4)) eq 0`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(subsequence((current-time(), 1), 4)) eq 0</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-37">
      <description> A test whose essence is: `count(subsequence((current-time(), 2 , 3), 1)) eq 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(subsequence((current-time(), 2 , 3), 1)) eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-38">
      <description> A test whose essence is: `count(subsequence((current-time(), 2 , 3), 3)) eq 1`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(subsequence((current-time(), 2 , 3), 3)) eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-39">
      <description> A test whose essence is: `count(subsequence((current-time(), 2 , 3, 4), 2, 2)) eq 2`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(subsequence((current-time(), 2 , 3, 4), 2, 2)) eq 2</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-40">
      <description> Apply a predicate to the result of fn:subsequence(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence((1, 2, 3, current-time(), 5, 6, 7), 1, 1)[1]</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-41">
      <description> Apply a predicate to the result of fn:subsequence(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence((1, 2, 3, current-time(), 5, 6, 9), 7)[last()]</test>
      <result>
         <assert-eq>9</assert-eq>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-42">
      <description> Apply a predicate to the result of fn:subsequence(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence((1, 2, 3, current-time(), 5, 6, 7), 4)[last() - 1]</test>
      <result>
         <assert-eq>6</assert-eq>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-43">
      <description> Apply a predicate to the result of fn:subsequence(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(subsequence((1, 2, 3, current-time(), 5, 6, 7), 4, 1)[last() - 10])</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqSubsequenceFunc-44">
      <description> Apply a predicate to the result of fn:subsequence(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(subsequence((1, 2, 3, current-time(), 5, 6, 7), 1, 1)[2])</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-SeqSubsequenceFunc-1">
      <description> Use fn:subsequence where the input is via variable references. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>let $start := (current-time(), 2)[2] treat as xs:integer,
                $len := (current-time(), 1)[2] treat as xs:integer
                return subsequence((1, 2, 3), $start, $len)</test>
      <result>
         <assert-eq>2</assert-eq>
      </result>
   </test-case>

   <test-case name="K2-SeqSubsequenceFunc-2">
      <description> A zero length. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence((1, 2, 3), 1, 0)</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="K2-SeqSubsequenceFunc-3">
      <description> A negative length. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence((1, 2, 3, 4, 5), 4, -1)</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="K2-SeqSubsequenceFunc-4">
      <description> Ensure rounding is done properly, 1.1. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>fn:subsequence((1,2,3), 1.1, 1)</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="K2-SeqSubsequenceFunc-5">
      <description> Ensure rounding is done properly, 1.8. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>fn:subsequence((1,2,3), 1.8, 1)</test>
      <result>
         <assert-eq>2</assert-eq>
      </result>
   </test-case>

   <test-case name="K2-SeqSubsequenceFunc-6">
      <description> Ensure rounding is done properly, 1.4. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>fn:subsequence((1,2,3), 1.4, 1.4)</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="K2-SeqSubsequenceFunc-7">
      <description> Ensure rounding is done properly, 1.5. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>fn:subsequence((1,2,3), 1.5, 1.5)</test>
      <result>
         <assert-deep-eq>2, 3</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="K2-SeqSubsequenceFunc-8">
      <description> Have subsequence inside a function body, to trap bugs related to inference, rewrites and function call sites. This expression typically constant propagates to a sequence of integers. </description>
      <created by="Frans Englich" on="2008-05-08"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>let $f :=function() { subsequence(subsequence((1, 2, 3, 4), 3, 1), 1, 4) } return $f()</test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>

   <test-case name="K2-SeqSubsequenceFunc-9">
      <description> Have subsequence inside a function body, to trap bugs related to inference, rewrites and function call sites(#2). This expression typically constant propagates to a sequence of integers. </description>
      <created by="Frans Englich" on="2008-05-08"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>let $f :=function() { subsequence((1, 2, 3), 1) } return $f()</test>
      <result>
         <assert-deep-eq>1, 2, 3</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="K2-SeqSubsequenceFunc-10">
      <description> Have a call to subsequence that triggers a type error in an expression which can be const folded(derived from functionbc20_037). </description>
      <created by="Frans Englich" on="2008-11-13"/>
      <test>subsequence((1, 2, 3), 1, "string")</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
</test-set>