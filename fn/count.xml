<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-count">
   <description>Tests for the count() function</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="func-count"/>

   <test-case name="fn-countint1args-1">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:int(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:int("-2147483648")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countint1args-2">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:int(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:int("-1873914410")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countint1args-3">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:int(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:int("2147483647")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countintg1args-1">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:integer(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:integer("-999999999999999999")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countintg1args-2">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:integer(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:integer("830993497117024304")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countintg1args-3">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:integer(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:integer("999999999999999999")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countdec1args-1">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:decimal(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:decimal("-999999999999999999")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countdec1args-2">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:decimal(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:decimal("617375191608514839")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countdec1args-3">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:decimal(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:decimal("999999999999999999")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countdbl1args-1">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:double(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:double("-1.7976931348623157E308")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countdbl1args-2">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:double(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:double("0")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countdbl1args-3">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:double(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:double("1.7976931348623157E308")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countflt1args-1">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:float(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:float("-3.4028235E38")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countflt1args-2">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:float(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:float("0")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countflt1args-3">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:float(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:float("3.4028235E38")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countlng1args-1">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:long(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:long("-92233720368547758")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countlng1args-2">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:long(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:long("-47175562203048468")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countlng1args-3">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:long(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:long("92233720368547758")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countusht1args-1">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:unsignedShort(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:unsignedShort("0")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countusht1args-2">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:unsignedShort(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:unsignedShort("44633")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countusht1args-3">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:unsignedShort(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:unsignedShort("65535")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countnint1args-1">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:negativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:negativeInteger("-999999999999999999")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countnint1args-2">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:negativeInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:negativeInteger("-297014075999096793")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countnint1args-3">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:negativeInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:negativeInteger("-1")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countpint1args-1">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:positiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:positiveInteger("1")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countpint1args-2">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:positiveInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:positiveInteger("52704602390610033")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countpint1args-3">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:positiveInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:positiveInteger("999999999999999999")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countulng1args-1">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:unsignedLong(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:unsignedLong("0")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countulng1args-2">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:unsignedLong(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:unsignedLong("130747108607674654")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countulng1args-3">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:unsignedLong(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:unsignedLong("184467440737095516")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countnpi1args-1">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:nonPositiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:nonPositiveInteger("-999999999999999999")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countnpi1args-2">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:nonPositiveInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:nonPositiveInteger("-475688437271870490")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countnpi1args-3">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:nonPositiveInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:nonPositiveInteger("0")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countnni1args-1">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:nonNegativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:nonNegativeInteger("0")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countnni1args-2">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:nonNegativeInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:nonNegativeInteger("303884545991464527")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countnni1args-3">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:nonNegativeInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:nonNegativeInteger("999999999999999999")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countsht1args-1">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:short(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:short("-32768")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countsht1args-2">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:short(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:short("-5324")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-countsht1args-3">
      <description> Evaluates The "count" function with the arguments set as follows: $arg = xs:short(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:count((xs:short("32767")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="K-SeqCountFunc-1">
      <description> A test whose essence is: `count()`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count()</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-SeqCountFunc-2">
      <description> A test whose essence is: `count(1, ())`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(1, ())</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-SeqCountFunc-3">
      <description> A test whose essence is: `count( () ) eq 0`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count( () ) eq 0</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqCountFunc-4">
      <description> A test whose essence is: `count( (1, 2, 3) ) eq 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count( (1, 2, 3) ) eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqCountFunc-5">
      <description> A test whose essence is: `count( (1, 2, ()) ) eq 2`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count( (1, 2, ()) ) eq 2</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqCountFunc-6">
      <description> A test whose essence is: `count(()) eq 0`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(()) eq 0</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqCountFunc-7">
      <description> A test whose essence is: `count(((((()))))) eq 0`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(((((()))))) eq 0</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqCountFunc-8">
      <description> A test whose essence is: `count( (((), (), ()), (), (), (), ()) ) eq 0`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count( (((), (), ()), (), (), (), ()) ) eq 0</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqCountFunc-9">
      <description> A test whose essence is: `count( (1, 2, 3) ) eq 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count( (1, 2, 3) ) eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqCountFunc-10">
      <description> A test whose essence is: `count( ((), "one", 2, "three")) eq 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count( ((), "one", 2, "three")) eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqCountFunc-11">
      <description> A test whose essence is: `count( ("one", (2, "three")) ) eq 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count( ("one", (2, "three")) ) eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqCountFunc-12">
      <description> A test whose essence is: `count((1, 2)) eq 2`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count((1, 2)) eq 2</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqCountFunc-13">
      <description> A test whose essence is: `count((1, 2, 3, "four")) eq 4`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count((1, 2, 3, "four")) eq 4</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqCountFunc-14">
      <description> A test whose essence is: `count((1, 2, 3, "four")) eq 4`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count((1, 2, 3, "four")) eq 4</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqCountFunc-15">
      <description> A test whose essence is: `count(1 to 3) eq 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(1 to 3) eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqCountFunc-16">
      <description> A test whose essence is: `count(reverse((1, 2, 3))) eq 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(reverse((1, 2, 3))) eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqCountFunc-17">
      <description> A test whose essence is: `count(reverse((1, 2, 3))) eq 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(reverse((1, 2, 3))) eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqCountFunc-18">
      <description> A test whose essence is: `not(count((1, 2, current-time(), 4))) eq false()`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(count((1, 2, current-time(), 4))) eq false()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-SeqCountFunc-1">
      <description> fn:count() doesn't implicitly get the context node. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(1 to 10)/count()</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>
</test-set>