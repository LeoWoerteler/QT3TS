<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-xml-to-json" covers="fn-xml-to-json">
  <description>xml-to-json() function introduced in XPath 3.1</description>
  <link type="spec" document="http://www.w3.org/TR/xpath-functions-31/"
    idref="func-json-to-xml"/>

   <dependency type="spec" value="XP31+ XQ31+"/>

   <test-case name="xml-to-json-001">
      <description>simple "null" content, not indented</description>
       <created by="Michael Kay" on="2014-07-19"/>
      <modified by="O'Neil Delpratt" on="2015-02-24" change="This test case was ported from the XSLT30 test suite" />
      <test>xml-to-json(json-to-xml('null',map{'liberal':true()}))</test>
      <result>
            <assert-eq>"null"</assert-eq>
      </result>
   </test-case>

   <test-case name="xml-to-json-002">
      <description>simple "null" content, not indented</description>
       <created by="Michael Kay" on="2014-07-19"/>
      <modified by="O'Neil Delpratt" on="2015-02-24" change="This test case was ported from the XSLT30 test suite" />
      <test>xml-to-json(json-to-xml('null',map{'liberal':true()}))</test>
      <result>
            <assert-eq>"null"</assert-eq>
      </result>
   </test-case>

      <test-case name="xml-to-json-003">
      <description>simple "null" content, not indented</description>
       <created by="Michael Kay" on="2014-07-19"/>
      <modified by="O'Neil Delpratt" on="2015-02-24" change="This test case was ported from the XSLT30 test suite" />
      <test>xml-to-json(json-to-xml('null',map{'liberal':true()}))</test>
      <result>
            <assert-eq>"null"</assert-eq>
      </result>
   </test-case>

   <test-case name="xml-to-json-004">
      <description>simple "true" content, not indented</description>
       <created by="Michael Kay" on="2014-07-19"/>
      <modified by="O'Neil Delpratt" on="2015-02-24" change="This test case was ported from the XSLT30 test suite" />
      <test>xml-to-json(json-to-xml('true'))</test>
      <result>
            <assert-eq>"true"</assert-eq>
      </result>
   </test-case>

   <test-case name="xml-to-json-005">
      <description>simple "false" content</description>
       <created by="Michael Kay" on="2014-07-19"/>
      <modified by="O'Neil Delpratt" on="2015-02-24" change="This test case was ported from the XSLT30 test suite" />
      <test>xml-to-json(json-to-xml('false'))</test>
      <result>
            <assert-eq>"false"</assert-eq>
      </result>
   </test-case>

   <test-case name="xml-to-json-006">
      <description>simple "number" content</description>
       <created by="Michael Kay" on="2014-07-19"/>
      <modified by="O'Neil Delpratt" on="2015-02-24" change="This test case was ported from the XSLT30 test suite" />
      <test>xml-to-json(json-to-xml('93.7'))</test>
      <result>
            <assert-eq>"93.7"</assert-eq>
      </result>
   </test-case>

   <test-case name="xml-to-json-007">
      <description>simple variable content</description>
      <created by="Michael Kay" on="2014-07-19"/>
      <modified by="O'Neil Delpratt" on="2015-02-24" change="This test case was ported from the XSLT30 test suite" />
      <dependency type="spec" value="XQ31+"/>
       <test>
           declare variable $in := '"London"';
          xml-to-json(json-to-xml($in))</test>
      <result>
            <assert-eq>'"London"'</assert-eq>
      </result>
   </test-case>

   <test-case name="xml-to-json-008">
      <description>simple variable with empty string</description>
      <created by="Michael Kay" on="2014-07-19"/>
      <modified by="O'Neil Delpratt" on="2015-02-24" change="This test case was ported from the XSLT30 test suite" />
      <dependency type="spec" value="XQ31+"/>
      <test>
           declare variable $in := '""';
          xml-to-json(json-to-xml($in))</test>
      <result>
            <assert-eq>'""'</assert-eq>
      </result>
   </test-case>

   <test-case name="xml-to-json-009">
      <description>empty array</description>
      <created by="Michael Kay" on="2014-07-19"/>
      <modified by="O'Neil Delpratt" on="2015-02-24" change="This test case was ported from the XSLT30 test suite" />
      <test>xml-to-json(json-to-xml('[]'))</test>
      <result>
            <assert-eq>'[]'</assert-eq>
      </result>
   </test-case>

   <test-case name="xml-to-json-010">
      <description>singleton array</description>
      <created by="Michael Kay" on="2014-07-19"/>
      <modified by="O'Neil Delpratt" on="2015-02-24" change="This test case was ported from the XSLT30 test suite" />
      <test>xml-to-json(json-to-xml('[34]'))</test>
      <result>
            <assert-eq>'[34]'</assert-eq>
      </result>
   </test-case>

   <test-case name="xml-to-json-011">
      <description>two-member array</description>
      <created by="Michael Kay" on="2014-07-19"/>
      <modified by="O'Neil Delpratt" on="2015-02-24" change="This test case was ported from the XSLT30 test suite" />
      <test>xml-to-json(json-to-xml('[true, false]'))</test>
      <result>
            <assert-eq>'[true,false]'</assert-eq>
      </result>
   </test-case>

   <test-case name="xml-to-json-012">
      <description>simple variable with empty string</description>
      <created by="Michael Kay" on="2014-07-19"/>
      <modified by="O'Neil Delpratt" on="2015-02-24" change="This test case was ported from the XSLT30 test suite" />
      <test>xml-to-json(json-to-xml('["A", "B", "C", "D", "E"]'))</test>
      <result>
            <assert-eq>'["A","B","C","D","E"]'</assert-eq>
      </result>
   </test-case>

   <test-case name="xml-to-json-013">
      <description>empty map</description>
      <created by="Michael Kay" on="2014-07-19"/>
      <modified by="O'Neil Delpratt" on="2015-02-24" change="This test case was ported from the XSLT30 test suite" />
      <test>xml-to-json(json-to-xml('{}'))</test>
      <result>
            <assert-eq>'{}'</assert-eq>
      </result>
   </test-case>

   <test-case name="xml-to-json-014">
      <description>1 entry map</description>
      <created by="Michael Kay" on="2014-07-19"/>
      <modified by="O'Neil Delpratt" on="2015-02-24" change="This test case was ported from the XSLT30 test suite" />
       <test>xml-to-json(json-to-xml('{"A":true}'))</test>
      <result>
            <assert-eq>'{"A":true}'</assert-eq>
      </result>
   </test-case>

   <test-case name="xml-to-json-015">
      <description>five entry map</description>
      <created by="Michael Kay" on="2014-07-19"/>
      <modified by="O'Neil Delpratt" on="2015-02-24" change="This test case was ported from the XSLT30 test suite" />
       <test>xml-to-json(json-to-xml('{"A":1, "B":2, "C":3, "D":4, "E":5}'))</test>
      <result>
            <assert-eq>'{"A":1,"B":2,"C":3,"D":4,"E":5}'</assert-eq>
      </result>
   </test-case>

   <test-case name="xml-to-json-016">
      <description>complex map</description>
      <created by="Michael Kay" on="2014-07-19"/>
      <modified by="O'Neil Delpratt" on="2015-02-24" change="This test case was ported from the XSLT30 test suite" />
       <test>xml-to-json(json-to-xml('{"A":[1,2], "B":[true,false], "C":["Paris","London","Berlin"], "D":[1, true, "on"], "E":[null, null]}'))</test>
      <result>
            <assert-eq>'{"A":[1,2],"B":[true,false],"C":["Paris","London","Berlin"],"D":[1,true,"on"],"E":[null,null]}'</assert-eq>
      </result>
   </test-case>

   <test-case name="xml-to-json-017">
      <description>1 entry map</description>
      <created by="Michael Kay" on="2014-07-19"/>
      <modified by="O'Neil Delpratt" on="2015-02-24" change="This test case was ported from the XSLT30 test suite" />
       <test>xml-to-json(json-to-xml('"\\\/\"\r\t\n\u0020"'))</test>
      <result>
            <assert-eq>'"\\\/\"\r\t\n\u0020"'</assert-eq>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-021">
      <description>simple "null" content</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <test><![CDATA[
        xml-to-json(<null xmlns="http://www.w3.org/2005/xpath-functions/json"/>)
       ]]></test>
      <result>
            <assert-eq>"null"</assert-eq>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-022">
      <description>simple true content</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <test><![CDATA[
        xml-to-json(<boolean xmlns="http://www.w3.org/2005/xpath-functions/json">true</boolean>)
       ]]></test>
      <result>
            <assert-eq>"true"</assert-eq>
      </result>
   </test-case>

   <test-case name="xml-to-json-023">
      <description>simple numeric content</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <test><![CDATA[
        xml-to-json(<number xmlns="http://www.w3.org/2005/xpath-functions/json">23</number>)
       ]]></test>
      <result>
            <assert-eq>"23"</assert-eq>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-024">
      <description>simple string content</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <test><![CDATA[
        xml-to-json(<string xmlns="http://www.w3.org/2005/xpath-functions/json">banana</string>)
       ]]></test>
      <result>
            <assert-eq>'"banana"'</assert-eq>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-025">
      <description>boolean with whitespace (bug 28180)</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <test><![CDATA[
        xml-to-json(<boolean xmlns="http://www.w3.org/2005/xpath-functions/json"> false </boolean>)
       ]]></test>
      <result>
            <assert-eq>"false"</assert-eq>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-026">
      <description>number with leading zeroes and whitespace (bug 28180)</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <test><![CDATA[
        xml-to-json(<number xmlns="http://www.w3.org/2005/xpath-functions/json"> +005 </number>)
       ]]></test>
      <result>
            <assert-eq>"5"</assert-eq>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-027">
      <description>whitespace string (bug 28180)</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <test><![CDATA[
        declare boundary-space preserve;
        xml-to-json(<string xmlns="http://www.w3.org/2005/xpath-functions/json">   </string>)
       ]]></test>
      <result>
            <assert-eq>'"   "'</assert-eq>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-028">
      <description>array with comments and whitespace</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <test><![CDATA[
        declare boundary-space preserve;
        xml-to-json(<array xmlns="http://www.w3.org/2005/xpath-functions/json"> <null/> <!--comma--> <null/>   </array>)
       ]]></test>
      <result>
            <assert-eq>"[null,null]"</assert-eq>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-029">
      <description>map with comments and whitespace</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <test><![CDATA[
        declare boundary-space preserve;
        xml-to-json(<map xmlns="http://www.w3.org/2005/xpath-functions/json"> <null key="a"/> <!--comma--> <null key="b"/>   </map>)
       ]]></test>
      <result>
            <assert-eq>'{"a":null,"b":null}'</assert-eq>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-030">
      <description>Document node wrapper</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <test><![CDATA[
        declare boundary-space preserve;
        xml-to-json(document{<array xmlns="http://www.w3.org/2005/xpath-functions/json"><null/><null/></array>})
       ]]></test>
      <result>
            <assert-eq>"[null,null]"</assert-eq>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-031">
      <description>Use a namespace prefix</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <test><![CDATA[
        declare boundary-space preserve;
        xml-to-json(document{<jj:array xmlns:jj="http://www.w3.org/2005/xpath-functions/json"><jj:null/><jj:null/></jj:array>})
       ]]></test>
      <result>
            <assert-eq>"[null,null]"</assert-eq>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-032">
      <description>Wrong namespace</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <test><![CDATA[
        declare boundary-space preserve;
        xml-to-json(document{<jj:array xmlns:jj="http://www.w3.org/2005/xpath-functions/not-json"><jj:null/><jj:null/></jj:array>})
       ]]></test>
      <result>
           <error code="XXXX9999"/>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-033">
      <description>Invalid XML: contains disallowed attributes</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <test><![CDATA[
        declare boundary-space preserve;
        xml-to-json(<map xmlns="http://www.w3.org/2005/xpath-functions/json"> <null key="a" yek="z"/> <null key="b"/>   </map>)
       ]]></test>
      <result>
            <error code="XXXX9999"/>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-034">
      <description>Invalid XML: contains disallowed elements</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <test><![CDATA[
        declare boundary-space preserve;
        xml-to-json(<map xmlns="http://www.w3.org/2005/xpath-functions/json"> <null key="a"/> <null key="b"/> <yek key="c"/>  </map>)
       ]]></test>
      <result>
            <error code="XXXX9999"/>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-035">
      <description>Invalid XML: contains missing attribute</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <test><![CDATA[
        declare boundary-space preserve;
        xml-to-json(<map xmlns="http://www.w3.org/2005/xpath-functions/json"><null/><null/></map>)
       ]]></test>
      <result>
            <error code="XXXX9999"/>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-036">
      <description>Invalid XML: contains duplicate keys</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <test><![CDATA[
        declare boundary-space preserve;
        xml-to-json(<map xmlns="http://www.w3.org/2005/xpath-functions/json"><null key="a"/><null key="a"/></map>)
       ]]></test>
      <result>
            <error code="XXXX9999"/>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-037">
      <description>String split by a comment</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <test><![CDATA[
        declare boundary-space preserve;
        xml-to-json(<string xmlns="http://www.w3.org/2005/xpath-functions/json">ban<!--c-->ana</string>)
       ]]></test>
      <result>
            <assert-eq>'"banana"'</assert-eq>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-038">
      <description>Number split by a comment</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <test><![CDATA[
        declare boundary-space preserve;
        xml-to-json(<number xmlns="http://www.w3.org/2005/xpath-functions/json">2<!--c-->7</number>)
       ]]></test>
      <result>
            <assert-eq>'27'</assert-eq>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-039">
      <description>Boolean split by a comment</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <test><![CDATA[
        declare boundary-space preserve;
        xml-to-json(<boolean xmlns="http://www.w3.org/2005/xpath-functions/json">tr<!--c-->ue</boolean>)
       ]]></test>
      <result>
            <assert-eq>'true'</assert-eq>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-040">
      <description>Invalid child of string</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <test><![CDATA[
        declare boundary-space preserve;
        xml-to-json(<string xmlns="http://www.w3.org/2005/xpath-functions/json">ok<null/></string>)
       ]]></test>
      <result>
            <error code="XXXX9999"/>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-041">
      <description>Invalid child of number</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <test><![CDATA[
        declare boundary-space preserve;
        xml-to-json(<number xmlns="http://www.w3.org/2005/xpath-functions/json">17<string>qq</string></number>)
       ]]></test>
      <result>
            <error code="XXXX9999"/>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-042">
      <description>Invalid child of boolean</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <test><![CDATA[
        declare boundary-space preserve;
        xml-to-json(<boolean xmlns="http://www.w3.org/2005/xpath-functions/json">true<string>qq</string></boolean>)
       ]]></test>
      <result>
            <error code="XXXX9999"/>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-043">
      <description>Invalid child of null</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <test><![CDATA[
        xml-to-json(<null xmlns="http://www.w3.org/2005/xpath-functions/json"><null/></null>)
       ]]></test>
      <result>
            <error code="XXXX9999"/>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-044">
      <description>Invalid child of null</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <test><![CDATA[
        xml-to-json(<null xmlns="http://www.w3.org/2005/xpath-functions/json"><null/></null>)
       ]]></test>
      <result>
            <error code="XXXX9999"/>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-045">
      <description>Effect of xsi:type (bug 28181)</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <test><![CDATA[
        xml-to-json(<number xsi:type="xs:short" xmlns="http://www.w3.org/2005/xpath-functions/json" 
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
            xmlns:xs="http://www.w3.org/2001/XMLSchema>231</number>)
       ]]></test>
      <result>
            <error code="XXXX9999"/>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-046">
      <description>Validated content</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <dependency type="feature" value="schemaImport"/>
      <test><![CDATA[
        import schema default element namespace "http://www.w3.org/2005/xpath-functions/json";
        xml-to-json(validate strict {<number>-23.7</number>})
       ]]></test>
      <result>
            <assert-eq>-23.7</assert-eq>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-047">
      <description>Validated content</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <dependency type="feature" value="schemaImport"/>
      <test><![CDATA[
        import schema default element namespace "http://www.w3.org/2005/xpath-functions/json";
        xml-to-json(validate strict{<number xsi:type="xs:int">-23</number>})
       ]]></test>
      <result>
            <assert-eq>-23.7</assert-eq>
      </result>
   </test-case>
   
   <test-case name="xml-to-json-048">
      <description>Invalid content</description>
      <created by="Michael Kay" on="2015-03-09"/>
      <dependency type="spec" value="XQ31"/>
      <dependency type="feature" value="schemaImport"/>
      <test><![CDATA[
        import schema default element namespace "http://www.w3.org/2005/xpath-functions/json";
        xml-to-json(validate strict{<number xsi:type="xs:int">-23.7</number>})
       ]]></test>
      <result>
            <error code="XXXX9999"/>
      </result>
   </test-case>





</test-set>