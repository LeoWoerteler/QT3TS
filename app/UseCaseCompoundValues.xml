<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="app-UseCaseCompoundValues">
   <description>Tests for the Use Case Compound Values</description>
            
   <test-case name="UseCaseCompoundValues-001" covers="map-general">
      <description>Use case compound values</description>
      <created by="Carla Spruit" on="2014-12-30"/>
      <modified by="Michael Dyck" on="2015-01-19" change="Remove XP31+ from spec-dependency due to Declarations"/>
      <modified by="Michael Kay" on="2015-11-27" change="Add HOF dependency due to dynamic function call syntax"/>
      <dependency type="spec" value="XQ31+"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test><![CDATA[
        declare namespace i = "http://example.com/compound-values";
        declare function i:complex($real as xs:double, $imaginary as xs:double) as map(xs:boolean, xs:double)
        {
          map { true() : $real, false() : $imaginary }
        };
        
        declare function i:real($complex as map(xs:boolean, xs:double)) as xs:double
        {
          $complex(true())
        };
        
        declare function i:imaginary($complex as map(xs:boolean, xs:double)) as xs:double
        {
          $complex(false())
        };
        
        declare function i:add($arg1 as map(xs:boolean, xs:double), $arg2 as map(xs:boolean, xs:double)) as map(xs:boolean, xs:double){
          i:complex(i:real($arg1)+i:real($arg2),
            i:imaginary($arg1)+i:imaginary($arg2))
        };
        
        declare function i:multiply($arg1 as map(xs:boolean, xs:double), $arg2 as map(xs:boolean, xs:double)) as map(xs:boolean, xs:double)
        {
          i:complex(
            i:real($arg1)*i:real($arg2) - i:imaginary($arg1)*i:imaginary($arg2),
            i:real($arg1)*i:imaginary($arg2) + i:imaginary($arg1)*i:real($arg2))
        };
        
        i:add(i:complex(2, 3), i:complex(1, -6)),
        i:multiply(i:complex(2, -1), i:complex(3, 4))
      ]]></test>
      <result>
        <assert-deep-eq>(map {true() : 3, false() : -3}, map {true() : 10, false() : 5})</assert-deep-eq>
      </result>
   </test-case>
   
</test-set>
