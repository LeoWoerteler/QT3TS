<?xml version="1.0" encoding="UTF-8"?>
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog"
          xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
          xmlns:saxon="http://saxon.sf.net/"
          name="app-spec-examples">
   <description>Tests the example code in the F+O 3.1 specification</description>
   <environment name="global">
      <namespace prefix="math" uri="http://www.w3.org/2005/xpath-functions/math"/>
      <namespace prefix="map" uri="http://www.w3.org/2005/xpath-functions/map"/>
      <namespace prefix="array" uri="http://www.w3.org/2005/xpath-functions/array"/>
      <decimal-format name="ch" decimal-separator="·" grouping-separator="ʹ"/>
      <decimal-format name="fortran" exponent-separator="E"/>
   </environment>
   <dependency type="spec" value="XP31+ XQ31+" satisfied="true"/>

   <test-case name="fo-test-d3e290">
      <description>Test case for fn:string</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        string(23)
      </test>
      <result>
         <assert-deep-eq>"23"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e295">
      <description>Test case for fn:string</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        string(false())
      </test>
      <result>
         <assert-deep-eq>"false"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e300">
      <description>Test case for fn:string</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        string("Paris")
      </test>
      <result>
         <assert-deep-eq>"Paris"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e305">
      <description>Test case for fn:string</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        string((1, 2, 3))
      </test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e309">
      <description>Test case for fn:string</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        string([[1, 2], [3, 4]])
      </test>
      <result>
         <error code="FOTY0014"/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e313">
      <description>Test case for fn:string</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        string(abs#1)
      </test>
      <result>
         <error code="FOTY0014"/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e320">
      <description>Test case for fn:string</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $para := 
          
&lt;para&gt;In a hole in the ground there lived a &lt;term author="Tolkien"&gt;hobbit&lt;/term&gt;.&lt;/para&gt;
         
           return 

        
        string($para)
      </test>
      <result>
         <assert-deep-eq>"In a hole in the ground there lived a hobbit."</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e435">
      <description>Test case for fn:data</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        data(123)
      </test>
      <result>
         <assert-deep-eq>123</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e440">
      <description>Test case for fn:data</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        data((123, 456))
      </test>
      <result>
         <assert-deep-eq>123, 456</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e445">
      <description>Test case for fn:data</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        data([[1,2],[3,4]])
      </test>
      <result>
         <assert-deep-eq>1, 2, 3, 4</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e453">
      <description>Test case for fn:data</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $para := 
          
&lt;para&gt;In a hole in the ground there lived a &lt;term author="Tolkien"&gt;hobbit&lt;/term&gt;.&lt;/para&gt;
         
           return 

        
        data($para)
      </test>
      <result>
         <assert-deep-eq>xs:untypedAtomic("In a hole in the ground there lived a hobbit.")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e458">
      <description>Test case for fn:data</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $para := 
          
&lt;para&gt;In a hole in the ground there lived a &lt;term author="Tolkien"&gt;hobbit&lt;/term&gt;.&lt;/para&gt;
         
           return 

        
        data($para/term/@author)
      </test>
      <result>
         <assert-deep-eq>xs:untypedAtomic("Tolkien")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e463">
      <description>Test case for fn:data</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        data(abs#1)
      </test>
      <result>
         <error code="FOTY0013"/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e787">
      <description>Test case for fn:error</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:error()
      </test>
      <result>
         <error code="FOER0000"/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e800">
      <description>Test case for fn:error</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:error(fn:QName('http://www.example.com/HR', 'myerr:toohighsal'),
                  'Does not apply because salary is too high')
      </test>
      <result>
         <error code="*"/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e1778">
      <description>Test case for fn:abs</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:abs(10.5)
      </test>
      <result>
         <assert-deep-eq>10.5</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e1784">
      <description>Test case for fn:abs</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:abs(-10.5)
      </test>
      <result>
         <assert-deep-eq>10.5</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e1866">
      <description>Test case for fn:ceiling</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:ceiling(10.5)
      </test>
      <result>
         <assert-deep-eq>11</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e1872">
      <description>Test case for fn:ceiling</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:ceiling(-10.5)
      </test>
      <result>
         <assert-deep-eq>-10</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e1955">
      <description>Test case for fn:floor</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:floor(10.5)
      </test>
      <result>
         <assert-deep-eq>10</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e1961">
      <description>Test case for fn:floor</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:floor(-10.5)
      </test>
      <result>
         <assert-deep-eq>-11</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e2124">
      <description>Test case for fn:round</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:round(2.5)
      </test>
      <result>
         <assert-deep-eq>3.0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e2130">
      <description>Test case for fn:round</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:round(2.4999)
      </test>
      <result>
         <assert-deep-eq>2.0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e2136">
      <description>Test case for fn:round</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:round(-2.5)
      </test>
      <result>
         <assert-deep-eq>-2.0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e2146">
      <description>Test case for fn:round</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:round(1.125, 2)
      </test>
      <result>
         <assert-deep-eq>1.13</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e2152">
      <description>Test case for fn:round</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:round(8452, -2)
      </test>
      <result>
         <assert-deep-eq>8500</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e2158">
      <description>Test case for fn:round</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:round(3.1415e0, 2)
      </test>
      <result>
         <assert-deep-eq>3.14e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e2315">
      <description>Test case for fn:round-half-to-even</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:round-half-to-even(0.5)
      </test>
      <result>
         <assert-deep-eq>0.0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e2321">
      <description>Test case for fn:round-half-to-even</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:round-half-to-even(1.5)
      </test>
      <result>
         <assert-deep-eq>2.0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e2327">
      <description>Test case for fn:round-half-to-even</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:round-half-to-even(2.5)
      </test>
      <result>
         <assert-deep-eq>2.0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e2333">
      <description>Test case for fn:round-half-to-even</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:round-half-to-even(3.567812e+3, 2)
      </test>
      <result>
         <assert-deep-eq>3567.81e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e2339">
      <description>Test case for fn:round-half-to-even</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:round-half-to-even(4.7564e-3, 2)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e2345">
      <description>Test case for fn:round-half-to-even</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:round-half-to-even(35612.25, -2)
      </test>
      <result>
         <assert-deep-eq>35600</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3247">
      <description>Test case for fn:format-integer</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        format-integer(123, '0000')
      </test>
      <result>
         <assert-deep-eq>"0123"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3287">
      <description>Test case for fn:format-integer</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        format-integer(21, '1;o', 'en')
      </test>
      <result>
         <assert-deep-eq>"21st"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3300">
      <description>Test case for fn:format-integer</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        format-integer(7, 'a')
      </test>
      <result>
         <assert-deep-eq>"g"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3306">
      <description>Test case for fn:format-integer</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        format-integer(57, 'I')
      </test>
      <result>
         <assert-deep-eq>"LVII"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3312">
      <description>Test case for fn:format-integer</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        format-integer(1234, '#;##0;')
      </test>
      <result>
         <assert-deep-eq>"1;234"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3474">
      <description>Test case for fn:format-number</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        format-number(12345.6, '#,###.00')
      </test>
      <result>
         <assert-deep-eq>"12,345.60"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3479">
      <description>Test case for fn:format-number</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        format-number(12345678.9, '9,999.99')
      </test>
      <result>
         <assert-deep-eq>"12,345,678.90"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3484">
      <description>Test case for fn:format-number</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        format-number(123.9, '9999')
      </test>
      <result>
         <assert-deep-eq>"0124"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3489">
      <description>Test case for fn:format-number</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        format-number(0.14, '01%')
      </test>
      <result>
         <assert-deep-eq>"14%"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3494">
      <description>Test case for fn:format-number</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        format-number(-6, '000')
      </test>
      <result>
         <assert-deep-eq>"-006"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3507">
      <description>Test case for fn:format-number</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        format-number(1234.5678, '#ʹ##0·00',
                  'ch')
      </test>
      <result>
         <assert-deep-eq>"1ʹ234·57"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3514">
      <description>Test case for fn:format-number</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        format-number(1234.5678, '00.000E0', 'fortran')
      </test>
      <result>
         <assert-deep-eq>"12.346E2"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3519">
      <description>Test case for fn:format-number</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        format-number(0.234, '0.0E0', 'fortran')
      </test>
      <result>
         <assert-deep-eq>"2.3E-1"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3525">
      <description>Test case for fn:format-number</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        format-number(0.234, '#.00E0', 'fortran')
      </test>
      <result>
         <assert-deep-eq>"0.23E0"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3530">
      <description>Test case for fn:format-number</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        format-number(0.234, '.00E0', 'fortran')
      </test>
      <result>
         <assert-deep-eq>".23E0"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3559">
      <description>Test case for math:pi</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        2*math:pi()
      </test>
      <result>
         <assert-deep-eq>6.283185307179586e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3616">
      <description>Test case for math:exp</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:exp(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3621">
      <description>Test case for math:exp</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:exp(0)
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3626">
      <description>Test case for math:exp</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:exp(1)
      </test>
      <result>
         <assert>abs($result - 2.7182818284590455e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3631">
      <description>Test case for math:exp</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:exp(2)
      </test>
      <result>
         <assert-deep-eq>7.38905609893065e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3636">
      <description>Test case for math:exp</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:exp(-1)
      </test>
      <result>
         <assert-deep-eq>0.36787944117144233e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3641">
      <description>Test case for math:exp</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:exp(math:pi())
      </test>
      <result>
         <assert-deep-eq>23.140692632779267e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3646">
      <description>Test case for math:exp</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:exp(xs:double('NaN'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3651">
      <description>Test case for math:exp</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:exp(xs:double('INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3656">
      <description>Test case for math:exp</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:exp(xs:double('-INF'))
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3704">
      <description>Test case for math:exp10</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:exp10(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3709">
      <description>Test case for math:exp10</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:exp10(0)
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3714">
      <description>Test case for math:exp10</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:exp10(1)
      </test>
      <result>
         <assert-deep-eq>1.0e1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3719">
      <description>Test case for math:exp10</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:exp10(0.5)
      </test>
      <result>
         <assert-deep-eq>3.1622776601683795e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3724">
      <description>Test case for math:exp10</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:exp10(-1)
      </test>
      <result>
         <assert-deep-eq>1.0e-1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3729">
      <description>Test case for math:exp10</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:exp10(xs:double('NaN'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3734">
      <description>Test case for math:exp10</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:exp10(xs:double('INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3739">
      <description>Test case for math:exp10</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:exp10(xs:double('-INF'))
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3795">
      <description>Test case for math:log</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:log(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3800">
      <description>Test case for math:log</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:log(0)
      </test>
      <result>
         <assert-deep-eq>xs:double('-INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3805">
      <description>Test case for math:log</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:log(math:exp(1))
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3810">
      <description>Test case for math:log</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:log(1.0e-3)
      </test>
      <result>
         <assert-deep-eq>-6.907755278982137e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3815">
      <description>Test case for math:log</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:log(2)
      </test>
      <result>
         <assert-deep-eq>0.6931471805599453e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3820">
      <description>Test case for math:log</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:log(-1)
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3825">
      <description>Test case for math:log</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:log(xs:double('NaN'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3830">
      <description>Test case for math:log</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:log(xs:double('INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3835">
      <description>Test case for math:log</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:log(xs:double('-INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3891">
      <description>Test case for math:log10</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:log10(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3896">
      <description>Test case for math:log10</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:log10(0)
      </test>
      <result>
         <assert-deep-eq>xs:double('-INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3901">
      <description>Test case for math:log10</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:log10(1.0e3)
      </test>
      <result>
         <assert-deep-eq>3.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3906">
      <description>Test case for math:log10</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:log10(1.0e-3)
      </test>
      <result>
         <assert-deep-eq>-3.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3911">
      <description>Test case for math:log10</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:log10(2)
      </test>
      <result>
         <assert-deep-eq>0.3010299956639812e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3916">
      <description>Test case for math:log10</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:log10(-1)
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3921">
      <description>Test case for math:log10</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:log10(xs:double('NaN'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3926">
      <description>Test case for math:log10</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:log10(xs:double('INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3931">
      <description>Test case for math:log10</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:log10(xs:double('-INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3990">
      <description>Test case for math:sqrt</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:sqrt(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e3995">
      <description>Test case for math:sqrt</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:sqrt(0.0e0)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4000">
      <description>Test case for math:sqrt</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:sqrt(-0.0e0)
      </test>
      <result>
         <assert-deep-eq>-0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4005">
      <description>Test case for math:sqrt</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:sqrt(1.0e6)
      </test>
      <result>
         <assert-deep-eq>1.0e3</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4010">
      <description>Test case for math:sqrt</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:sqrt(2.0e0)
      </test>
      <result>
         <assert-deep-eq>1.4142135623730951e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4015">
      <description>Test case for math:sqrt</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:sqrt(-2.0e0)
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4020">
      <description>Test case for math:sqrt</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:sqrt(xs:double('NaN'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4025">
      <description>Test case for math:sqrt</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:sqrt(xs:double('INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4030">
      <description>Test case for math:sqrt</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:sqrt(xs:double('-INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4110">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow((), 93.7)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4115">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(2, 3)
      </test>
      <result>
         <assert-deep-eq>8.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4120">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(-2, 3)
      </test>
      <result>
         <assert-deep-eq>-8.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4125">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(2, -3)
      </test>
      <result>
         <assert-deep-eq>0.125e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4130">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(-2, -3)
      </test>
      <result>
         <assert-deep-eq>-0.125e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4135">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(2, 0)
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4140">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(0, 0)
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4145">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(xs:double('INF'), 0)
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4150">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(xs:double('NaN'), 0)
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4155">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(-math:pi(), 0)
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4160">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(0e0, 3)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4166">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(0e0, 4)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4171">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(-0e0, 3)
      </test>
      <result>
         <assert-deep-eq>-0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4176">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(0, 4)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4181">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(0e0, -3)
      </test>
      <result>
         <assert-deep-eq>xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4186">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(0e0, -4)
      </test>
      <result>
         <assert-deep-eq>xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4191">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(-0e0, -3)
      </test>
      <result>
         <assert-deep-eq>xs:double('-INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4196">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(0, -4)
      </test>
      <result>
         <assert-deep-eq>xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4201">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(16, 0.5e0)
      </test>
      <result>
         <assert-deep-eq>4.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4206">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(16, 0.25e0)
      </test>
      <result>
         <assert-deep-eq>2.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4211">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(0e0, -3.0e0)
      </test>
      <result>
         <assert-deep-eq>xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4216">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(-0e0, -3.0e0)
      </test>
      <result>
         <assert-deep-eq>xs:double('-INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4224">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(0e0, -3.1e0)
      </test>
      <result>
         <assert-deep-eq>xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4229">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(-0e0, -3.1e0)
      </test>
      <result>
         <assert-deep-eq>xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4234">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(0e0, 3.0e0)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4239">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(-0e0, 3.0e0)
      </test>
      <result>
         <assert-deep-eq>-0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4246">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(0e0, 3.1e0)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4251">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(-0e0, 3.1e0)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4256">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(-1, xs:double('INF'))
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4261">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(-1, xs:double('-INF'))
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4266">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(1, xs:double('INF'))
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4271">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(1, xs:double('-INF'))
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4276">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(1, xs:double('NaN'))
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4282">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(-2.5e0, 2.0e0)
      </test>
      <result>
         <assert-deep-eq>6.25e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4287">
      <description>Test case for math:pow</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:pow(-2.5e0, 2.00000001e0)
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4366">
      <description>Test case for math:sin</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:sin(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4371">
      <description>Test case for math:sin</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:sin(0)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4376">
      <description>Test case for math:sin</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:sin(-0.0e0)
      </test>
      <result>
         <assert-deep-eq>-0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4381">
      <description>Test case for math:sin</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:sin(math:pi() div 2)
      </test>
      <result>
         <assert>abs($result - 1.0e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4386">
      <description>Test case for math:sin</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:sin(-math:pi() div 2)
      </test>
      <result>
         <assert>abs($result - -1.0e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4391">
      <description>Test case for math:sin</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:sin(math:pi())
      </test>
      <result>
         <assert>abs($result - 0.0e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4396">
      <description>Test case for math:sin</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:sin(xs:double('NaN'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4401">
      <description>Test case for math:sin</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:sin(xs:double('INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4406">
      <description>Test case for math:sin</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:sin(xs:double('-INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4495">
      <description>Test case for math:cos</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:cos(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4500">
      <description>Test case for math:cos</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:cos(0)
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4505">
      <description>Test case for math:cos</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:cos(-0.0e0)
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4510">
      <description>Test case for math:cos</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:cos(math:pi() div 2)
      </test>
      <result>
         <assert>abs($result - 0.0e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4515">
      <description>Test case for math:cos</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:cos(-math:pi() div 2)
      </test>
      <result>
         <assert>abs($result - 0.0e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4520">
      <description>Test case for math:cos</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:cos(math:pi())
      </test>
      <result>
         <assert>abs($result - -1.0e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4525">
      <description>Test case for math:cos</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:cos(xs:double('NaN'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4530">
      <description>Test case for math:cos</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:cos(xs:double('INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4535">
      <description>Test case for math:cos</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:cos(xs:double('-INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4600">
      <description>Test case for math:tan</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:tan(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4605">
      <description>Test case for math:tan</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:tan(0)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4610">
      <description>Test case for math:tan</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:tan(-0.0e0)
      </test>
      <result>
         <assert-deep-eq>-0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4615">
      <description>Test case for math:tan</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:tan(math:pi() div 4)
      </test>
      <result>
         <assert>abs($result - 1.0e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4620">
      <description>Test case for math:tan</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:tan(-math:pi() div 4)
      </test>
      <result>
         <assert>abs($result - -1.0e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4625">
      <description>Test case for math:tan</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:tan(math:pi() div 2)
      </test>
      <result>
         <assert>abs($result - 1.633123935319537E16) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4630">
      <description>Test case for math:tan</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:tan(-math:pi() div 2)
      </test>
      <result>
         <assert>abs($result - -1.633123935319537E16) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4635">
      <description>Test case for math:tan</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:tan(math:pi())
      </test>
      <result>
         <assert>abs($result - 0.0e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4640">
      <description>Test case for math:tan</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:tan(xs:double('NaN'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4645">
      <description>Test case for math:tan</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:tan(xs:double('INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4650">
      <description>Test case for math:tan</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:tan(xs:double('-INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4744">
      <description>Test case for math:asin</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:asin(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4749">
      <description>Test case for math:asin</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:asin(0)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4754">
      <description>Test case for math:asin</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:asin(-0.0e0)
      </test>
      <result>
         <assert-deep-eq>-0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4759">
      <description>Test case for math:asin</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:asin(1.0e0)
      </test>
      <result>
         <assert>abs($result - 1.5707963267948966e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4764">
      <description>Test case for math:asin</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:asin(-1.0e0)
      </test>
      <result>
         <assert>abs($result - -1.5707963267948966e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4769">
      <description>Test case for math:asin</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:asin(2.0e0)
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4774">
      <description>Test case for math:asin</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:asin(xs:double('NaN'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4779">
      <description>Test case for math:asin</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:asin(xs:double('INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4784">
      <description>Test case for math:asin</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:asin(xs:double('-INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4860">
      <description>Test case for math:acos</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:acos(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4865">
      <description>Test case for math:acos</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:acos(0)
      </test>
      <result>
         <assert>abs($result - 1.5707963267948966e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4870">
      <description>Test case for math:acos</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:acos(-0.0e0)
      </test>
      <result>
         <assert>abs($result - 1.5707963267948966e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4875">
      <description>Test case for math:acos</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:acos(1.0e0)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4880">
      <description>Test case for math:acos</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:acos(-1.0e0)
      </test>
      <result>
         <assert>abs($result - 3.141592653589793e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4885">
      <description>Test case for math:acos</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:acos(2.0e0)
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4890">
      <description>Test case for math:acos</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:acos(xs:double('NaN'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4895">
      <description>Test case for math:acos</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:acos(xs:double('INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4900">
      <description>Test case for math:acos</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:acos(xs:double('-INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4991">
      <description>Test case for math:atan</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:atan(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e4996">
      <description>Test case for math:atan</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:atan(0)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5001">
      <description>Test case for math:atan</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:atan(-0.0e0)
      </test>
      <result>
         <assert-deep-eq>-0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5006">
      <description>Test case for math:atan</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:atan(1.0e0)
      </test>
      <result>
         <assert>abs($result - 0.7853981633974483e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5011">
      <description>Test case for math:atan</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:atan(-1.0e0)
      </test>
      <result>
         <assert>abs($result - -0.7853981633974483e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5016">
      <description>Test case for math:atan</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:atan(xs:double('NaN'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5021">
      <description>Test case for math:atan</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:atan(xs:double('INF'))
      </test>
      <result>
         <assert>abs($result - 1.5707963267948966e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5026">
      <description>Test case for math:atan</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:atan(xs:double('-INF'))
      </test>
      <result>
         <assert>abs($result - -1.5707963267948966e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5114">
      <description>Test case for math:atan2</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:atan2(+0.0e0, 0.0e0)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5119">
      <description>Test case for math:atan2</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:atan2(-0.0e0, 0.0e0)
      </test>
      <result>
         <assert-deep-eq>-0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5124">
      <description>Test case for math:atan2</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:atan2(+0.0e0, -0.0e0)
      </test>
      <result>
         <assert-deep-eq>3.141592653589793e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5129">
      <description>Test case for math:atan2</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:atan2(-0.0e0, -0.0e0)
      </test>
      <result>
         <assert-deep-eq>-3.141592653589793e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5134">
      <description>Test case for math:atan2</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:atan2(-1, 0.0e0)
      </test>
      <result>
         <assert-deep-eq>-1.5707963267948966e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5139">
      <description>Test case for math:atan2</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:atan2(+1, 0.0e0)
      </test>
      <result>
         <assert-deep-eq>1.5707963267948966e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5144">
      <description>Test case for math:atan2</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:atan2(-0.0e0, -1)
      </test>
      <result>
         <assert-deep-eq>-3.141592653589793e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5149">
      <description>Test case for math:atan2</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:atan2(+0.0e0, -1)
      </test>
      <result>
         <assert-deep-eq>3.141592653589793e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5154">
      <description>Test case for math:atan2</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:atan2(-0.0e0, +1)
      </test>
      <result>
         <assert-deep-eq>-0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5159">
      <description>Test case for math:atan2</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        math:atan2(+0.0e0, +1)
      </test>
      <result>
         <assert-deep-eq>+0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5209">
      <description>Test case for fn:codepoints-to-string</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:codepoints-to-string((66, 65, 67, 72))
      </test>
      <result>
         <assert-deep-eq>"BACH"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5214">
      <description>Test case for fn:codepoints-to-string</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:codepoints-to-string((2309, 2358, 2378, 2325))
      </test>
      <result>
         <assert-deep-eq>"अशॊक"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5219">
      <description>Test case for fn:codepoints-to-string</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:codepoints-to-string(())
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5224">
      <description>Test case for fn:codepoints-to-string</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:codepoints-to-string(0)
      </test>
      <result>
         <error code="FOCH0001"/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5267">
      <description>Test case for fn:string-to-codepoints</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:string-to-codepoints("Thérèse")
      </test>
      <result>
         <assert-deep-eq>(84, 104, 233, 114, 232, 115, 101)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5332">
      <description>Test case for fn:compare</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:compare('abc', 'abc')
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5338">
      <description>Test case for fn:compare</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment>
         <namespace prefix="math" uri="http://www.w3.org/2005/xpath-functions/math"/>
         <namespace prefix="map" uri="http://www.w3.org/2005/xpath-functions/map"/>
         <namespace prefix="array" uri="http://www.w3.org/2005/xpath-functions/array"/>
         <collation uri="http://www.w3.org/2013/collation/UCA?lang=de;strength=primary"
                    default="true"/>
      </environment>
      <test>
        fn:compare('Strasse', 'Straße')
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5355">
      <description>Test case for fn:compare</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:compare('Strasse', 'Straße',
                  'http://www.w3.org/2013/collation/UCA?lang=de;strength=primary')
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5372">
      <description>Test case for fn:compare</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment>
         <namespace prefix="math" uri="http://www.w3.org/2005/xpath-functions/math"/>
         <namespace prefix="map" uri="http://www.w3.org/2005/xpath-functions/map"/>
         <namespace prefix="array" uri="http://www.w3.org/2005/xpath-functions/array"/>
         <collation uri="http://www.w3.org/2013/collation/UCA?lang=de" default="true"/>
      </environment>
      <test>
        fn:compare('Strassen', 'Straße')
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5435">
      <description>Test case for fn:codepoint-equal</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:codepoint-equal("abcd", "abcd")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5440">
      <description>Test case for fn:codepoint-equal</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:codepoint-equal("abcd", "abcd ")
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5445">
      <description>Test case for fn:codepoint-equal</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:codepoint-equal("", "")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5450">
      <description>Test case for fn:codepoint-equal</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:codepoint-equal("", ())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5455">
      <description>Test case for fn:codepoint-equal</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:codepoint-equal((), ())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5534">
      <description>Test case for fn:concat</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:concat('un', 'grateful')
      </test>
      <result>
         <assert-deep-eq>"ungrateful"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5540">
      <description>Test case for fn:concat</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:concat('Thy ', (), 'old ', "groans", "", ' ring',
                  ' yet', ' in', ' my', ' ancient',' ears.')
      </test>
      <result>
         <assert-deep-eq>"Thy old groans ring yet in my ancient ears."</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5546">
      <description>Test case for fn:concat</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:concat('Ciao!',())
      </test>
      <result>
         <assert-deep-eq>"Ciao!"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5552">
      <description>Test case for fn:concat</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:concat('Ingratitude, ', 'thou ', 'marble-hearted', ' fiend!')
      </test>
      <result>
         <assert-deep-eq>"Ingratitude, thou marble-hearted fiend!"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5558">
      <description>Test case for fn:concat</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:concat(01, 02, 03, 04, true())
      </test>
      <result>
         <assert-deep-eq>"1234true"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5564">
      <description>Test case for fn:concat</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        10 || '/' || 6
      </test>
      <result>
         <assert-deep-eq>"10/6"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5623">
      <description>Test case for fn:string-join</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:string-join(1 to 9)
      </test>
      <result>
         <assert-deep-eq>"123456789"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5629">
      <description>Test case for fn:string-join</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:string-join(('Now', 'is', 'the', 'time', '...'),
                  ' ')
      </test>
      <result>
         <assert-deep-eq>"Now is the time ..."</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5635">
      <description>Test case for fn:string-join</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:string-join(('Blow, ', 'blow, ', 'thou ', 'winter ', 'wind!'),
                  '')
      </test>
      <result>
         <assert-deep-eq>"Blow, blow, thou winter wind!"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5641">
      <description>Test case for fn:string-join</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:string-join((), 'separator')
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5647">
      <description>Test case for fn:string-join</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:string-join(1 to 5, ', ')
      </test>
      <result>
         <assert-deep-eq>"1, 2, 3, 4, 5"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5655">
      <description>Test case for fn:string-join</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $doc := 
          &lt;doc&gt;
  &lt;chap&gt;
    &lt;section xml:id="xyz"/&gt;
  &lt;/chap&gt;
&lt;/doc&gt;           
         
           return 

        
        $doc//@xml:id ! fn:string-join((node-name(), '="', ., '"'))
      </test>
      <result>
         <assert-deep-eq>'xml:id="xyz"'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5661">
      <description>Test case for fn:string-join</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $doc := 
          &lt;doc&gt;
  &lt;chap&gt;
    &lt;section xml:id="xyz"/&gt;
  &lt;/chap&gt;
&lt;/doc&gt;           
         
           return 

        
        $doc//section ! fn:string-join(ancestor-or-self::*/name(), '/')
      </test>
      <result>
         <assert-deep-eq>"doc/chap/section"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5798">
      <description>Test case for fn:substring</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:substring("motor car", 6)
      </test>
      <result>
         <assert-deep-eq>" car"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5810">
      <description>Test case for fn:substring</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:substring("metadata", 4, 3)
      </test>
      <result>
         <assert-deep-eq>"ada"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5818">
      <description>Test case for fn:substring</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:substring("12345", 1.5, 2.6)
      </test>
      <result>
         <assert-deep-eq>"234"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5826">
      <description>Test case for fn:substring</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:substring("12345", 0, 3)
      </test>
      <result>
         <assert-deep-eq>"12"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5834">
      <description>Test case for fn:substring</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:substring("12345", 5, -3)
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5842">
      <description>Test case for fn:substring</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:substring("12345", -3, 5)
      </test>
      <result>
         <assert-deep-eq>"1"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5850">
      <description>Test case for fn:substring</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:substring("12345", 0 div 0E0, 3)
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5870">
      <description>Test case for fn:substring</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:substring("12345", 1, 0 div 0E0)
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5878">
      <description>Test case for fn:substring</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:substring((), 1, 3)
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5884">
      <description>Test case for fn:substring</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:substring("12345", -42, 1 div 0E0)
      </test>
      <result>
         <assert-deep-eq>"12345"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e5895">
      <description>Test case for fn:substring</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:substring("12345", -1 div 0E0, 1 div 0E0)
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e6001">
      <description>Test case for fn:string-length</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:string-length("Harp not on that string, madam; that is past.")
      </test>
      <result>
         <assert-deep-eq>45</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e6007">
      <description>Test case for fn:string-length</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:string-length(())
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e6084">
      <description>Test case for fn:normalize-space</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:normalize-space(" The    wealthy curled darlings
                                        of    our    nation. ")
      </test>
      <result>
         <assert-deep-eq>"The wealthy curled darlings of our nation."</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e6090">
      <description>Test case for fn:normalize-space</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:normalize-space(())
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e6393">
      <description>Test case for fn:upper-case</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:upper-case("abCd0")
      </test>
      <result>
         <assert-deep-eq>"ABCD0"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e6454">
      <description>Test case for fn:lower-case</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:lower-case("ABc!D")
      </test>
      <result>
         <assert-deep-eq>"abc!d"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e6570">
      <description>Test case for fn:translate</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:translate("bar","abc","ABC")
      </test>
      <result>
         <assert-deep-eq>"BAr"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e6576">
      <description>Test case for fn:translate</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:translate("--aaa--","abc-","ABC")
      </test>
      <result>
         <assert-deep-eq>"AAA"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e6582">
      <description>Test case for fn:translate</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:translate("abcdabc", "abc", "AB")
      </test>
      <result>
         <assert-deep-eq>"ABdAB"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e6646">
      <description>Test case for fn:encode-for-uri</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:encode-for-uri("http://www.example.com/00/Weather/CA/Los%20Angeles#ocean")
      </test>
      <result>
         <assert-deep-eq>"http%3A%2F%2Fwww.example.com%2F00%2FWeather%2FCA%2FLos%2520Angeles%23ocean"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e6654">
      <description>Test case for fn:encode-for-uri</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        concat("http://www.example.com/",
                  encode-for-uri("~bébé"))
      </test>
      <result>
         <assert-deep-eq>"http://www.example.com/~b%C3%A9b%C3%A9"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e6660">
      <description>Test case for fn:encode-for-uri</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        concat("http://www.example.com/", encode-for-uri("100% organic"))
      </test>
      <result>
         <assert-deep-eq>"http://www.example.com/100%25%20organic"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e6741">
      <description>Test case for fn:iri-to-uri</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:iri-to-uri
                  ("http://www.example.com/00/Weather/CA/Los%20Angeles#ocean")
      </test>
      <result>
         <assert-deep-eq>"http://www.example.com/00/Weather/CA/Los%20Angeles#ocean"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e6747">
      <description>Test case for fn:iri-to-uri</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:iri-to-uri ("http://www.example.com/~bébé")
      </test>
      <result>
         <assert-deep-eq>"http://www.example.com/~b%C3%A9b%C3%A9"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e6790">
      <description>Test case for fn:escape-html-uri</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:escape-html-uri("http://www.example.com/00/Weather/CA/Los Angeles#ocean")
      </test>
      <result>
         <assert-deep-eq>"http://www.example.com/00/Weather/CA/Los Angeles#ocean"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e6796">
      <description>Test case for fn:escape-html-uri</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:escape-html-uri("javascript:if (navigator.browserLanguage == 'fr') window.open('http://www.example.com/~bébé');")
      </test>
      <result>
         <assert-deep-eq>"javascript:if (navigator.browserLanguage == 'fr') window.open('http://www.example.com/~b%C3%A9b%C3%A9');"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e6908">
      <description>Test case for fn:contains</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:contains ( "tattoo", "t")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e6914">
      <description>Test case for fn:contains</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:contains ( "tattoo", "ttt")
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e6920">
      <description>Test case for fn:contains</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:contains ( "", ())
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e6928">
      <description>Test case for fn:contains</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:contains ( "abcdefghi", "-d-e-f-",
                  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e6934">
      <description>Test case for fn:contains</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:contains ( "a*b*c*d*e*f*g*h*i*", "d-ef-",
                  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e6940">
      <description>Test case for fn:contains</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:contains ( "abcd***e---f*--*ghi", "def",
                  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e6946">
      <description>Test case for fn:contains</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:contains ( (), "--***-*---",
                  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7061">
      <description>Test case for fn:starts-with</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:starts-with("tattoo", "tat")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7067">
      <description>Test case for fn:starts-with</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:starts-with ( "tattoo", "att")
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7073">
      <description>Test case for fn:starts-with</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:starts-with ((), ())
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7079">
      <description>Test case for fn:starts-with</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:starts-with ( "abcdefghi", "-a-b-c-",
                  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7085">
      <description>Test case for fn:starts-with</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:starts-with ( "a*b*c*d*e*f*g*h*i*", "a-bc-",
                  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7091">
      <description>Test case for fn:starts-with</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:starts-with ( "abcd***e---f*--*ghi", "abcdef",
                  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7097">
      <description>Test case for fn:starts-with</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:starts-with ( (), "--***-*---",
                  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7105">
      <description>Test case for fn:starts-with</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:starts-with ( "-abcdefghi", "-abc",
                  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7222">
      <description>Test case for fn:ends-with</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:ends-with ( "tattoo", "tattoo")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7228">
      <description>Test case for fn:ends-with</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:ends-with ( "tattoo", "atto")
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7234">
      <description>Test case for fn:ends-with</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:ends-with ((), ())
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7240">
      <description>Test case for fn:ends-with</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:ends-with ( "abcdefghi", "-g-h-i-",
                  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7246">
      <description>Test case for fn:ends-with</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:ends-with ( "abcd***e---f*--*ghi", "defghi",
                  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7252">
      <description>Test case for fn:ends-with</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:ends-with ( "abcd***e---f*--*ghi", "defghi",
                  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7258">
      <description>Test case for fn:ends-with</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:ends-with ( (), "--***-*---",
                  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7266">
      <description>Test case for fn:ends-with</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:ends-with ( "abcdefghi", "ghi-",
                  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7375">
      <description>Test case for fn:substring-before</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:substring-before ( "tattoo", "attoo")
      </test>
      <result>
         <assert-deep-eq>"t"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7381">
      <description>Test case for fn:substring-before</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:substring-before ( "tattoo", "tatto")
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7387">
      <description>Test case for fn:substring-before</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:substring-before ((), ())
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7393">
      <description>Test case for fn:substring-before</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:substring-before ( "abcdefghi", "--d-e-",
                  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary")
      </test>
      <result>
         <assert-deep-eq>"abc"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7399">
      <description>Test case for fn:substring-before</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:substring-before ( "abc--d-e-fghi", "--d-e-",
                  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary")
      </test>
      <result>
         <assert-deep-eq>"abc--"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7405">
      <description>Test case for fn:substring-before</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:substring-before ( "a*b*c*d*e*f*g*h*i*", "***cde",
                  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary")
      </test>
      <result>
         <assert-deep-eq>"a*b*"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7411">
      <description>Test case for fn:substring-before</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:substring-before ( "Eureka!", "--***-*---",
                  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary")
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7522">
      <description>Test case for fn:substring-after</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:substring-after("tattoo", "tat")
      </test>
      <result>
         <assert-deep-eq>"too"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7528">
      <description>Test case for fn:substring-after</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:substring-after("tattoo", "tattoo")
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7534">
      <description>Test case for fn:substring-after</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:substring-after((), ())
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7540">
      <description>Test case for fn:substring-after</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
         fn:substring-after("abcdefghi", "--d-e-",
                  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary")
      </test>
      <result>
         <assert-deep-eq>"fghi"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7546">
      <description>Test case for fn:substring-after</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:substring-after("abc--d-e-fghi", "--d-e-",
                  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary")
      </test>
      <result>
         <assert-deep-eq>"-fghi"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7552">
      <description>Test case for fn:substring-after</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:substring-after ( "a*b*c*d*e*f*g*h*i*", "***cde***",
                  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary")
      </test>
      <result>
         <assert-deep-eq>"*f*g*h*i*"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7558">
      <description>Test case for fn:substring-after</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:substring-after ( "Eureka!", "--***-*---",
                  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary")
      </test>
      <result>
         <assert-deep-eq>"Eureka!"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7660">
      <description>Test case for fn:matches</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:matches("abracadabra", "bra")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7666">
      <description>Test case for fn:matches</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:matches("abracadabra", "^a.*a$")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7672">
      <description>Test case for fn:matches</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:matches("abracadabra", "^bra")
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7689">
      <description>Test case for fn:matches</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $poem := 
          
&lt;poem author="Wilhelm Busch"&gt;
Kaum hat dies der Hahn gesehen,
Fängt er auch schon an zu krähen:
Kikeriki! Kikikerikih!!
Tak, tak, tak! - da kommen sie.
&lt;/poem&gt;
           return 

        
        fn:matches($poem, "Kaum.*krähen")
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7695">
      <description>Test case for fn:matches</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $poem := 
          
&lt;poem author="Wilhelm Busch"&gt;
Kaum hat dies der Hahn gesehen,
Fängt er auch schon an zu krähen:
Kikeriki! Kikikerikih!!
Tak, tak, tak! - da kommen sie.
&lt;/poem&gt;
           return 

        
        fn:matches($poem, "Kaum.*krähen", "s")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7701">
      <description>Test case for fn:matches</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $poem := 
          
&lt;poem author="Wilhelm Busch"&gt;
Kaum hat dies der Hahn gesehen,
Fängt er auch schon an zu krähen:
Kikeriki! Kikikerikih!!
Tak, tak, tak! - da kommen sie.
&lt;/poem&gt;
           return 

        
        fn:matches($poem, "^Kaum.*gesehen,$", "m")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7707">
      <description>Test case for fn:matches</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $poem := 
          
&lt;poem author="Wilhelm Busch"&gt;
Kaum hat dies der Hahn gesehen,
Fängt er auch schon an zu krähen:
Kikeriki! Kikikerikih!!
Tak, tak, tak! - da kommen sie.
&lt;/poem&gt;
           return 

        
        fn:matches($poem, "^Kaum.*gesehen,$")
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e7713">
      <description>Test case for fn:matches</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $poem := 
          
&lt;poem author="Wilhelm Busch"&gt;
Kaum hat dies der Hahn gesehen,
Fängt er auch schon an zu krähen:
Kikeriki! Kikikerikih!!
Tak, tak, tak! - da kommen sie.
&lt;/poem&gt;
           return 

        
        fn:matches($poem, "kiki", "i")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e8009">
      <description>Test case for fn:replace</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:replace("abracadabra", "bra", "*")
      </test>
      <result>
         <assert-deep-eq>"a*cada*"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e8015">
      <description>Test case for fn:replace</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:replace("abracadabra", "a.*a", "*")
      </test>
      <result>
         <assert-deep-eq>"*"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e8021">
      <description>Test case for fn:replace</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:replace("abracadabra", "a.*?a", "*")
      </test>
      <result>
         <assert-deep-eq>"*c*bra"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e8027">
      <description>Test case for fn:replace</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:replace("abracadabra", "a", "")
      </test>
      <result>
         <assert-deep-eq>"brcdbr"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e8033">
      <description>Test case for fn:replace</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:replace("abracadabra", "a(.)", "a$1$1")
      </test>
      <result>
         <assert-deep-eq>"abbraccaddabbra"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e8045">
      <description>Test case for fn:replace</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:replace("AAAA", "A+", "b")
      </test>
      <result>
         <assert-deep-eq>"b"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e8051">
      <description>Test case for fn:replace</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:replace("AAAA", "A+?", "b")
      </test>
      <result>
         <assert-deep-eq>"bbbb"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e8057">
      <description>Test case for fn:replace</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:replace("darted", "^(.*?)d(.*)$", "$1c$2")
      </test>
      <result>
         <assert-deep-eq>"carted"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e8218">
      <description>Test case for fn:tokenize</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:tokenize(" red green blue ")
      </test>
      <result>
         <assert-deep-eq>("red", "green", "blue")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e8224">
      <description>Test case for fn:tokenize</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:tokenize("The cat sat on the mat", "\s+")
      </test>
      <result>
         <assert-deep-eq>("The", "cat", "sat", "on", "the", "mat")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e8230">
      <description>Test case for fn:tokenize</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:tokenize(" red green blue ", "\s+")
      </test>
      <result>
         <assert-deep-eq>("", "red", "green", "blue", "")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e8236">
      <description>Test case for fn:tokenize</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:tokenize("1, 15, 24, 50", ",\s*")
      </test>
      <result>
         <assert-deep-eq>("1", "15", "24", "50")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e8242">
      <description>Test case for fn:tokenize</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:tokenize("1,15,,24,50,", ",")
      </test>
      <result>
         <assert-deep-eq>("1", "15", "", "24", "50", "")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e8255">
      <description>Test case for fn:tokenize</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:tokenize("Some unparsed &lt;br&gt; HTML &lt;BR&gt; text",
                  "\s*&lt;br&gt;\s*", "i")
      </test>
      <result>
         <assert-deep-eq>("Some unparsed", "HTML", "text")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e8474">
      <description>Test case for fn:analyze-string</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:analyze-string("The cat sat on the mat.", "\w+")
      </test>
      <result>
         <assert-xml><![CDATA[
<analyze-string-result xmlns="http://www.w3.org/2005/xpath-functions"><match>The</match><non-match> </non-match
><match>cat</match><non-match> </non-match><match>sat</match><non-match> </non-match><match>on</match
><non-match> </non-match><match>the</match><non-match> </non-match><match>mat</match><non-match>.</non-match></analyze-string-result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fo-test-d3e8480">
      <description>Test case for fn:analyze-string</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <modified by="Josh Spiegel" on="2016-10-11" change="Bug 29932"/>
      <environment ref="global"/>
      <test>
        fn:analyze-string("2008-12-03",
                  "^(\d+)\-(\d+)\-(\d+)$")
      </test>
      <result>
         <assert-xml><![CDATA[<analyze-string-result xmlns="http://www.w3.org/2005/xpath-functions"><match><group nr="1">2008</group>-<group nr="2">12</group>-<group nr="3">03</group></match></analyze-string-result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fo-test-d3e8486">
      <description>Test case for fn:analyze-string</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <modified by="Josh Spiegel" on="2016-10-11" change="Bug 29932"/>
      <environment ref="global"/>
      <test>
        fn:analyze-string("A1,C15,,D24, X50,",
                  "([A-Z])([0-9]+)")
      </test>
      <result>
         <assert-xml><![CDATA[<analyze-string-result xmlns="http://www.w3.org/2005/xpath-functions"><match><group nr="1">A</group><group nr="2">1</group></match><non-match>,</non-match><match><group nr="1">C</group><group nr="2">15</group></match><non-match>,,</non-match><match><group nr="1">D</group><group nr="2">24</group></match><non-match>, </non-match><match><group nr="1">X</group><group nr="2">50</group></match><non-match>,</non-match></analyze-string-result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fo-test-d3e8569">
      <description>Test case for fn:contains-token</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:contains-token("red green blue ", "red")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e8574">
      <description>Test case for fn:contains-token</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:contains-token(("red", "green", "blue"), " red ")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e8579">
      <description>Test case for fn:contains-token</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:contains-token("red, green, blue", "red")
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e8584">
      <description>Test case for fn:contains-token</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:contains-token("red green blue", "RED", "http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e8755">
      <description>Test case for fn:true</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:true()
      </test>
      <result>
         <assert-deep-eq>xs:boolean(1)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e8787">
      <description>Test case for fn:false</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:false()
      </test>
      <result>
         <assert-deep-eq>xs:boolean(0)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e9053">
      <description>Test case for fn:boolean</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "")
          
           return 

        
        fn:boolean($abc[1])
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e9059">
      <description>Test case for fn:boolean</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "")
          
           return 

        
        fn:boolean($abc[0])
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e9065">
      <description>Test case for fn:boolean</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "")
          
           return 

        
        fn:boolean($abc[3])
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e9130">
      <description>Test case for fn:not</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:not(fn:true())
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e9136">
      <description>Test case for fn:not</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:not(())
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e9142">
      <description>Test case for fn:not</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:not("false")
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e9451">
      <description>Test case for fn:years-from-duration</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:years-from-duration(xs:yearMonthDuration("P20Y15M"))
      </test>
      <result>
         <assert-deep-eq>21</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e9457">
      <description>Test case for fn:years-from-duration</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:years-from-duration(xs:yearMonthDuration("-P15M"))
      </test>
      <result>
         <assert-deep-eq>-1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e9463">
      <description>Test case for fn:years-from-duration</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:years-from-duration(xs:dayTimeDuration("-P2DT15H"))
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e9519">
      <description>Test case for fn:months-from-duration</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:months-from-duration(xs:yearMonthDuration("P20Y15M"))
      </test>
      <result>
         <assert-deep-eq>3</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e9525">
      <description>Test case for fn:months-from-duration</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:months-from-duration(xs:yearMonthDuration("-P20Y18M"))
      </test>
      <result>
         <assert-deep-eq>-6</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e9531">
      <description>Test case for fn:months-from-duration</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:months-from-duration(xs:dayTimeDuration("-P2DT15H0M0S"))
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e9587">
      <description>Test case for fn:days-from-duration</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:days-from-duration(xs:dayTimeDuration("P3DT10H"))
      </test>
      <result>
         <assert-deep-eq>3</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e9593">
      <description>Test case for fn:days-from-duration</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:days-from-duration(xs:dayTimeDuration("P3DT55H"))
      </test>
      <result>
         <assert-deep-eq>5</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e9599">
      <description>Test case for fn:days-from-duration</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:days-from-duration(xs:yearMonthDuration("P3Y5M"))
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e9655">
      <description>Test case for fn:hours-from-duration</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:hours-from-duration(xs:dayTimeDuration("P3DT10H"))
      </test>
      <result>
         <assert-deep-eq>10</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e9661">
      <description>Test case for fn:hours-from-duration</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:hours-from-duration(xs:dayTimeDuration("P3DT12H32M12S"))
      </test>
      <result>
         <assert-deep-eq>12</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e9667">
      <description>Test case for fn:hours-from-duration</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:hours-from-duration(xs:dayTimeDuration("PT123H"))
      </test>
      <result>
         <assert-deep-eq>3</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e9673">
      <description>Test case for fn:hours-from-duration</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:hours-from-duration(xs:dayTimeDuration("-P3DT10H"))
      </test>
      <result>
         <assert-deep-eq>-10</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e9729">
      <description>Test case for fn:minutes-from-duration</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:minutes-from-duration(xs:dayTimeDuration("P3DT10H"))
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e9735">
      <description>Test case for fn:minutes-from-duration</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:minutes-from-duration(xs:dayTimeDuration("-P5DT12H30M"))
      </test>
      <result>
         <assert-deep-eq>-30</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e9794">
      <description>Test case for fn:seconds-from-duration</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:seconds-from-duration(xs:dayTimeDuration("P3DT10H12.5S"))
      </test>
      <result>
         <assert-deep-eq>12.5</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e9800">
      <description>Test case for fn:seconds-from-duration</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:seconds-from-duration(xs:dayTimeDuration("-PT256S"))
      </test>
      <result>
         <assert-deep-eq>-16.0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e10453">
      <description>Test case for fn:dateTime</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:dateTime(xs:date("1999-12-31"),
                  xs:time("12:00:00"))
      </test>
      <result>
         <assert-deep-eq>xs:dateTime("1999-12-31T12:00:00")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e10459">
      <description>Test case for fn:dateTime</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:dateTime(xs:date("1999-12-31"),
                  xs:time("24:00:00"))
      </test>
      <result>
         <assert-deep-eq>xs:dateTime("1999-12-31T00:00:00")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11539">
      <description>Test case for fn:year-from-dateTime</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:year-from-dateTime(xs:dateTime("1999-05-31T13:20:00-05:00"))
      </test>
      <result>
         <assert-deep-eq>1999</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11545">
      <description>Test case for fn:year-from-dateTime</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:year-from-dateTime(xs:dateTime("1999-05-31T21:30:00-05:00"))
      </test>
      <result>
         <assert-deep-eq>1999</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11551">
      <description>Test case for fn:year-from-dateTime</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:year-from-dateTime(xs:dateTime("1999-12-31T19:20:00"))
      </test>
      <result>
         <assert-deep-eq>1999</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11557">
      <description>Test case for fn:year-from-dateTime</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:year-from-dateTime(xs:dateTime("1999-12-31T24:00:00"))
      </test>
      <result>
         <assert-deep-eq>2000</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11595">
      <description>Test case for fn:month-from-dateTime</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:month-from-dateTime(xs:dateTime("1999-05-31T13:20:00-05:00"))
      </test>
      <result>
         <assert-deep-eq>5</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11601">
      <description>Test case for fn:month-from-dateTime</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:month-from-dateTime(xs:dateTime("1999-12-31T19:20:00-05:00"))
      </test>
      <result>
         <assert-deep-eq>12</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11607">
      <description>Test case for fn:month-from-dateTime</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:month-from-dateTime(fn:adjust-dateTime-to-timezone(xs:dateTime("1999-12-31T19:20:00-05:00"),
                  xs:dayTimeDuration("PT0S")))
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11645">
      <description>Test case for fn:day-from-dateTime</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:day-from-dateTime(xs:dateTime("1999-05-31T13:20:00-05:00"))
      </test>
      <result>
         <assert-deep-eq>31</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11651">
      <description>Test case for fn:day-from-dateTime</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:day-from-dateTime(xs:dateTime("1999-12-31T20:00:00-05:00"))
      </test>
      <result>
         <assert-deep-eq>31</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11657">
      <description>Test case for fn:day-from-dateTime</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:day-from-dateTime(fn:adjust-dateTime-to-timezone(xs:dateTime("1999-12-31T19:20:00-05:00"),
                  xs:dayTimeDuration("PT0S")))
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11695">
      <description>Test case for fn:hours-from-dateTime</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:hours-from-dateTime(xs:dateTime("1999-05-31T08:20:00-05:00"))
      </test>
      <result>
         <assert-deep-eq>8</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11701">
      <description>Test case for fn:hours-from-dateTime</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:hours-from-dateTime(xs:dateTime("1999-12-31T21:20:00-05:00"))
      </test>
      <result>
         <assert-deep-eq>21</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11707">
      <description>Test case for fn:hours-from-dateTime</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:hours-from-dateTime(fn:adjust-dateTime-to-timezone(xs:dateTime("1999-12-31T21:20:00-05:00"),
                  xs:dayTimeDuration("PT0S")))
      </test>
      <result>
         <assert-deep-eq>2</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11713">
      <description>Test case for fn:hours-from-dateTime</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:hours-from-dateTime(xs:dateTime("1999-12-31T12:00:00"))
      </test>
      <result>
         <assert-deep-eq>12</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11719">
      <description>Test case for fn:hours-from-dateTime</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:hours-from-dateTime(xs:dateTime("1999-12-31T24:00:00"))
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11757">
      <description>Test case for fn:minutes-from-dateTime</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:minutes-from-dateTime(xs:dateTime("1999-05-31T13:20:00-05:00"))
      </test>
      <result>
         <assert-deep-eq>20</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11763">
      <description>Test case for fn:minutes-from-dateTime</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:minutes-from-dateTime(xs:dateTime("1999-05-31T13:30:00+05:30"))
      </test>
      <result>
         <assert-deep-eq>30</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11801">
      <description>Test case for fn:seconds-from-dateTime</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:seconds-from-dateTime(xs:dateTime("1999-05-31T13:20:00-05:00"))
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11845">
      <description>Test case for fn:timezone-from-dateTime</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:timezone-from-dateTime(xs:dateTime("1999-05-31T13:20:00-05:00"))
      </test>
      <result>
         <assert-deep-eq>xs:dayTimeDuration("-PT5H")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11851">
      <description>Test case for fn:timezone-from-dateTime</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:timezone-from-dateTime(xs:dateTime("2000-06-12T13:20:00Z"))
      </test>
      <result>
         <assert-deep-eq>xs:dayTimeDuration("PT0S")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11857">
      <description>Test case for fn:timezone-from-dateTime</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:timezone-from-dateTime(xs:dateTime("2004-08-27T00:00:00"))
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11895">
      <description>Test case for fn:year-from-date</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:year-from-date(xs:date("1999-05-31"))
      </test>
      <result>
         <assert-deep-eq>1999</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11901">
      <description>Test case for fn:year-from-date</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:year-from-date(xs:date("2000-01-01+05:00"))
      </test>
      <result>
         <assert-deep-eq>2000</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11939">
      <description>Test case for fn:month-from-date</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:month-from-date(xs:date("1999-05-31-05:00"))
      </test>
      <result>
         <assert-deep-eq>5</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11945">
      <description>Test case for fn:month-from-date</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:month-from-date(xs:date("2000-01-01+05:00"))
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11983">
      <description>Test case for fn:day-from-date</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:day-from-date(xs:date("1999-05-31-05:00"))
      </test>
      <result>
         <assert-deep-eq>31</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e11989">
      <description>Test case for fn:day-from-date</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:day-from-date(xs:date("2000-01-01+05:00"))
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12034">
      <description>Test case for fn:timezone-from-date</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:timezone-from-date(xs:date("1999-05-31-05:00"))
      </test>
      <result>
         <assert-deep-eq>xs:dayTimeDuration("-PT5H")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12040">
      <description>Test case for fn:timezone-from-date</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:timezone-from-date(xs:date("2000-06-12Z"))
      </test>
      <result>
         <assert-deep-eq>xs:dayTimeDuration("PT0S")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12084">
      <description>Test case for fn:hours-from-time</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:hours-from-time(xs:time("11:23:00"))
      </test>
      <result>
         <assert-deep-eq>11</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12090">
      <description>Test case for fn:hours-from-time</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:hours-from-time(xs:time("21:23:00"))
      </test>
      <result>
         <assert-deep-eq>21</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12096">
      <description>Test case for fn:hours-from-time</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:hours-from-time(xs:time("01:23:00+05:00"))
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12102">
      <description>Test case for fn:hours-from-time</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:hours-from-time(fn:adjust-time-to-timezone(xs:time("01:23:00+05:00"),
                  xs:dayTimeDuration("PT0S")))
      </test>
      <result>
         <assert-deep-eq>20</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12108">
      <description>Test case for fn:hours-from-time</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:hours-from-time(xs:time("24:00:00"))
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12146">
      <description>Test case for fn:minutes-from-time</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:minutes-from-time(xs:time("13:00:00Z"))
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12184">
      <description>Test case for fn:seconds-from-time</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:seconds-from-time(xs:time("13:20:10.5"))
      </test>
      <result>
         <assert-deep-eq>10.5</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12228">
      <description>Test case for fn:timezone-from-time</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:timezone-from-time(xs:time("13:20:00-05:00"))
      </test>
      <result>
         <assert-deep-eq>xs:dayTimeDuration("-PT5H")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12234">
      <description>Test case for fn:timezone-from-time</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:timezone-from-time(xs:time("13:20:00"))
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12362">
      <description>Test case for fn:adjust-dateTime-to-timezone</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $tz-10 := xs:dayTimeDuration("-PT10H")
          
           return 

        
        fn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00-07:00'))
      </test>
      <result>
         <assert-deep-eq>xs:dateTime('2002-03-07T12:00:00-05:00')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12368">
      <description>Test case for fn:adjust-dateTime-to-timezone</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $tz-10 := xs:dayTimeDuration("-PT10H")
          
           return 

        
        fn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00'),
                  $tz-10)
      </test>
      <result>
         <assert-deep-eq>xs:dateTime('2002-03-07T10:00:00-10:00')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12374">
      <description>Test case for fn:adjust-dateTime-to-timezone</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $tz-10 := xs:dayTimeDuration("-PT10H")
          
           return 

        
        fn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00-07:00'),
                  $tz-10)
      </test>
      <result>
         <assert-deep-eq>xs:dateTime('2002-03-07T07:00:00-10:00')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12380">
      <description>Test case for fn:adjust-dateTime-to-timezone</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00-07:00'),
                  xs:dayTimeDuration("PT10H"))
      </test>
      <result>
         <assert-deep-eq>xs:dateTime('2002-03-08T03:00:00+10:00')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12386">
      <description>Test case for fn:adjust-dateTime-to-timezone</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T00:00:00+01:00'),
                  xs:dayTimeDuration("-PT8H"))
      </test>
      <result>
         <assert-deep-eq>xs:dateTime('2002-03-06T15:00:00-08:00')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12392">
      <description>Test case for fn:adjust-dateTime-to-timezone</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00'),
                  ())
      </test>
      <result>
         <assert-deep-eq>xs:dateTime('2002-03-07T10:00:00')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12398">
      <description>Test case for fn:adjust-dateTime-to-timezone</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00-07:00'),
                  ())
      </test>
      <result>
         <assert-deep-eq>xs:dateTime('2002-03-07T10:00:00')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12567">
      <description>Test case for fn:adjust-date-to-timezone</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $tz-10 := xs:dayTimeDuration("-PT10H")
          
           return 

        
        fn:adjust-date-to-timezone(xs:date("2002-03-07"),
                  $tz-10)
      </test>
      <result>
         <assert-deep-eq>xs:date("2002-03-07-10:00")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12573">
      <description>Test case for fn:adjust-date-to-timezone</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $tz-10 := xs:dayTimeDuration("-PT10H")
          
           return 

        
        fn:adjust-date-to-timezone(xs:date("2002-03-07-07:00"),
                  $tz-10)
      </test>
      <result>
         <assert-deep-eq>xs:date("2002-03-06-10:00")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12589">
      <description>Test case for fn:adjust-date-to-timezone</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:adjust-date-to-timezone(xs:date("2002-03-07"),
                  ())
      </test>
      <result>
         <assert-deep-eq>xs:date("2002-03-07")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12595">
      <description>Test case for fn:adjust-date-to-timezone</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:adjust-date-to-timezone(xs:date("2002-03-07-07:00"),
                  ())
      </test>
      <result>
         <assert-deep-eq>xs:date("2002-03-07")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12755">
      <description>Test case for fn:adjust-time-to-timezone</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:adjust-time-to-timezone(xs:time("10:00:00-07:00"))
      </test>
      <result>
         <assert-deep-eq>xs:time("12:00:00-05:00")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12761">
      <description>Test case for fn:adjust-time-to-timezone</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $tz-10 := xs:dayTimeDuration("-PT10H")
          
           return 

        
        fn:adjust-time-to-timezone(xs:time("10:00:00"),
                  $tz-10)
      </test>
      <result>
         <assert-deep-eq>xs:time("10:00:00-10:00")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12767">
      <description>Test case for fn:adjust-time-to-timezone</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $tz-10 := xs:dayTimeDuration("-PT10H")
          
           return 

        
        fn:adjust-time-to-timezone(xs:time("10:00:00-07:00"),
                  $tz-10)
      </test>
      <result>
         <assert-deep-eq>xs:time("07:00:00-10:00")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12773">
      <description>Test case for fn:adjust-time-to-timezone</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:adjust-time-to-timezone(xs:time("10:00:00"), ())
      </test>
      <result>
         <assert-deep-eq>xs:time("10:00:00")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12779">
      <description>Test case for fn:adjust-time-to-timezone</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:adjust-time-to-timezone(xs:time("10:00:00-07:00"),
                  ())
      </test>
      <result>
         <assert-deep-eq>xs:time("10:00:00")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e12785">
      <description>Test case for fn:adjust-time-to-timezone</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:adjust-time-to-timezone(xs:time("10:00:00-07:00"),
                  xs:dayTimeDuration("PT10H"))
      </test>
      <result>
         <assert-deep-eq>xs:time("03:00:00+10:00")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e14454">
      <description>Test case for fn:parse-ietf-date</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:parse-ietf-date("Wed, 06 Jun 1994 07:29:35 GMT")
      </test>
      <result>
         <assert-deep-eq>xs:dateTime("1994-06-06T07:29:35Z")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e14459">
      <description>Test case for fn:parse-ietf-date</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:parse-ietf-date("Wed, 6 Jun 94 07:29:35 GMT")
      </test>
      <result>
         <assert-deep-eq>xs:dateTime("1994-06-06T07:29:35Z")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e14464">
      <description>Test case for fn:parse-ietf-date</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:parse-ietf-date("Wed Jun 06 11:54:45 EST 2013")
      </test>
      <result>
         <assert-deep-eq>xs:dateTime("2013-06-06T11:54:45-05:00")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e14469">
      <description>Test case for fn:parse-ietf-date</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:parse-ietf-date("Sunday, 06-Nov-94 08:49:37 GMT")
      </test>
      <result>
         <assert-deep-eq>xs:dateTime("1994-11-06T08:49:37Z")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e14474">
      <description>Test case for fn:parse-ietf-date</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:parse-ietf-date("Wed, 6 Jun 94 07:29:35 +0500")
      </test>
      <result>
         <assert-deep-eq>xs:dateTime("1994-06-06T07:29:35+05:00")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e14821">
      <description>Test case for fn:local-name-from-QName</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:local-name-from-QName(fn:QName("http://www.example.com/example",
                  "person"))
      </test>
      <result>
         <assert-deep-eq>"person"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e14864">
      <description>Test case for fn:namespace-uri-from-QName</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:namespace-uri-from-QName(fn:QName("http://www.example.com/example",
                  "person"))
      </test>
      <result>
         <assert-deep-eq>xs:anyURI("http://www.example.com/example")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e14921">
      <description>Test case for fn:namespace-uri-for-prefix</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $e := 
          
&lt;z:a xmlns="http://example.org/one" xmlns:z="http://example.org/two"&gt;
  &lt;b xmlns=""/&gt;
&lt;/z:a&gt;
           return 

        
        fn:namespace-uri-for-prefix("z", $e)
      </test>
      <result>
         <assert-deep-eq>"http://example.org/two"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e14926">
      <description>Test case for fn:namespace-uri-for-prefix</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $e := 
          
&lt;z:a xmlns="http://example.org/one" xmlns:z="http://example.org/two"&gt;
  &lt;b xmlns=""/&gt;
&lt;/z:a&gt;
           return 

        
        fn:namespace-uri-for-prefix("", $e)
      </test>
      <result>
         <assert-deep-eq>"http://example.org/one"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e14931">
      <description>Test case for fn:namespace-uri-for-prefix</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $e := 
          
&lt;z:a xmlns="http://example.org/one" xmlns:z="http://example.org/two"&gt;
  &lt;b xmlns=""/&gt;
&lt;/z:a&gt;
           return 

        
        fn:namespace-uri-for-prefix((), $e)
      </test>
      <result>
         <assert-deep-eq>"http://example.org/one"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e14936">
      <description>Test case for fn:namespace-uri-for-prefix</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $e := 
          
&lt;z:a xmlns="http://example.org/one" xmlns:z="http://example.org/two"&gt;
  &lt;b xmlns=""/&gt;
&lt;/z:a&gt;
           return 

        
        fn:namespace-uri-for-prefix("xml", $e)
      </test>
      <result>
         <assert-deep-eq>"http://www.w3.org/XML/1998/namespace"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e14941">
      <description>Test case for fn:namespace-uri-for-prefix</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $e := 
          
&lt;z:a xmlns="http://example.org/one" xmlns:z="http://example.org/two"&gt;
  &lt;b xmlns=""/&gt;
&lt;/z:a&gt;
           return 

        
        fn:namespace-uri-for-prefix("xml", $e)
      </test>
      <result>
         <assert-deep-eq>"http://www.w3.org/XML/1998/namespace"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e15667">
      <description>Test case for fn:number</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $po := 
          &lt;PurchaseOrder&gt; &lt;line-item&gt;
         &lt;description&gt;Large widget&lt;/description&gt; &lt;price&gt;8.95&lt;/price&gt;
         &lt;quantity&gt;5.0&lt;/quantity&gt; &lt;/line-item&gt; &lt;line-item&gt;
         &lt;description&gt;Small widget&lt;/description&gt; &lt;price&gt;3.99&lt;/price&gt;
         &lt;quantity&gt;2.0&lt;/quantity&gt; &lt;/line-item&gt; &lt;line-item&gt;
         &lt;description&gt;Tiny widget&lt;/description&gt; &lt;price&gt;1.49&lt;/price&gt;a
         &lt;quantity&gt;805&lt;/quantity&gt; &lt;/line-item&gt;
         &lt;/PurchaseOrder&gt;
           return 

        
          let $item1 := $po/line-item[1]
          
           return 

        
        fn:number($item1/quantity)
      </test>
      <result>
         <assert-deep-eq>5.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e15673">
      <description>Test case for fn:number</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $po := 
          &lt;PurchaseOrder&gt; &lt;line-item&gt;
         &lt;description&gt;Large widget&lt;/description&gt; &lt;price&gt;8.95&lt;/price&gt;
         &lt;quantity&gt;5.0&lt;/quantity&gt; &lt;/line-item&gt; &lt;line-item&gt;
         &lt;description&gt;Small widget&lt;/description&gt; &lt;price&gt;3.99&lt;/price&gt;
         &lt;quantity&gt;2.0&lt;/quantity&gt; &lt;/line-item&gt; &lt;line-item&gt;
         &lt;description&gt;Tiny widget&lt;/description&gt; &lt;price&gt;1.49&lt;/price&gt;a
         &lt;quantity&gt;805&lt;/quantity&gt; &lt;/line-item&gt;
         &lt;/PurchaseOrder&gt;
           return 

        
          let $item2 := $po/line-item[2]
          
           return 

        
        fn:number($item2/description)
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16134">
      <description>Test case for fn:path</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $e := 
          
document {            
&lt;p xmlns="http://example.com/one" xml:lang="de" author="Friedrich von Schiller"&gt;
Freude, schöner Götterfunken,&lt;br/&gt;
Tochter aus Elysium,&lt;br/&gt;
Wir betreten feuertrunken,&lt;br/&gt;
Himmlische, dein Heiligtum.&lt;/p&gt;}
         
           return 

        
        fn:path($e)
      </test>
      <result>
         <assert-deep-eq>'/'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16139">
      <description>Test case for fn:path</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $e := 
          
document {            
&lt;p xmlns="http://example.com/one" xml:lang="de" author="Friedrich von Schiller"&gt;
Freude, schöner Götterfunken,&lt;br/&gt;
Tochter aus Elysium,&lt;br/&gt;
Wir betreten feuertrunken,&lt;br/&gt;
Himmlische, dein Heiligtum.&lt;/p&gt;}
         
           return 

        
        fn:path($e/*:p)
      </test>
      <result>
         <assert-deep-eq>'/Q{http://example.com/one}p[1]'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16144">
      <description>Test case for fn:path</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $e := 
          
document {            
&lt;p xmlns="http://example.com/one" xml:lang="de" author="Friedrich von Schiller"&gt;
Freude, schöner Götterfunken,&lt;br/&gt;
Tochter aus Elysium,&lt;br/&gt;
Wir betreten feuertrunken,&lt;br/&gt;
Himmlische, dein Heiligtum.&lt;/p&gt;}
         
           return 

        
        fn:path($e/*:p/@xml:lang)
      </test>
      <result>
         <assert-deep-eq>'/Q{http://example.com/one}p[1]/@Q{http://www.w3.org/XML/1998/namespace}lang'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16149">
      <description>Test case for fn:path</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $e := 
          
document {            
&lt;p xmlns="http://example.com/one" xml:lang="de" author="Friedrich von Schiller"&gt;
Freude, schöner Götterfunken,&lt;br/&gt;
Tochter aus Elysium,&lt;br/&gt;
Wir betreten feuertrunken,&lt;br/&gt;
Himmlische, dein Heiligtum.&lt;/p&gt;}
         
           return 

        
        fn:path($e/*:p/@author)
      </test>
      <result>
         <assert-deep-eq>'/Q{http://example.com/one}p[1]/@author'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16154">
      <description>Test case for fn:path</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $e := 
          
document {            
&lt;p xmlns="http://example.com/one" xml:lang="de" author="Friedrich von Schiller"&gt;
Freude, schöner Götterfunken,&lt;br/&gt;
Tochter aus Elysium,&lt;br/&gt;
Wir betreten feuertrunken,&lt;br/&gt;
Himmlische, dein Heiligtum.&lt;/p&gt;}
         
           return 

        
        fn:path($e/*:p/*:br[2])
      </test>
      <result>
         <assert-deep-eq>'/Q{http://example.com/one}p[1]/Q{http://example.com/one}br[2]'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16159">
      <description>Test case for fn:path</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $e := 
          
document {            
&lt;p xmlns="http://example.com/one" xml:lang="de" author="Friedrich von Schiller"&gt;
Freude, schöner Götterfunken,&lt;br/&gt;
Tochter aus Elysium,&lt;br/&gt;
Wir betreten feuertrunken,&lt;br/&gt;
Himmlische, dein Heiligtum.&lt;/p&gt;}
         
           return 

        
        fn:path($e//text()[starts-with(normalize-space(),
                  'Tochter')])
      </test>
      <result>
         <assert-deep-eq>'/Q{http://example.com/one}p[1]/text()[2]'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16167">
      <description>Test case for fn:path</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $emp := 
          
            &lt;employee xml:id="ID21256"&gt;
               &lt;empnr&gt;E21256&lt;/empnr&gt;
               &lt;first&gt;John&lt;/first&gt;
               &lt;last&gt;Brown&lt;/last&gt;
            &lt;/employee&gt;
         
           return 

        
        fn:path($emp)
      </test>
      <result>
         <assert-deep-eq>'Q{http://www.w3.org/2005/xpath-functions}root()'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16172">
      <description>Test case for fn:path</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $emp := 
          
            &lt;employee xml:id="ID21256"&gt;
               &lt;empnr&gt;E21256&lt;/empnr&gt;
               &lt;first&gt;John&lt;/first&gt;
               &lt;last&gt;Brown&lt;/last&gt;
            &lt;/employee&gt;
         
           return 

        
        fn:path($emp/@xml:id)
      </test>
      <result>
         <assert-deep-eq>'Q{http://www.w3.org/2005/xpath-functions}root()/@Q{http://www.w3.org/XML/1998/namespace}id'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16177">
      <description>Test case for fn:path</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $emp := 
          
            &lt;employee xml:id="ID21256"&gt;
               &lt;empnr&gt;E21256&lt;/empnr&gt;
               &lt;first&gt;John&lt;/first&gt;
               &lt;last&gt;Brown&lt;/last&gt;
            &lt;/employee&gt;
         
           return 

        
        fn:path($emp/empnr)
      </test>
      <result>
         <assert-deep-eq>'Q{http://www.w3.org/2005/xpath-functions}root()/Q{}empnr[1]'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16595">
      <description>Test case for fn:index-of</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:index-of((10, 20, 30, 40), 35)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16601">
      <description>Test case for fn:index-of</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:index-of((10, 20, 30, 30, 20, 10), 20)
      </test>
      <result>
         <assert-deep-eq>(2, 5)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16607">
      <description>Test case for fn:index-of</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:index-of(("a", "sport", "and", "a", "pastime"),
                  "a")
      </test>
      <result>
         <assert-deep-eq>(1, 4)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16613">
      <description>Test case for fn:index-of</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:index-of(current-date(), 23)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16619">
      <description>Test case for fn:index-of</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:index-of([1, [5, 6], [6, 7]], 6)
      </test>
      <result>
         <assert-deep-eq>(3, 4)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16679">
      <description>Test case for fn:empty</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:empty((1,2,3)[10])
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16685">
      <description>Test case for fn:empty</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:empty(fn:remove(("hello", "world"), 1))
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16691">
      <description>Test case for fn:empty</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:empty([])
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16697">
      <description>Test case for fn:empty</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:empty(map{})
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16703">
      <description>Test case for fn:empty</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:empty("")
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16751">
      <description>Test case for fn:exists</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:exists(fn:remove(("hello"), 1))
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16757">
      <description>Test case for fn:exists</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:exists(fn:remove(("hello", "world"), 1))
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16763">
      <description>Test case for fn:exists</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:exists([])
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16769">
      <description>Test case for fn:exists</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:exists(map{})
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16775">
      <description>Test case for fn:exists</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:exists("")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16954">
      <description>Test case for fn:distinct-values</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:distinct-values((1, 2.0, 3, 2))
      </test>
      <result>
         <assert-permutation>(1, 3, 2.0)</assert-permutation>
      </result>
   </test-case>

   <test-case name="fo-test-d3e16968">
      <description>Test case for fn:distinct-values</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:distinct-values((xs:untypedAtomic("cherry"),
                  xs:untypedAtomic("plum"), xs:untypedAtomic("plum")))
      </test>
      <result>
         <assert-permutation>(xs:untypedAtomic("cherry"),
                  xs:untypedAtomic("plum"))</assert-permutation>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17048">
      <description>Test case for fn:insert-before</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "c")
          
           return 

        
        fn:insert-before($abc, 0, "z")
      </test>
      <result>
         <assert-deep-eq>("z", "a", "b", "c")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17054">
      <description>Test case for fn:insert-before</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "c")
          
           return 

        
        fn:insert-before($abc, 1, "z")
      </test>
      <result>
         <assert-deep-eq>("z", "a", "b", "c")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17060">
      <description>Test case for fn:insert-before</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "c")
          
           return 

        
        fn:insert-before($abc, 2, "z")
      </test>
      <result>
         <assert-deep-eq>("a", "z", "b", "c")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17066">
      <description>Test case for fn:insert-before</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "c")
          
           return 

        
        fn:insert-before($abc, 3, "z")
      </test>
      <result>
         <assert-deep-eq>("a", "b", "z", "c")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17072">
      <description>Test case for fn:insert-before</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "c")
          
           return 

        
        fn:insert-before($abc, 4, "z")
      </test>
      <result>
         <assert-deep-eq>("a", "b", "c", "z")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17134">
      <description>Test case for fn:remove</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "c")
          
           return 

        
        fn:remove($abc, 0)
      </test>
      <result>
         <assert-deep-eq>("a", "b", "c")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17140">
      <description>Test case for fn:remove</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "c")
          
           return 

        
        fn:remove($abc, 1)
      </test>
      <result>
         <assert-deep-eq>("b", "c")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17146">
      <description>Test case for fn:remove</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "c")
          
           return 

        
        fn:remove($abc, 6)
      </test>
      <result>
         <assert-deep-eq>("a", "b", "c")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17152">
      <description>Test case for fn:remove</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "c")
          
           return 

        
        fn:remove((), 3)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17184">
      <description>Test case for fn:head</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:head(1 to 5)
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17190">
      <description>Test case for fn:head</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:head(("a", "b", "c"))
      </test>
      <result>
         <assert-deep-eq>"a"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17196">
      <description>Test case for fn:head</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:head(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17202">
      <description>Test case for fn:head</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:head([1,2,3])
      </test>
      <result>
         <assert-deep-eq>[1,2,3]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17234">
      <description>Test case for fn:tail</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:tail(1 to 5)
      </test>
      <result>
         <assert-deep-eq>(2, 3, 4, 5)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17240">
      <description>Test case for fn:tail</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:tail(("a", "b", "c"))
      </test>
      <result>
         <assert-deep-eq>("b", "c")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17246">
      <description>Test case for fn:tail</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:tail("a")
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17252">
      <description>Test case for fn:tail</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:tail(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17258">
      <description>Test case for fn:tail</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:tail([1,2,3])
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17294">
      <description>Test case for fn:reverse</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "c")
          
           return 

        
        fn:reverse($abc)
      </test>
      <result>
         <assert-deep-eq>("c", "b", "a")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17300">
      <description>Test case for fn:reverse</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:reverse(("hello"))
      </test>
      <result>
         <assert-deep-eq>("hello")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17306">
      <description>Test case for fn:reverse</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:reverse(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17312">
      <description>Test case for fn:reverse</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:reverse([1,2,3])
      </test>
      <result>
         <assert-deep-eq>[1,2,3]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17320">
      <description>Test case for fn:reverse</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:reverse(([1,2,3],[4,5,6]))
      </test>
      <result>
         <assert-deep-eq>([4,5,6],[1,2,3])</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17443">
      <description>Test case for fn:subsequence</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $seq := ("item1", "item2", "item3", "item4", "item5")
          
           return 

        
        fn:subsequence($seq, 4)
      </test>
      <result>
         <assert-deep-eq>("item4", "item5")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17449">
      <description>Test case for fn:subsequence</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $seq := ("item1", "item2", "item3", "item4", "item5")
          
           return 

        
        fn:subsequence($seq, 3, 2)
      </test>
      <result>
         <assert-deep-eq>("item3", "item4")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e17488">
      <description>Test case for fn:unordered</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:unordered((1, 2, 3, 4, 5))
      </test>
      <result>
         <assert-permutation>(1, 2, 3, 4, 5)</assert-permutation>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18067">
      <description>Test case for fn:deep-equal</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $at := 
          &lt;attendees&gt; &lt;name last='Parker'
            first='Peter'/&gt; &lt;name last='Barker' first='Bob'/&gt; &lt;name last='Parker'
            first='Peter'/&gt; &lt;/attendees&gt;
           return 

        
        fn:deep-equal($at, $at/*)
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18073">
      <description>Test case for fn:deep-equal</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $at := 
          &lt;attendees&gt; &lt;name last='Parker'
            first='Peter'/&gt; &lt;name last='Barker' first='Bob'/&gt; &lt;name last='Parker'
            first='Peter'/&gt; &lt;/attendees&gt;
           return 

        
        fn:deep-equal($at/name[1], $at/name[2])
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18079">
      <description>Test case for fn:deep-equal</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $at := 
          &lt;attendees&gt; &lt;name last='Parker'
            first='Peter'/&gt; &lt;name last='Barker' first='Bob'/&gt; &lt;name last='Parker'
            first='Peter'/&gt; &lt;/attendees&gt;
           return 

        
        fn:deep-equal($at/name[1], $at/name[3])
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18085">
      <description>Test case for fn:deep-equal</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $at := 
          &lt;attendees&gt; &lt;name last='Parker'
            first='Peter'/&gt; &lt;name last='Barker' first='Bob'/&gt; &lt;name last='Parker'
            first='Peter'/&gt; &lt;/attendees&gt;
           return 

        
        fn:deep-equal($at/name[1], 'Peter Parker')
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18091">
      <description>Test case for fn:deep-equal</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:deep-equal(map{1:'a', 2:'b'}, map{2:'b', 1:'a'})
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18097">
      <description>Test case for fn:deep-equal</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:deep-equal([1, 2, 3], [1, 2, 3])
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18103">
      <description>Test case for fn:deep-equal</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:deep-equal((1, 2, 3), [1, 2, 3])
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18139">
      <description>Test case for fn:count</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $po := 
          &lt;PurchaseOrder&gt; &lt;line-item&gt;
         &lt;description&gt;Large widget&lt;/description&gt; &lt;price&gt;8.95&lt;/price&gt;
         &lt;quantity&gt;5.0&lt;/quantity&gt; &lt;/line-item&gt; &lt;line-item&gt;
         &lt;description&gt;Small widget&lt;/description&gt; &lt;price&gt;3.99&lt;/price&gt;
         &lt;quantity&gt;2.0&lt;/quantity&gt; &lt;/line-item&gt; &lt;line-item&gt;
         &lt;description&gt;Tiny widget&lt;/description&gt; &lt;price&gt;1.49&lt;/price&gt;a
         &lt;quantity&gt;805&lt;/quantity&gt; &lt;/line-item&gt;
         &lt;/PurchaseOrder&gt;
           return 

        
          let $item1 := $po/line-item[1]
          
           return 

        
          let $item2 := $po/line-item[2]
          
           return 

        
          let $seq1 := ($item1, $item2)
          
           return 

        
        fn:count($seq1)
      </test>
      <result>
         <assert-deep-eq>2</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18145">
      <description>Test case for fn:count</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $seq3 := ()
          
           return 

        
        fn:count($seq3)
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18151">
      <description>Test case for fn:count</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $seq2 := (98.5, 98.3, 98.9)
          
           return 

        
        fn:count($seq2)
      </test>
      <result>
         <assert-deep-eq>3</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18157">
      <description>Test case for fn:count</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $seq2 := (98.5, 98.3, 98.9)
          
           return 

        
        fn:count($seq2[. &gt; 100])
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18163">
      <description>Test case for fn:count</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:count([])
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18169">
      <description>Test case for fn:count</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:count([1,2,3])
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18273">
      <description>Test case for fn:avg</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $seq3 := (3, 4, 5)
          
           return 

        
        fn:avg($seq3)
      </test>
      <result>
         <assert-deep-eq>4.0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18284">
      <description>Test case for fn:avg</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $d1 := xs:yearMonthDuration("P20Y")
          
           return 

        
          let $d2 := xs:yearMonthDuration("P10M")
          
           return 

        
        fn:avg(($d1, $d2))
      </test>
      <result>
         <assert-deep-eq>xs:yearMonthDuration("P10Y5M")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18297">
      <description>Test case for fn:avg</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:avg(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18303">
      <description>Test case for fn:avg</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:avg((xs:float('INF'), xs:float('-INF')))
      </test>
      <result>
         <assert-deep-eq>xs:float('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18309">
      <description>Test case for fn:avg</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $seq3 := (3, 4, 5)
          
           return 

        
        fn:avg(($seq3, xs:float('NaN')))
      </test>
      <result>
         <assert-deep-eq>xs:float('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18532">
      <description>Test case for fn:max</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:max((3,4,5))
      </test>
      <result>
         <assert-deep-eq>5</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18538">
      <description>Test case for fn:max</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:max([3,4,5])
      </test>
      <result>
         <assert-deep-eq>5</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18546">
      <description>Test case for fn:max</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:max((xs:integer(5), xs:float(5.0), xs:double(0)))
      </test>
      <result>
         <assert-deep-eq>xs:double(5.0e0)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18559">
      <description>Test case for fn:max</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:max((fn:current-date(), xs:date("2100-01-01")))
      </test>
      <result>
         <assert-deep-eq>xs:date("2100-01-01")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18567">
      <description>Test case for fn:max</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:max(("a", "b", "c"))
      </test>
      <result>
         <assert-deep-eq>"c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18789">
      <description>Test case for fn:min</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:min((3,4,5))
      </test>
      <result>
         <assert-deep-eq>3</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18795">
      <description>Test case for fn:min</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:min([3,4,5])
      </test>
      <result>
         <assert-deep-eq>3</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18803">
      <description>Test case for fn:min</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:min((xs:integer(5), xs:float(5), xs:double(10)))
      </test>
      <result>
         <assert-deep-eq>xs:double(5.0e0)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18824">
      <description>Test case for fn:min</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:min((fn:current-date(), xs:date("1900-01-01")))
      </test>
      <result>
         <assert-deep-eq>xs:date("1900-01-01")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18832">
      <description>Test case for fn:min</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:min(("a", "b", "c"))
      </test>
      <result>
         <assert-deep-eq>"a"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18940">
      <description>Test case for fn:sum</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $d1 := xs:yearMonthDuration("P20Y")
          
           return 

        
          let $d2 := xs:yearMonthDuration("P10M")
          
           return 

        
        fn:sum(($d1, $d2))
      </test>
      <result>
         <assert-deep-eq>xs:yearMonthDuration("P20Y10M")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18946">
      <description>Test case for fn:sum</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $d1 := xs:yearMonthDuration("P20Y")
          
           return 

        
          let $d2 := xs:yearMonthDuration("P10M")
          
           return 

        
          let $seq1 := ($d1, $d2)
          
           return 

        
        fn:sum($seq1[. lt xs:yearMonthDuration('P3M')],
                  xs:yearMonthDuration('P0M'))
      </test>
      <result>
         <assert-deep-eq>xs:yearMonthDuration("P0M")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18952">
      <description>Test case for fn:sum</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $seq3 := (3, 4, 5)
          
           return 

        
        fn:sum($seq3)
      </test>
      <result>
         <assert-deep-eq>12</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18958">
      <description>Test case for fn:sum</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:sum(())
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18964">
      <description>Test case for fn:sum</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:sum((),())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18970">
      <description>Test case for fn:sum</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:sum((1 to 100)[. lt 0], 0) 
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18984">
      <description>Test case for fn:sum</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $d1 := xs:yearMonthDuration("P20Y")
          
           return 

        
          let $d2 := xs:yearMonthDuration("P10M")
          
           return 

        
        fn:sum(($d1, $d2), "ein Augenblick")
      </test>
      <result>
         <assert-deep-eq>xs:yearMonthDuration("P20Y10M")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e18998">
      <description>Test case for fn:sum</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:sum([1, 2, 3])
      </test>
      <result>
         <assert-deep-eq>6</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e19006">
      <description>Test case for fn:sum</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:sum([[1, 2], [3, 4]])
      </test>
      <result>
         <assert-deep-eq>10</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e19319">
      <description>Test case for fn:id</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $emp := 
          
        validate lax{    
          document{
            &lt;employee xml:id="ID21256"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
                      xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
               &lt;empnr xsi:type="xs:ID"&gt;E21256&lt;/empnr&gt;
               &lt;first&gt;John&lt;/first&gt;
               &lt;last&gt;Brown&lt;/last&gt;
            &lt;/employee&gt;
          }
        }
         
           return 

        
        $emp/id('ID21256')/name()
      </test>
      <result>
         <assert-deep-eq>"employee"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e19333">
      <description>Test case for fn:id</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $emp := 
          
        validate lax{    
          document{
            &lt;employee xml:id="ID21256"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
                      xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
               &lt;empnr xsi:type="xs:ID"&gt;E21256&lt;/empnr&gt;
               &lt;first&gt;John&lt;/first&gt;
               &lt;last&gt;Brown&lt;/last&gt;
            &lt;/employee&gt;
          }
        }
         
           return 

        
        $emp/id('E21256')/name()
      </test>
      <result>
         <assert-deep-eq>"empnr"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e19678">
      <description>Test case for fn:element-with-id</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $emp := 
          
         validate lax{    
          document{
            &lt;employee xml:id="ID21256"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
                      xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
               &lt;empnr xsi:type="xs:ID"&gt;E21256&lt;/empnr&gt;
               &lt;first&gt;John&lt;/first&gt;
               &lt;last&gt;Brown&lt;/last&gt;
            &lt;/employee&gt;
          }
        }
         
           return 

        
        $emp/fn:element-with-id('ID21256')/name()
      </test>
      <result>
         <assert-deep-eq>"employee"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e19692">
      <description>Test case for fn:element-with-id</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $emp := 
          
         validate lax{    
          document{
            &lt;employee xml:id="ID21256"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
                      xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
               &lt;empnr xsi:type="xs:ID"&gt;E21256&lt;/empnr&gt;
               &lt;first&gt;John&lt;/first&gt;
               &lt;last&gt;Brown&lt;/last&gt;
            &lt;/employee&gt;
          }
        }
         
           return 

        
        $emp/fn:element-with-id('E21256')/name()
      </test>
      <result>
         <assert-deep-eq>"employee"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e20000">
      <description>Test case for fn:idref</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $emp := 
          
      validate lax {  
        document {    
          &lt;employees xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
                     xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;  
            &lt;employee xml:id="ID21256"&gt;
               &lt;empnr xsi:type="xs:ID"&gt;E21256&lt;/empnr&gt;
               &lt;first&gt;Anil&lt;/first&gt;
               &lt;last&gt;Singh&lt;/last&gt;
               &lt;deputy xsi:type="xs:IDREF"&gt;E30561&lt;/deputy&gt;
            &lt;/employee&gt;
            &lt;employee xml:id="ID30561"&gt;
               &lt;empnr xsi:type="xs:ID"&gt;E30561&lt;/empnr&gt;
               &lt;first&gt;John&lt;/first&gt;
               &lt;last&gt;Brown&lt;/last&gt;
               &lt;manager xsi:type="xs:IDREF"&gt;ID21256&lt;/manager&gt;
            &lt;/employee&gt;
          &lt;/employees&gt;
        }
      }
         
           return 

        
        $emp/(element-with-id('ID21256')/@xml:id =&gt; fn:idref())/ancestor::employee/last =&gt; string()
      </test>
      <result>
         <assert-deep-eq>"Brown"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e20027">
      <description>Test case for fn:idref</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $emp := 
          
      validate lax {  
        document {    
          &lt;employees xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
                     xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;  
            &lt;employee xml:id="ID21256"&gt;
               &lt;empnr xsi:type="xs:ID"&gt;E21256&lt;/empnr&gt;
               &lt;first&gt;Anil&lt;/first&gt;
               &lt;last&gt;Singh&lt;/last&gt;
               &lt;deputy xsi:type="xs:IDREF"&gt;E30561&lt;/deputy&gt;
            &lt;/employee&gt;
            &lt;employee xml:id="ID30561"&gt;
               &lt;empnr xsi:type="xs:ID"&gt;E30561&lt;/empnr&gt;
               &lt;first&gt;John&lt;/first&gt;
               &lt;last&gt;Brown&lt;/last&gt;
               &lt;manager xsi:type="xs:IDREF"&gt;ID21256&lt;/manager&gt;
            &lt;/employee&gt;
          &lt;/employees&gt;
        }
      }
         
           return 

        
        $emp/(element-with-id('E30561')/empnr =&gt; fn:idref())/ancestor::employee/last =&gt; string()
      </test>
      <result>
         <assert-deep-eq>"Singh"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e22104">
      <description>Test case for fn:serialize</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $params := 
          
&lt;output:serialization-parameters xmlns:output="http://www.w3.org/2010/xslt-xquery-serialization"&gt;
  &lt;output:omit-xml-declaration value="yes"/&gt;
&lt;/output:serialization-parameters&gt;
         
           return 

        
          let $data := 
          
&lt;a b='3'/&gt;
         
           return 

        
        fn:serialize($data, $params)
      </test>
      <result>
         <assert-deep-eq>'&lt;a b="3"/&gt;'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e22116">
      <description>Test case for fn:serialize</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $data := 
          
&lt;a b='3'/&gt;
         
           return 

        
        fn:serialize($data, map{"method":"xml", "omit-xml-declaration":true()})
      </test>
      <result>
         <assert-deep-eq>'&lt;a b="3"/&gt;'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e22186">
      <description>Test case for fn:last</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        (1 to 20)[fn:last() - 1]
      </test>
      <result>
         <assert-deep-eq>19</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e22564">
      <description>Test case for fn:function-lookup</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        fn:function-lookup(xs:QName('fn:substring'), 2)('abcd',
                  2)
      </test>
      <result>
         <assert-deep-eq>'bcd'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e22633">
      <description>Test case for fn:function-name</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        fn:function-name(fn:substring#2)
      </test>
      <result>
         <assert-deep-eq>fn:QName("http://www.w3.org/2005/xpath-functions",
                  "fn:substring")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e22641">
      <description>Test case for fn:function-name</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        fn:function-name(function($node){count($node/*)})
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e22673">
      <description>Test case for fn:function-arity</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        fn:function-arity(fn:substring#2)
      </test>
      <result>
         <assert-deep-eq>2</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e22679">
      <description>Test case for fn:function-arity</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        fn:function-arity(function($node){name($node)})
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e22685">
      <description>Test case for fn:function-arity</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        let $initial := fn:substring(?, 1, 1) return
                  fn:function-arity($initial)
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e22737">
      <description>Test case for fn:for-each</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        fn:for-each(1 to 5, function($a) { $a * $a })
      </test>
      <result>
         <assert-deep-eq>(1, 4, 9, 16, 25)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e22743">
      <description>Test case for fn:for-each</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        fn:for-each(("john", "jane"),
                  fn:string-to-codepoints#1)
      </test>
      <result>
         <assert-deep-eq>(106, 111, 104, 110, 106, 97, 110, 101)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e22749">
      <description>Test case for fn:for-each</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        fn:for-each(("23", "29"), xs:int#1)
      </test>
      <result>
         <assert-deep-eq>(23, 29)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e22819">
      <description>Test case for fn:filter</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        fn:filter(1 to 10, function($a) {$a mod 2 = 0})
      </test>
      <result>
         <assert-deep-eq>(2, 4, 6, 8, 10)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e22825">
      <description>Test case for fn:filter</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        fn:filter((), fn:lang("en", ?))
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e22882">
      <description>Test case for fn:fold-left</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        fn:fold-left(1 to 5, 0, function($a, $b) { $a + $b
                  })
      </test>
      <result>
         <assert-deep-eq>15</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e22890">
      <description>Test case for fn:fold-left</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        fn:fold-left((2,3,5,7), 1, function($a, $b) { $a * $b
                  })
      </test>
      <result>
         <assert-deep-eq>210</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e22898">
      <description>Test case for fn:fold-left</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        fn:fold-left((true(), false(), false()), false(), function($a, $b) {
                  $a or $b })
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e22906">
      <description>Test case for fn:fold-left</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        fn:fold-left((true(), false(), false()), false(), function($a, $b) {
                  $a and $b })
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e22914">
      <description>Test case for fn:fold-left</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        fn:fold-left(1 to 5, (), function($a, $b) {($b,
                  $a)})
      </test>
      <result>
         <assert-deep-eq>(5,4,3,2,1)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e22922">
      <description>Test case for fn:fold-left</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        fn:fold-left(1 to 5, "", fn:concat(?, ".", ?))
      </test>
      <result>
         <assert-deep-eq>".1.2.3.4.5"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e22928">
      <description>Test case for fn:fold-left</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        fn:fold-left(1 to 5, "$zero", fn:concat("$f(", ?, ", ", ?, ")"))
      </test>
      <result>
         <assert-deep-eq>"$f($f($f($f($f($zero, 1), 2), 3), 4), 5)"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e22934">
      <description>Test case for fn:fold-left</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        fn:fold-left(1 to 5, map{}, function($map, $n) {map:put($map, $n, $n*2)})
      </test>
      <result>
         <assert-deep-eq>map{1:2, 2:4, 3:6, 4:8, 5:10}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e22999">
      <description>Test case for fn:fold-right</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        fn:fold-right(1 to 5, 0, function($a, $b) { $a + $b
                  })
      </test>
      <result>
         <assert-deep-eq>15</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e23007">
      <description>Test case for fn:fold-right</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        fn:fold-right(1 to 5, "", fn:concat(?, ".", ?))
      </test>
      <result>
         <assert-deep-eq>"1.2.3.4.5."</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e23013">
      <description>Test case for fn:fold-right</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        fn:fold-right(1 to 5, "$zero", concat("$f(", ?, ", ", ?,
                  ")"))
      </test>
      <result>
         <assert-deep-eq>"$f(1, $f(2, $f(3, $f(4, $f(5, $zero)))))"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e23059">
      <description>Test case for fn:for-each-pair</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        fn:for-each-pair(("a", "b", "c"), ("x", "y", "z"),
                  concat#2)
      </test>
      <result>
         <assert-deep-eq>("ax", "by", "cz")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e23066">
      <description>Test case for fn:for-each-pair</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        fn:for-each-pair(1 to 5, 1 to 5, function($a, $b){10*$a + $b})
      </test>
      <result>
         <assert-deep-eq>(11, 22, 33, 44, 55)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e23072">
      <description>Test case for fn:for-each-pair</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        let $s := 1 to 8 return fn:for-each-pair($s, tail($s), function($a, $b){$a*$b})
      </test>
      <result>
         <assert-deep-eq>(2, 6, 12, 20, 30, 42, 56)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e23275">
      <description>Test case for fn:sort</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        fn:sort((1, 4, 6, 5, 3))
      </test>
      <result>
         <assert-deep-eq>(1, 3, 4, 5, 6)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e23280">
      <description>Test case for fn:sort</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        fn:sort((1, -2, 5, 10, -10, 10, 8), (), fn:abs#1)
      </test>
      <result>
         <assert-deep-eq>(1, -2, 5, 8, 10, -10, 10)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e23362">
      <description>Test case for fn:apply</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        fn:apply(fn:concat#3, ["a", "b", "c"])
      </test>
      <result>
         <assert-deep-eq>"abc"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24148">
      <description>Test case for map:merge</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        map:merge(())
      </test>
      <result>
         <assert-deep-eq>map{}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24155">
      <description>Test case for map:merge</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        map:merge((map:entry(0, "no"), map:entry(1, "yes")))
      </test>
      <result>
         <assert-deep-eq>map{0:"no", 1:"yes"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24162">
      <description>Test case for map:merge</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:merge(($week, map{7:"Unbekannt"}))
      </test>
      <result>
         <assert-deep-eq>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:"Samstag", 7:"Unbekannt"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24175">
      <description>Test case for map:merge</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:merge(($week, map{6:"Sonnabend"}), map{"duplicates":"use-last"})
      </test>
      <result>
         <assert-deep-eq>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:"Sonnabend"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24188">
      <description>Test case for map:merge</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:merge(($week, map{6:"Sonnabend"}), map{"duplicates":"use-first"})
      </test>
      <result>
         <assert-deep-eq>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:"Samstag"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24201">
      <description>Test case for map:merge</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:merge(($week, map{6:"Sonnabend"}), map{"duplicates":"combine"})
      </test>
      <result>
         <assert-deep-eq>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:("Samstag", "Sonnabend")}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24255">
      <description>Test case for map:keys</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        map:keys(map{1:"yes", 2:"no"})
      </test>
      <result>
         <assert-permutation>(1,2)</assert-permutation>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24304">
      <description>Test case for map:contains</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:contains($week, 2)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24309">
      <description>Test case for map:contains</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:contains($week, 9)
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24314">
      <description>Test case for map:contains</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        map:contains(map{}, "xyz")
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24319">
      <description>Test case for map:contains</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        map:contains(map{"xyz":23}, "xyz")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24324">
      <description>Test case for map:contains</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        map:contains(map{"abc":23, "xyz":()}, "xyz")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24408">
      <description>Test case for map:get</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:get($week, 4)
      </test>
      <result>
         <assert-deep-eq>"Donnerstag"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24413">
      <description>Test case for map:get</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:get($week, 9)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24420">
      <description>Test case for map:get</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        map:get(map:entry(7,()), 7)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24530">
      <description>Test case for map:find</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $responses := [map{0:'no', 1:'yes'}, map{0:'non', 1:'oui'}, map{0:'nein', 1:('ja', 'doch')}]
          
           return 

        
        map:find($responses, 0)
      </test>
      <result>
         <assert-deep-eq>['no', 'non', 'nein']</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24535">
      <description>Test case for map:find</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $responses := [map{0:'no', 1:'yes'}, map{0:'non', 1:'oui'}, map{0:'nein', 1:('ja', 'doch')}]
          
           return 

        
        map:find($responses, 1)
      </test>
      <result>
         <assert-deep-eq>['yes', 'oui', ('ja', 'doch')]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24540">
      <description>Test case for map:find</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $responses := [map{0:'no', 1:'yes'}, map{0:'non', 1:'oui'}, map{0:'nein', 1:('ja', 'doch')}]
          
           return 

        
        map:find($responses, 2)
      </test>
      <result>
         <assert-deep-eq>[]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24547">
      <description>Test case for map:find</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $inventory := map{"name":"car", "id":"QZ123", "parts": [map{"name":"engine", "id":"YW678", "parts":[]}]}
          
           return 

        
        map:find($inventory, "parts")
      </test>
      <result>
         <assert-deep-eq>[[map{"name":"engine", "id":"YW678", "parts":[]}], []]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24650">
      <description>Test case for map:put</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:put($week, 6, "Sonnabend")
      </test>
      <result>
         <assert-deep-eq>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:"Sonnabend"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24655">
      <description>Test case for map:put</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:put($week, -1, "Unbekannt")
      </test>
      <result>
         <assert-deep-eq>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:"Samstag", -1:"Unbekannt"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24741">
      <description>Test case for map:entry</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        map:entry("M", "Monday")
      </test>
      <result>
         <assert-deep-eq>map{"M":"Monday"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24807">
      <description>Test case for map:remove</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",               3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:remove($week, 4)
      </test>
      <result>
         <assert-deep-eq>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 5:"Freitag",
                  6:"Samstag"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24812">
      <description>Test case for map:remove</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",               3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:remove($week, 23)
      </test>
      <result>
         <assert-deep-eq>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:"Samstag"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24817">
      <description>Test case for map:remove</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",               3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:remove($week, (0, 6 to 7))
      </test>
      <result>
         <assert-deep-eq>map{1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag", 5:"Freitag"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24822">
      <description>Test case for map:remove</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",               3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:remove($week, ())
      </test>
      <result>
         <assert-deep-eq>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag", 5:"Freitag",
                  6:"Samstag"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24873">
      <description>Test case for map:for-each</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        map:for-each(map{1:"yes", 2:"no"}, function($k,
                  $v){$k})
      </test>
      <result>
         <assert-permutation>(1,2)</assert-permutation>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24883">
      <description>Test case for map:for-each</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        distinct-values(map:for-each(map{1:"yes", 2:"no"}, function($k,
                  $v){$v}))
      </test>
      <result>
         <assert-permutation>("yes", "no")</assert-permutation>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24890">
      <description>Test case for map:for-each</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        map:merge(map:for-each(map{"a":1, "b":2}, function($k,
                  $v){map:entry($k, $v+1)}))
      </test>
      <result>
         <assert-deep-eq>map{"a":2, "b":3}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24943">
      <description>Test case for map:size</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        map:size(map{})
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e24948">
      <description>Test case for map:size</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        map:size(map{"true":1, "false":0})
      </test>
      <result>
         <assert-deep-eq>2</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e25082">
      <description>Test case for fn:collation-key</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $C := 'http://www.w3.org/2013/collation/UCA?strength=primary'
          
           return 

        
        map:merge((map{collation-key("A", $C):1}, map{collation-key("a",
                  $C):2}), map{"duplicates":"use-last"})(collation-key("A", $C))
      </test>
      <result>
         <assert-deep-eq>2</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e25090">
      <description>Test case for fn:collation-key</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ31" satisfied="true"/>
      <test>
          let $C := 'http://www.w3.org/2013/collation/UCA?strength=primary'
          
           return 

        
        let $M := map{collation-key("A", $C):1, collation-key("B", $C):2}
                  return $M(collation-key("a", $C))
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e25667">
      <description>Test case for fn:json-to-xml</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <modified by="Josh Spiegel" on="2016-10-11" change="Bug 29932"/>
      <environment ref="global"/>
      <test>
        json-to-xml('{"x": 1, "y": [3,4,5]}')
      </test>
      <result>
         <assert-xml><![CDATA[<map xmlns="http://www.w3.org/2005/xpath-functions"><number key="x">1</number><array key="y"><number>3</number><number>4</number><number>5</number></array></map>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fo-test-d3e25672">
      <description>Test case for fn:json-to-xml</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        json-to-xml('"abcd"', map{'liberal': false()})
      </test>
      <result>
         <assert-xml><![CDATA[<string xmlns="http://www.w3.org/2005/xpath-functions">abcd</string>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fo-test-d3e25677">
      <description>Test case for fn:json-to-xml</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <modified by="Josh Spiegel" on="2016-10-11" change="Bug 29932"/>
      <environment ref="global"/>
      <test>
        json-to-xml('{"x": "\\", "y": "\u0025"}')
      </test>
      <result>
         <assert-xml><![CDATA[<map xmlns="http://www.w3.org/2005/xpath-functions"><string key="x">\</string><string key="y">%</string></map>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fo-test-d3e25682">
      <description>Test case for fn:json-to-xml</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <modified by="Josh Spiegel" on="2016-10-11" change="Bug 29932"/>
      <environment ref="global"/>
      <test>
        json-to-xml('{"x": "\\", "y": "\u0025"}', map{'escape':
                  true()})
      </test>
      <result>
         <assert-xml><![CDATA[<map xmlns="http://www.w3.org/2005/xpath-functions"><string escaped="true" key="x">\\</string><string key="y">%</string></map>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fo-test-d3e26881">
      <description>Test case for fn:parse-json</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        parse-json('{"x":1, "y":[3,4,5]}')
      </test>
      <result>
         <assert-deep-eq>map{"x":1e0,"y":[3e0,4e0,5e0]}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e26886">
      <description>Test case for fn:parse-json</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        parse-json('"abcd"')
      </test>
      <result>
         <assert-deep-eq>"abcd"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e26891">
      <description>Test case for fn:parse-json</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        parse-json('{"x":"\\", "y":"\u0025"}')
      </test>
      <result>
         <assert-deep-eq>map{"x":"\","y":"%"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e26896">
      <description>Test case for fn:parse-json</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <modified by="Josh Spiegel" on="2016-10-11" change="Bug 28812"/>
      <environment ref="global"/>
      <test>
        parse-json('{"x":"\\", "y":"\u0025"}', map{'escape':true()})
      </test>
      <result>
         <assert-deep-eq>map{"x":"\\","y":"%"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e26901">
      <description>Test case for fn:parse-json</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        parse-json('{"x":"\\", "y":"\u0000"}')
      </test>
      <result>
         <assert-deep-eq>map{"x":"\","y":codepoints-to-string(65533)}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e26906">
      <description>Test case for fn:parse-json</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        parse-json('{"x":"\\", "y":"\u0000"}', map{'escape':true()})
      </test>
      <result>
         <assert-deep-eq>map{"x":"\\","y":"\u0000"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e26911">
      <description>Test case for fn:parse-json</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        parse-json('{"x":"\\", "y":"\u0000"}', map{'fallback':function($s){'['||$s||']'}})
      </test>
      <result>
         <assert-deep-eq>map{"x":"\","y":"[\u0000]"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27046">
      <description>Test case for array:size</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:size(["a", "b", "c"])
      </test>
      <result>
         <assert-deep-eq>3</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27051">
      <description>Test case for array:size</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:size(["a", ["b", "c"]])
      </test>
      <result>
         <assert-deep-eq>2</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27056">
      <description>Test case for array:size</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:size([ ])
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27061">
      <description>Test case for array:size</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:size([[ ]])
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27100">
      <description>Test case for array:get</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        ["a", "b", "c"] =&gt; array:get(2)
      </test>
      <result>
         <assert-deep-eq>"b"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27105">
      <description>Test case for array:get</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        ["a", ["b", "c"]] =&gt; array:get(2)
      </test>
      <result>
         <assert-deep-eq>["b", "c"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27167">
      <description>Test case for array:put</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:put(["a", "b", "c"], 2, "d")
      </test>
      <result>
         <assert-deep-eq>["a", "d", "c"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27172">
      <description>Test case for array:put</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:put(["a", "b", "c"], 2, ("d", "e"))
      </test>
      <result>
         <assert-deep-eq>["a", ("d", "e"), "c"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27177">
      <description>Test case for array:put</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:put(["a"], 1, ["d", "e"])
      </test>
      <result>
         <assert-deep-eq>[["d", "e"]]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27222">
      <description>Test case for array:append</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:append(["a", "b", "c"], "d")
      </test>
      <result>
         <assert-deep-eq>["a", "b", "c", "d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27227">
      <description>Test case for array:append</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:append(["a", "b", "c"], ("d", "e"))
      </test>
      <result>
         <assert-deep-eq>["a", "b", "c", ("d", "e")]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27232">
      <description>Test case for array:append</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:append(["a", "b", "c"], ["d", "e"])
      </test>
      <result>
         <assert-deep-eq>["a", "b", "c", ["d", "e"]]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27259">
      <description>Test case for array:join</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:join(())
      </test>
      <result>
         <assert-deep-eq>[ ]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27264">
      <description>Test case for array:join</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:join([1, 2, 3])
      </test>
      <result>
         <assert-deep-eq>[1, 2, 3]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27269">
      <description>Test case for array:join</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:join((["a", "b"], ["c", "d"]))
      </test>
      <result>
         <assert-deep-eq>["a", "b", "c", "d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27274">
      <description>Test case for array:join</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:join((["a", "b"], ["c", "d"], [ ]))
      </test>
      <result>
         <assert-deep-eq>["a", "b", "c", "d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27279">
      <description>Test case for array:join</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:join((["a", "b"], ["c", "d"], [["e", "f"]]))
      </test>
      <result>
         <assert-deep-eq>["a", "b", "c", "d", ["e", "f"]]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27370">
      <description>Test case for array:subarray</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:subarray(["a", "b", "c", "d"], 2)
      </test>
      <result>
         <assert-deep-eq>["b", "c", "d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27375">
      <description>Test case for array:subarray</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:subarray(["a", "b", "c", "d"], 5)
      </test>
      <result>
         <assert-deep-eq>[ ]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27380">
      <description>Test case for array:subarray</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:subarray(["a", "b", "c", "d"], 2, 0)
      </test>
      <result>
         <assert-deep-eq>[ ]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27385">
      <description>Test case for array:subarray</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:subarray(["a", "b", "c", "d"], 2, 1)
      </test>
      <result>
         <assert-deep-eq>["b"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27390">
      <description>Test case for array:subarray</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:subarray(["a", "b", "c", "d"], 2, 2)
      </test>
      <result>
         <assert-deep-eq>["b", "c"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27395">
      <description>Test case for array:subarray</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:subarray(["a", "b", "c", "d"], 5, 0)
      </test>
      <result>
         <assert-deep-eq>[ ]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27400">
      <description>Test case for array:subarray</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:subarray([ ], 1, 0)
      </test>
      <result>
         <assert-deep-eq>[ ]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27462">
      <description>Test case for array:remove</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:remove(["a", "b", "c", "d"], 1)
      </test>
      <result>
         <assert-deep-eq>["b", "c", "d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27467">
      <description>Test case for array:remove</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:remove(["a", "b", "c", "d"], 2)
      </test>
      <result>
         <assert-deep-eq>["a", "c", "d" ]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27472">
      <description>Test case for array:remove</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:remove(["a"], 1)
      </test>
      <result>
         <assert-deep-eq>[ ]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27477">
      <description>Test case for array:remove</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:remove(["a", "b", "c", "d"], 1 to 3)
      </test>
      <result>
         <assert-deep-eq>["d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27482">
      <description>Test case for array:remove</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:remove(["a", "b", "c", "d"], ())
      </test>
      <result>
         <assert-deep-eq>["a", "b", "c", "d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27557">
      <description>Test case for array:insert-before</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:insert-before(["a", "b", "c", "d"], 3, ("x", "y"))
      </test>
      <result>
         <assert-deep-eq>["a", "b", ("x", "y"), "c", "d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27562">
      <description>Test case for array:insert-before</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:insert-before(["a", "b", "c", "d"], 5, ("x", "y"))
      </test>
      <result>
         <assert-deep-eq>["a", "b", "c", "d", ("x", "y")]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27567">
      <description>Test case for array:insert-before</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:insert-before(["a", "b", "c", "d"], 3, ["x", "y"])
      </test>
      <result>
         <assert-deep-eq>["a", "b", ["x", "y"], "c", "d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27608">
      <description>Test case for array:head</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:head([5, 6, 7, 8])
      </test>
      <result>
         <assert-deep-eq>5</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27613">
      <description>Test case for array:head</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:head([["a", "b"], ["c", "d"]])
      </test>
      <result>
         <assert-deep-eq>["a", "b"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27618">
      <description>Test case for array:head</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:head([("a", "b"), ("c", "d")])
      </test>
      <result>
         <assert-deep-eq>"a", "b"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27656">
      <description>Test case for array:tail</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:tail([5, 6, 7, 8])
      </test>
      <result>
         <assert-deep-eq>[6, 7, 8]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27661">
      <description>Test case for array:tail</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:tail([5])
      </test>
      <result>
         <assert-deep-eq>[ ]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27688">
      <description>Test case for array:reverse</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:reverse(["a", "b", "c", "d"])
      </test>
      <result>
         <assert-deep-eq>["d", "c", "b", "a"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27693">
      <description>Test case for array:reverse</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:reverse([("a", "b"), ("c", "d")])
      </test>
      <result>
         <assert-deep-eq>[("c", "d"), ("a", "b")]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27698">
      <description>Test case for array:reverse</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:reverse([(1 to 5)])
      </test>
      <result>
         <assert-deep-eq>[(1, 2, 3, 4, 5)]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27703">
      <description>Test case for array:reverse</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:reverse([])
      </test>
      <result>
         <assert-deep-eq>[]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27741">
      <description>Test case for array:for-each</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        array:for-each(["A", "B", 1, 2], function($z) {$z instance of xs:integer})
      </test>
      <result>
         <assert-deep-eq>[false(), false(), true(), true()]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27746">
      <description>Test case for array:for-each</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        array:for-each(["the cat", "sat", "on the mat"], fn:tokenize#1)
      </test>
      <result>
         <assert-deep-eq>[("the", "cat"), "sat", ("on", "the", "mat")]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27790">
      <description>Test case for array:filter</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        array:filter(["A", "B", 1, 2], function($x) {$x instance of xs:integer})
      </test>
      <result>
         <assert-deep-eq>[1, 2]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27795">
      <description>Test case for array:filter</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        array:filter(["the cat", "sat", "on the mat"], function($s){fn:count(fn:tokenize($s)) gt 1})
      </test>
      <result>
         <assert-deep-eq>["the cat", "on the mat"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27800">
      <description>Test case for array:filter</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        array:filter(["A", "B", "", 0, 1], boolean#1)
      </test>
      <result>
         <assert-deep-eq>["A", "B", 1]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27855">
      <description>Test case for array:fold-left</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="global"/>
      <test>
        array:fold-left([true(), true(), false()], true(), function($x, $y){$x and $y})
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27865">
      <description>Test case for array:fold-left</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        array:fold-left([true(), true(), false()], false(), function($x, $y){$x or $y})
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27875">
      <description>Test case for array:fold-left</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        array:fold-left([1,2,3], [], function($x, $y){[$x, $y]})
      </test>
      <result>
         <assert-deep-eq>[[[[], 1], 2], 3]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27930">
      <description>Test case for array:fold-right</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        array:fold-right([true(), true(), false()], true(), function($x, $y){$x and $y})
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27940">
      <description>Test case for array:fold-right</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        array:fold-right([true(), true(), false()], false(), function($x, $y){$x or $y})
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27950">
      <description>Test case for array:fold-right</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        array:fold-right([1,2,3], [], function($x, $y){[$x, $y]})
      </test>
      <result>
         <assert-deep-eq>[1, [2, [3, []]]]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27984">
      <description>Test case for array:for-each-pair</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        array:for-each-pair(["A", "B", "C"], [1, 2, 3], function($x, $y) { array {$x, $y}})
      </test>
      <result>
         <assert-deep-eq>[["A", 1], ["B", 2], ["C", 3]]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e27989">
      <description>Test case for array:for-each-pair</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        let $A := ["A", "B", "C", "D"] return array:for-each-pair($A, array:tail($A), concat#2)
      </test>
      <result>
         <assert-deep-eq>["AB", "BC", "CD"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e28160">
      <description>Test case for array:sort</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:sort([1, 4, 6, 5, 3])
      </test>
      <result>
         <assert-deep-eq>[1, 3, 4, 5, 6]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e28165">
      <description>Test case for array:sort</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>
        array:sort([1, -2, 5, 10, -10, 10, 8], (), fn:abs#1)
      </test>
      <result>
         <assert-deep-eq>[1, -2, 5, 8, 10, -10, 10]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e28170">
      <description>Test case for array:sort</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:sort([(1,0), (1,1), (0,1), (0,0)])
      </test>
      <result>
         <assert-deep-eq>[(0,0), (0,1), (1,0), (1,1)]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e28232">
      <description>Test case for array:flatten</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:flatten([1, 4, 6, 5, 3])
      </test>
      <result>
         <assert-deep-eq>(1, 4, 6, 5, 3)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e28237">
      <description>Test case for array:flatten</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:flatten(([1, 2, 5], [[10, 11], 12], [], 13))
      </test>
      <result>
         <assert-deep-eq>(1, 2, 5, 10, 11, 12, 13)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-d3e28242">
      <description>Test case for array:flatten</description>
      <created by="generate-qt3-test-set.xsl" on="2016-09-26"/>
      <environment ref="global"/>
      <test>
        array:flatten([(1,0), (1,1), (0,1), (0,0)])
      </test>
      <result>
         <assert-deep-eq>(1, 0, 1, 1, 0, 1, 0, 0)</assert-deep-eq>
      </result>
   </test-case>
</test-set>
