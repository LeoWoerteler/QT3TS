<?xml version="1.0" encoding="utf-8"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" xmlns:dty="http://www.datypic.com" name="app-Walmsley">
   <description>XQuery 3.1 examples from Priscilla Walmsley's XQuery Book</description>
   <environment name="all">
      <namespace prefix="array" uri="http://www.w3.org/2005/xpath-functions/array"/>
      <namespace prefix="map" uri="http://www.w3.org/2005/xpath-functions/map"/>
      <!-- Modified by Debbie Lockett on 2016-04-21, to add and use static-base-uri, in response to
         bug 29582 -->
      <static-base-uri uri="http://www.w3.org/2010/09/qt-fots-catalog/Walmsley/" />
      <source role="." file="Walmsley/catalog.xml" uri="http://www.w3.org/2010/09/qt-fots-catalog/Walmsley/catalog.xml"/>
      <source file="Walmsley/render.xsl" uri="http://www.w3.org/2010/09/qt-fots-catalog/Walmsley/render.xsl"/>
      <resource file="Walmsley/product.json" media-type="application/json"
         uri="http://www.w3.org/2010/09/qt-fots-catalog/Walmsley/product.json"/>
   </environment>
   <dependency type="spec" value="XQ31+"/>
   <test-case name="d1e11215" covers="fn-sort">
      <description>7-13</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[sort(doc("catalog.xml")//product/number)]]></test>
      <result>
         <assert-xml><![CDATA[<number
         >443</number><number
         >557</number><number
         >563</number><number
         >784</number>]]></assert-xml>
      </result>
   </test-case>
   <test-case name="d1e13012" covers="arrow-operator">
      <description>8-60</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 'abc'=>upper-case()]]></test>
      <result>
         <assert-deep-eq>"ABC"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e13030" covers="arrow-operator">
      <description>8-64</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 'abc'=>substring(1,2)]]></test>
      <result>
         <assert-deep-eq>"ab"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e13048" covers="arrow-operator">
      <description>8-20</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[let $string := 'aa bb cc' return 
 $string=>replace('a','b')=>normalize-space()=>tokenize("\s")]]></test>
      <result>
         <assert-deep-eq>("bb","bb","cc")</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e20420" covers="version-decl-31">
      <description>12-3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 xquery version "3.1" encoding "UTF-8"; "inserted for testing prolog only examples"]]></test>
      <result>
         <assert-deep-eq>"inserted for testing prolog only examples"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e40951" covers="map-constructor fn-deep-equal">
      <description>Example 24-1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 deep-equal(map {
  "ACC" : "Accessories",
  "WMN" : "Women's",
  "MEN" : "Men's"
},map {
  "ACC" : "Accessories",
  "WMN" : "Women's",
  "MEN" : "Men's"
})]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e40984" covers="map-constructor fn-deep-equal">
      <description>Example 24-2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
deep-equal( map {
    "ACC": map {
              "name": "Accessories",
              "code": 300 } ,
    "WMN": map {
              "name": "Women's",
              "code": 310 } ,
    "MEN": map {
              "name": "Men's",
              "code": 320 } 
    },map {
    "ACC": map {
              "name": "Accessories",
              "code": 300 } ,
    "WMN": map {
              "name": "Women's",
              "code": 310 } ,
    "MEN": map {
              "name": "Men's",
              "code": 320 } 
    })]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e41029" covers="map-merge map-constructor fn-deep-equal">
      <description>Example 24-3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
deep-equal(map:merge(for $p in doc("catalog.xml")//product
return map:entry(string($p/number), string($p/name))),
map {"557":"Fleece Pullover",
"563":"Floppy Sun Hat",
"443":"Deluxe Travel Bag",
"784":"Cotton Dress Shirt"})
]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e41041" covers="map-constructor">
      <description>Example 24-4</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $deptnames := map {
  "ACC" : "Accessories",
  "WMN" : "Women's",
  "MEN" : "Men's"
};
declare variable $deptinfo := map {
  "ACC": map {
            "deptname": "Accessories",
            "deptnum": 300 } ,
  "WMN": map {
            "deptname": "Women's",
            "deptnum": 310 } ,
  "MEN": map {
            "deptname": "Men's",
            "deptnum": 320 } 
}; "inserted for testing prolog only examples"]]></test>
      <result>
         <assert-deep-eq>"inserted for testing prolog only examples"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41054" covers="map-get">
      <description>24-16</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $deptnames := map {
  "ACC" : "Accessories",
  "WMN" : "Women's",
  "MEN" : "Men's"
};
 map:get($deptnames, "ACC")]]></test>
      <result>
         <assert-deep-eq>"Accessories"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41054b" covers="map-constructor">
      <description>24-16b</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Michael Kay" on="2015-11-27" change="remove HOF dependency in assertions"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $deptnames := map {
  "ACC" : "Accessories",
  "WMN" : "Women's",
  "MEN" : "Men's"
};
 $deptnames?("ACC")]]></test>
      <result>
         <assert-deep-eq>"Accessories"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41094" covers="map-constructor">
      <description>Example 24-5</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Michael Kay" on="2015-11-27" change="remove HOF dependency"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $deptnames := map {
  "ACC" : "Accessories",
  "WMN" : "Women's",
  "MEN" : "Men's"
};
for $prod in doc("catalog.xml")//product
return <product num="{$prod/number}" 
                dept-name="{$deptnames?($prod/@dept)}"/>]]></test>
      <result>
         <assert-xml><![CDATA[<product num="557"
         dept-name="Women's"/><product num="563"
         dept-name="Accessories"/><product num="443"
         dept-name="Accessories"/><product num="784"
         dept-name="Men's"/>]]></assert-xml>
      </result>
   </test-case>
   <test-case name="d1e41148" covers="map-constructor">
      <description>Example 24-6</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Michael Kay" on="2015-11-27" change="remove HOF dependency"/>
      <environment ref="all"/>
      <test><![CDATA[
declare variable $deptinfo := map {
  "ACC": map {
            "deptname": "Accessories",
            "deptnum": 300 } ,
  "WMN": map {
            "deptname": "Women's",
            "deptnum": 310 } ,
  "MEN": map {
            "deptname": "Men's",
            "deptnum": 320 } 
};
for $prod in doc("catalog.xml")//product
return <product num="{$prod/number}"
                dept-name="{$deptinfo?($prod/@dept)?("deptname")}"
                dept-code="{$deptinfo?($prod/@dept)?("deptnum")}"/>]]></test>
      <result>
         <assert-xml><![CDATA[<product num="557"
         dept-name="Women's" dept-code="310"/><product num="563"
         dept-name="Accessories" dept-code="300"/><product num="443"
         dept-name="Accessories" dept-code="300"/><product num="784"
         dept-name="Men's" dept-code="320"/>]]></assert-xml>
      </result>
   </test-case>
   <test-case name="d1e41173" covers="postfix-lookup">
      <description>24-9</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $deptnames := map {
  "ACC" : "Accessories",
  "WMN" : "Women's",
  "MEN" : "Men's"
};
 $deptnames?("ACC")]]></test>
      <result>
         <assert-deep-eq>"Accessories"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41180" covers="postfix-lookup">
      <description>24-10</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $deptnames := map {
  "ACC" : "Accessories",
  "WMN" : "Women's",
  "MEN" : "Men's"
};
 $deptnames?("ACC","MEN")]]></test>
      <result>
         <assert-deep-eq>("Accessories","Men's")</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41190" covers="map-constructor">
      <description>24-11</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Michael Kay" on="2015-11-27" change="remove HOF dependency"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $deptnames := map {
  "ACC" : "Accessories",
  "WMN" : "Women's",
  "MEN" : "Men's"
};
 for $d in ("ACC","MEN") return $deptnames?($d)]]></test>
      <result>
         <assert-deep-eq>("Accessories","Men's")</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41194" covers="postfix-lookup">
      <description>24-12</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
declare variable $deptnames := map {
  "ACC" : "Accessories",
  "WMN" : "Women's",
  "MEN" : "Men's"
};
 $deptnames?(doc("catalog.xml")//@dept)]]></test>
      <result>
         <assert-deep-eq>("Women's","Accessories","Accessories","Men's")</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41194b" covers="postfix-lookup">
      <description>24-12b</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
declare variable $deptnames := map {
  "ACC" : "Accessories",
  "WMN" : "Women's",
  "MEN" : "Men's"
};
 $deptnames?*]]></test>
      <result>
         <assert-permutation>("Accessories","Women's","Men's")</assert-permutation> 
      </result>
   </test-case>
   <test-case name="d1e41213" covers="postfix-lookup">
      <description>24-13</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $map-with-integer-keys := map{ 10:"a", 20:"b"}; $map-with-integer-keys?20]]></test>
      <result>
         <assert-deep-eq>"b"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41225" covers="postfix-lookup">
      <description>24-14</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $deptnames := map {
  "ACC" : "Accessories",
  "WMN" : "Women's",
  "MEN" : "Men's"
};
 $deptnames?ACC]]></test>
      <result>
         <assert-deep-eq>"Accessories"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41255" covers="postfix-lookup">
      <description>Example 24-7</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
declare variable $deptinfo := map {
  "ACC": map {
            "deptname": "Accessories",
            "deptnum": 300 } ,
  "WMN": map {
            "deptname": "Women's",
            "deptnum": 310 } ,
  "MEN": map {
            "deptname": "Men's",
            "deptnum": 320 } 
};
for $prod in doc("catalog.xml")//product
return <product num="{$prod/number}"
                dept-name="{$deptinfo?($prod/@dept)?deptname}"
                dept-code="{$deptinfo?($prod/@dept)?deptnum}"/>]]></test>
      <result>
         <assert-xml><![CDATA[<product num="557"
         dept-name="Women's" dept-code="310"/><product num="563"
         dept-name="Accessories" dept-code="300"/><product num="443"
         dept-name="Accessories" dept-code="300"/><product num="784"
         dept-name="Men's" dept-code="320"/>]]></assert-xml>
      </result>
   </test-case>
   <test-case name="d1e41271" covers="postfix-lookup unary-lookup">
      <description>24-16</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
         declare variable $deptinfo := map {
  "ACC": map {
            "deptname": "Accessories",
            "deptnum": 300 } ,
  "WMN": map {
            "deptname": "Women's",
            "deptnum": 310 } ,
  "MEN": map {
            "deptname": "Men's",
            "deptnum": 320 } 
};
deep-equal( $deptinfo?*[?deptname = "Accessories"],
map { "deptname": "Accessories",
            "deptnum": 300 })
]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e41301" covers="postfix-lookup unary-lookup">
      <description>24-17</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
         declare variable $deptinfo := map {
  "ACC": map {
            "deptname": "Accessories",
            "deptnum": 300 } ,
  "WMN": map {
            "deptname": "Women's",
            "deptnum": 310 } ,
  "MEN": map {
            "deptname": "Men's",
            "deptnum": 320 } 
};
 $deptinfo?*[?deptname = "Accessories"]?deptnum]]></test>
      <result>
         <assert-deep-eq>300</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41301a" covers="map-size">
      <description>24-17a</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $deptnames := map {
  "ACC" : "Accessories",
  "WMN" : "Women's",
  "MEN" : "Men's"
};
 map:size($deptnames)]]></test>
      <result>
         <assert-deep-eq>3</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41301b" covers="map-contains">
      <description>24-17b</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $deptnames := map {
  "ACC" : "Accessories",
  "WMN" : "Women's",
  "MEN" : "Men's"
};
 map:contains($deptnames,"ACC")]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e41301c" covers="map-keys">
      <description>24-17c</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $deptnames := map {
  "ACC" : "Accessories",
  "WMN" : "Women's",
  "MEN" : "Men's"
};
 map:keys($deptnames)]]></test>
      <result>
         <assert-permutation>("ACC","MEN","WMN")</assert-permutation>
      </result>
   </test-case>
   <test-case name="d1e41301d" covers="map-put">
      <description>24-17d</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $deptnames := map {
  "ACC" : "Accessories",
  "WMN" : "Women's",
  "MEN" : "Men's"
};
deep-equal(map:put($deptnames,"SHO","Shoes"),
map {
  "ACC" : "Accessories",
  "WMN" : "Women's",
  "MEN" : "Men's",
  "SHO" : "Shoes"
}
)]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e41301e" covers="map-put">
      <description>24-17e</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Josh Spiegel" on="2015-07-01" change="Fixed typo: trailing comma in map constructor"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $deptnames := map {
  "ACC" : "Accessories",
  "WMN" : "Women's",
  "MEN" : "Men's"
};
deep-equal(map:put($deptnames,"ACC","Other"),
map {
  "ACC" : "Other",
  "WMN" : "Women's",
  "MEN" : "Men's"
}
)]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e41301f" covers="map-remove">
      <description>24-17f</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Josh Spiegel" on="2015-07-01" change="Fixed typo: trailing comma in map constructor"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $deptnames := map {
  "ACC" : "Accessories",
  "WMN" : "Women's",
  "MEN" : "Men's"
};
deep-equal(map:remove($deptnames,"ACC"),
map {
  "WMN" : "Women's",
  "MEN" : "Men's"
}
)]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e41517" covers="map-for-each">
      <description>Example 24-8</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
declare variable $deptnames := map {
  "ACC" : "Accessories",
  "WMN" : "Women's",
  "MEN" : "Men's"
};
 let $f := function($k,$v) 
  {concat('Key: ',$k,', value: ',$v)}
return map:for-each($deptnames,$f)]]></test>
      <result>
         <assert-permutation>("Key: ACC, value: Accessories",
"Key: WMN, value: Women's",
"Key: MEN, value: Men's")</assert-permutation> 
      </result>
   </test-case>
   <test-case name="d1e41255b" covers="map-general">
      <description>Example x</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
declare variable $deptinfo := map {
  "ACC": map {
            "deptname": "Accessories",
            "deptnum": 300 } ,
  "WMN": map {
            "deptname": "Women's",
            "deptnum": 310 } ,
  "MEN": map {
            "deptname": "Men's",
            "deptnum": 320 } 
};
$deptinfo instance of map(xs:string,map(xs:string,xs:anyAtomicType)) ]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e41255c" covers="map-general">
      <description>Example xc</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Michael Kay" on="2015-11-27" change="add HOF dependency"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
declare variable $deptinfo := map {
  "ACC": map {
            "deptname": "Accessories",
            "deptnum": 300 } ,
  "WMN": map {
            "deptname": "Women's",
            "deptnum": 310 } ,
  "MEN": map {
            "deptname": "Men's",
            "deptnum": 320 } 
};
$deptinfo instance of function(*) ]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e41255d" covers="map-general">
      <description>Example xd</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
declare variable $deptinfo := map {
  "ACC": map {
            "deptname": "Accessories",
            "deptnum": 300 } ,
  "WMN": map {
            "deptname": "Women's",
            "deptnum": 310 } ,
  "MEN": map {
            "deptname": "Men's",
            "deptnum": 320 } 
};
$deptinfo instance of function(xs:anyAtomicType) as item()* ]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e41255e" covers="map-general">
      <description>Example xe</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
declare variable $deptinfo := map {
  "ACC": map {
            "deptname": "Accessories",
            "deptnum": 300 } ,
  "WMN": map {
            "deptname": "Women's",
            "deptnum": 310 } ,
  "MEN": map {
            "deptname": "Men's",
            "deptnum": 320 } 
};
$deptinfo instance of item() ]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e41590" covers="map-general">
      <description>Example 24-9</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare function local:large-keys
  ($maparg as map(xs:integer,item()*))as xs:integer* {
   map:keys($maparg)[. > 50]
}; 
local:large-keys(map {10:"a",55:"b",60:"c"})]]></test>
      <result>
         <assert-permutation>55,60</assert-permutation>
      </result>
   </test-case>
   <test-case name="d1e41624" covers="array-square-constructor">
      <description>24-21</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 [ "a", "b", "c" ]]]></test>
      <result>
         <assert-deep-eq>[ "a", "b", "c" ]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41628" covers="array-curly-constructor">
      <description>24-22</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 array { "a", "b", "c" }]]></test>
      <result>
         <assert-deep-eq>[ "a", "b", "c" ]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41635" covers="array-general">
      <description>24-23</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 [//product,( "a", "b", "c"),"d"]]]></test>
      <result>
         <assert>array:size($result) eq 3</assert>
      </result>
   </test-case>
   <test-case name="d1e41648" covers="array-general">
      <description>24-24</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 array { //product,( "a", "b", "c"),"d"}]]></test>
      <result>
         <assert>array:size($result) eq 8</assert>
      </result>
   </test-case>
   <test-case name="d1e41655" covers="array-general">
      <description>24-25</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
declare variable $myitems := 3;
 [$myitems, doc("catalog.xml")//product, 
  12, xs:date('2015-01-15'), <foo>bar</foo>]]]></test>
      <result>
         <assert>array:size($result) eq 5</assert> 
      </result>
   </test-case>
   <test-case name="d1e41659" covers="array-curly-constructor">
      <description>24-26</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 array {["a", "b", "c"], "d" }]]></test>
      <result>
         <assert-deep-eq>[["a", "b", "c"], "d" ]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41663" covers="array-square-constructor">
      <description>24-27</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 [["a", "b", "c"], "d" ]]]></test>
      <result>
         <assert-deep-eq>[["a", "b", "c"], "d" ]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41678" covers="array-general">
      <description>24-28</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 [ ("a", "b", "c"), "d" ]]]></test>
      <result>
         <assert-deep-eq>[ ("a", "b", "c"), "d" ]</assert-deep-eq> 
      </result>
   </test-case>
   <test-case name="d1e41686" covers="array-general">
      <description>24-30</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 ( ["a", "b", "c"], "d" )]]></test>
      <result>
         <assert-deep-eq>["a", "b", "c"], "d"</assert-deep-eq> 
      </result>
   </test-case>
   <test-case name="d1e41709" covers="array-get">
      <description>Example 24-10</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
declare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; 
array:get($array-of-ints, 2)]]></test>
      <result>
         <assert-deep-eq>20</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41709b" covers="array-general">
      <description>Example 24-10b</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Michael Kay" on="2015-11-27" change="remove HOF dependency"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
declare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; 
$array-of-ints?2]]></test>
      <result>
         <assert-deep-eq>20</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41709c" covers="array-general">
      <description>Example 24-10c</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Michael Kay" on="2015-11-27" change="remove HOF dependency"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
declare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; 
let $pos := 2 return $array-of-ints?($pos)]]></test>
      <result>
         <assert-deep-eq>20</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41709d" covers="array-general">
      <description>Example 24-10d</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Michael Kay" on="2015-11-27" change="remove HOF dependency"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
declare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; 
$array-of-arrays?2?1]]></test>
      <result>
         <assert-deep-eq>"d"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41791" covers="postfix-lookup">
      <description>24-32</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
 $array-of-ints?(2)]]></test>
      <result>
         <assert-deep-eq>20</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41795" covers="postfix-lookup">
      <description>24-33</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
 $array-of-ints?(2,3)]]></test>
      <result>
         <assert-deep-eq>20,30</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41799" covers="array-general">
      <description>24-34</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Michael Kay" on="2015-11-27" change="remove HOF dependency"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
 for $i in (2,3) return $array-of-ints?($i)]]></test>
      <result>
         <assert-deep-eq>20,30</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41803" covers="postfix-lookup">
      <description>24-35</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
 $array-of-ints?(1 to 2)]]></test>
      <result>
         <assert-deep-eq>10,20</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41803b" covers="postfix-lookup">
      <description>24-35b</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
 $array-of-ints?2]]></test>
      <result>
         <assert-deep-eq>20</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41803c" covers="postfix-lookup">
      <description>24-35c</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
 $array-of-ints?*]]></test>
      <result>
         <assert-deep-eq>10,20,30</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41709e" covers="postfix-lookup">
      <description>Example 24-10e</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
declare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; 
$array-of-arrays?2?1]]></test>
      <result>
         <assert-deep-eq>"d"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41709f" covers="postfix-lookup">
      <description>Example 24-10f</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
declare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; 
$array-of-arrays?*]]></test>
      <result>
         <assert-deep-eq>["a","b","c"], ["d","e","f"]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41709g" covers="unary-lookup">
      <description>Example 24-10g</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
declare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; 
$array-of-arrays?*[?2 = "b"]]]></test>
      <result>
         <assert-deep-eq>["a","b","c"]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41709h" covers="array-size">
      <description>Example 24-10h</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
declare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; 
array:size($array-of-ints)]]></test>
      <result>
         <assert-deep-eq>3</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41709i" covers="array-head">
      <description>Example 24-10i</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
declare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; 
array:head($array-of-ints)]]></test>
      <result>
         <assert-deep-eq>10</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41709j" covers="array-tail">
      <description>Example 24-10j</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
declare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; 
array:tail($array-of-ints)]]></test>
      <result>
         <assert-deep-eq>[20,30]</assert-deep-eq> 
      </result>
   </test-case>
   <test-case name="d1e41709k" covers="array-append">
      <description>Example 24-10k</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
declare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; 
array:append($array-of-ints,40)]]></test>
      <result>
         <assert-deep-eq>[10,20,30,40]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41709l" covers="array-insert-before">
      <description>Example 24-10l</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
declare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; 
 array:insert-before($array-of-ints,2,40)]]></test>
      <result>
         <assert-deep-eq>[10,40,20,30]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41709m" covers="array-remove">
      <description>Example 24-10m</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
declare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; 
array:remove($array-of-ints,2)]]></test>
      <result>
         <assert-deep-eq>[10,30]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41709n" covers="array-subarray">
      <description>Example 24-10n</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
declare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; 
array:subarray($array-of-ints,2,2)]]></test>
      <result>
         <assert-deep-eq>[20,30]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41709o" covers="array-filter">
      <description>Example 24-10o</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
declare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; 
array:filter($array-of-ints,function($n) {$n > 15})]]></test>
      <result>
         <assert-deep-eq>[20,30]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41709p" covers="array-flatten">
      <description>Example 24-10p</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
declare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; 
array:flatten($array-of-arrays)]]></test>
      <result>
         <assert-deep-eq>"a","b","c","d","e","f"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41709q" covers="array-join">
      <description>Example 24-10q</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
declare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; 
array:join(($array-of-ints,["a","b","c"]))]]></test>
      <result>
         <assert-deep-eq>[10,20,30,"a","b","c"]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41709r" covers="array-sort">
      <description>Example 24-10r</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Tim Mills" on="2016-08-18" change="See Bug 29722"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
declare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; 
array:sort([6,2,-4],(),abs#1)]]></test>
      <result>
         <assert-deep-eq>[2,-4,6]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41709s" covers="array-reverse">
      <description>Example 24-10s</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
declare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; 
array:reverse($array-of-ints)]]></test>
      <result>
         <assert-deep-eq>[30,20,10]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e41709t" covers="array-general">
      <description>Example 24-10t</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
declare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; 
$array-of-ints instance of array(xs:integer)]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e41709u" covers="array-general">
      <description>Example 24-10u</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
declare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; 
$array-of-arrays instance of array(array(xs:string))]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e41709v" covers="array-general">
      <description>Example 24-10v</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Michael Kay" on="2015-11-27" change="add HOF dependency"/>
      <environment ref="all"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
declare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; 
$array-of-arrays instance of function(*) ]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e41709w" covers="array-general">
      <description>Example 24-10w</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
declare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; 
$array-of-arrays instance of function(xs:integer) as item()* ]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e41709x" covers="array-general">
      <description>Example 24-10x</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare variable $array-of-ints := [10,20,30];
declare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; 
$array-of-arrays instance of item() ]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e42207" covers="array-general">
      <description>Example 24-11</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 declare function local:larger-values
  ($arrayarg as array(xs:integer))as xs:integer* {
   array:flatten($arrayarg)[. > 15]
}; 
local:larger-values([10,20,30])]]></test>
      <result>
         <assert-deep-eq>20,30</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e42340" covers="fn-json-doc">
      <description>24-38</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
deep-equal(json-doc("product.json"), map {
   "number": xs:double(557),
   "name": "Fleece Pullover",
   "colorChoices": ["navy", "black"],
   "is-current": true(),
   "other": ()
})]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e42362" covers="map-constructor">
      <description>24-39</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization"; 
declare option output:method "json";
map {
   "number": 557,
   "properties": <props>
                   <length>31</length>
                   <height>12</height>
                 </props>
}]]></test>
      <result>
         <assert-type>map(*)</assert-type>
      </result>
   </test-case>
   <test-case name="d1e48503" covers="array-append">
      <description>array:append row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","def","ghi"];
 array:append($array1,"jkl")]]></test>
      <result>
         <assert-deep-eq>["abc","def","ghi","jkl"]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e48514" covers="array-append">
      <description>array:append row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","def","ghi"];
 array:append($array1,("jkl","mno"))]]></test>
      <result>
         <assert-deep-eq>["abc","def","ghi",("jkl","mno")]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e48525" covers="array-append">
      <description>array:append row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","def","ghi"];
 array:append(array:append($array1,"jkl"),"mno")]]></test>
      <result>
         <assert-deep-eq>["abc","def","ghi","jkl","mno"]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e48536" covers="array-append">
      <description>array:append row 4</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","def","ghi"];
 array:append($array1,["jkl","mno"])]]></test>
      <result>
         <assert-deep-eq>["abc","def","ghi",["jkl","mno"]]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e48547" covers="array-append">
      <description>array:append row 5</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","def","ghi"];
 array:append($array1,())]]></test>
      <result>
         <assert-deep-eq>["abc","def","ghi",()]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e48617" covers="fn-apply">
      <description>A-12</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 let $f := upper-case#1
return apply($f,["a"])]]></test>
      <result>
         <assert-deep-eq>"A"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e48676" covers="fn-apply">
      <description>apply row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 apply(substring#3,["sometext",2,4])]]></test>
      <result>
         <assert-deep-eq>"omet"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e48687" covers="fn-apply">
      <description>apply row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 apply(max#1,[(1,2,3)])]]></test>
      <result>
         <assert-deep-eq>3</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e48698" covers="fn-apply">
      <description>apply row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 apply(concat#3,["a","b","c"])]]></test>
      <result>
         <assert-deep-eq>"abc"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e48709" covers="fn-apply">
      <description>apply row 4</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 apply(upper-case#1,['a','b'])]]></test>
      <result>
         <error code="FOAP0001"/>
      </result>
   </test-case>
   <test-case name="d1e51544" covers="map-contains">
      <description>map:contains row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second", 3:"third",4:()};
declare variable $map2 := map {};
 map:contains($map1, 1)]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e51555" covers="map-contains">
      <description>map:contains row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second", 3:"third",4:()};
declare variable $map2 := map {};
 map:contains($map1, 4)]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e51565" covers="map-contains">
      <description>map:contains row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second", 3:"third",4:()};
declare variable $map2 := map {};
 map:contains($map1, 9)]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   <test-case name="d1e51576" covers="map-contains">
      <description>map:contains row 4</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second", 3:"third",4:()};
declare variable $map2 := map {};
 map:contains($map1, "1")]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   <test-case name="d1e51592" covers="map-contains">
      <description>map:contains row 5</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second", 3:"third",4:()};
declare variable $map2 := map {};
 map:contains($map2, 1)]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   <test-case name="d1e51729" covers="fn-contains-token">
      <description>contains-token row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 contains-token("a b c", "c")]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e51740" covers="fn-contains-token">
      <description>contains-token row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 contains-token("a b c", " c ")]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e51751" covers="fn-contains-token">
      <description>contains-token row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 contains-token( ("a b c","d e f"), "c")]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e51762" covers="fn-contains-token">
      <description>contains-token row 4</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 contains-token( "a, b, c", "b")]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   <test-case name="d1e51773" covers="fn-contains-token">
      <description>contains-token row 5</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 contains-token( "a b c", "b c")]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   <test-case name="d1e55090" covers="map-entry">
      <description>map:entry row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
deep-equal( map:entry(1,"first"),
map {1:"first"}
)]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e55101" covers="map-entry">
      <description>map:entry row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
deep-equal(  map:merge( ($map1, map:entry(3, "third")) ),
  map {1:"first", 2:"second", 3:"third"}
)]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e55112" covers="map-entry">
      <description>map:entry row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
deep-equal(
 map:merge( (map:entry(1, "first"), map:entry(2, "second")) ),
 map {1:"first", 2:"second"}
 )]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e55123" covers="map-entry">
      <description>map:entry row 4</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
         deep-equal(
 map:merge(for $p in doc("catalog.xml")//product
return map:entry(string($p/number), string($p/name))),
  map {"557":"Fleece Pullover", "563":"Floppy Sun Hat", "443":"Deluxe Travel Bag", "784":"Cotton Dress Shirt"}
 )]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e56387" covers="array-filter">
      <description>array:filter row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:filter(["ab","aa","xy"],starts-with#2(?,"a"))]]></test>
      <result>
         <assert-deep-eq>["ab","aa"]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e56398" covers="array-filter">
      <description>array:filter row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:filter([4,5,6],function($n) {$n > 4})]]></test>
      <result>
         <assert-deep-eq>[5,6]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e56409" covers="array-filter">
      <description>array:filter row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:filter([4,5,6],function($n) {$n > 6})]]></test>
      <result>
         <assert-deep-eq>[]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e56502" covers="array-flatten">
      <description>array:flatten row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:flatten(["a", "b", "c"])]]></test>
      <result>
         <assert-deep-eq>("a", "b", "c")</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e56513" covers="array-flatten">
      <description>array:flatten row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:flatten( (["a", "b"],["c", "d"]) )]]></test>
      <result>
         <assert-deep-eq>("a", "b", "c", "d")</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e56524" covers="array-flatten">
      <description>array:flatten row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:flatten( (["a", "b"],["c", ["d"],["e"]]) )]]></test>
      <result>
         <assert-deep-eq>("a", "b", "c", "d", "e")</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e56535" covers="array-flatten">
      <description>array:flatten row 4</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:flatten( ("a", "b", "c") )]]></test>
      <result>
         <assert-deep-eq>("a", "b", "c")</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e56999" covers="array-fold-left">
      <description>A-93</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:fold-left([1,2,3], 0, function($a, $b) { $a + $b })]]></test>
      <result>
         <assert-deep-eq>6</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e57060" covers="array-fold-left">
      <description>array:fold-left row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:fold-left([1,2,3,4,5,6], 0, function($a, $b) { $a + $b })]]></test>
      <result>
         <assert-deep-eq>21</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e57070" covers="array-fold-left">
      <description>array:fold-left row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:fold-left(["a","b","c"], "", function($a, $b) { concat($a,$b) })]]></test>
      <result>
         <assert-deep-eq>"abc"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e57081" covers="array-fold-left">
      <description>array:fold-left row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:fold-left(["a","b","c"], "", function($a, $b) { concat($b,$a) })]]></test>
      <result>
         <assert-deep-eq>"cba"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e57092" covers="array-fold-left">
      <description>array:fold-left row 4</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:fold-left(["a","b","c"], "x", function($a, $b) { concat($a,',',$b) })]]></test>
      <result>
         <assert-deep-eq>"x,a,b,c"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e57103" covers="array-fold-left">
      <description>array:fold-left row 5</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:fold-left( ["a","b","c"], "", concat(?,?) )]]></test>
      <result>
         <assert-deep-eq>"abc"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e57114" covers="array-fold-left">
      <description>array:fold-left row 6</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:fold-left([], 0, function($a, $b) { $a + $b })]]></test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e57411" covers="array-fold-right">
      <description>A-97</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:fold-right([1,2,3], 0, function($a, $b) { $a + $b })]]></test>
      <result>
         <assert-deep-eq>6</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e57472" covers="array-fold-right">
      <description>array:fold-right row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:fold-right([1,2,3,4,5,6], 0, function($a, $b) { $a + $b })]]></test>
      <result>
         <assert-deep-eq>21</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e57482" covers="array-fold-right">
      <description>array:fold-right row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:fold-right(["a","b","c"], "", function($a, $b) { concat($a,$b) })]]></test>
      <result>
         <assert-deep-eq>"abc"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e57493" covers="array-fold-right">
      <description>array:fold-right row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:fold-right(["a","b","c"], "", function($a, $b) { concat($b,$a) })]]></test>
      <result>
         <assert-deep-eq>"cba"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e57504" covers="array-fold-right">
      <description>array:fold-right row 4</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:fold-right(["a","b","c"], "x", function($a, $b) { concat($a,',',$b) })]]></test>
      <result>
         <assert-deep-eq>"a,b,c,x"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e57515" covers="array-fold-right">
      <description>array:fold-right row 5</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:fold-right( ["a","b","c"], "", concat(?,?) )]]></test>
      <result>
         <assert-deep-eq>"abc"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e57526" covers="array-fold-right">
      <description>array:fold-right row 6</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:fold-right([], 0, function($a, $b) { $a + $b })]]></test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e57796" covers="array-for-each">
      <description>array:for-each row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:for-each( ["a","b","c"], function($x) {concat($x,"x")} )]]></test>
      <result>
         <assert-deep-eq>["ax","bx","cx"]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e57807" covers="array-for-each">
      <description>array:for-each row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:for-each( ["a","b","c"], function($x) {$x,"x"} )]]></test>
      <result>
         <assert-deep-eq>[("a","x"),("b","x"),("c","x")]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e57818" covers="array-for-each">
      <description>array:for-each row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:for-each( ["a","b","c"], string-to-codepoints(?) )]]></test>
      <result>
         <assert-deep-eq>[97, 98, 99]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e57961" covers="map-for-each">
      <description>map:for-each row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
 map:for-each($map1,function($k,$v) {concat($k,$v)})]]></test>
      <result>
         <assert-permutation>("1first","2second")</assert-permutation>
      </result>
   </test-case>
   <test-case name="d1e57972" covers="map-for-each">
      <description>map:for-each row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
         deep-equal(
 map:merge(map:for-each($map1,function($k,$v) {map:entry($k + 1, $v)})),
 map {2:"first", 3:"second"}
 )]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e58316" covers="array-for-each-pair">
      <description>array:for-each-pair row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:for-each-pair(["a", "b", "c"], ["x", "y", "z"], concat#2)]]></test>
      <result>
         <assert-deep-eq>["ax", "by", "cz"]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e58327" covers="array-for-each-pair">
      <description>array:for-each-pair row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:for-each-pair(["a", "b", "c"], ["x", "y", "z"], function($a, $b){$a, $b})]]></test>
      <result>
         <assert-deep-eq>[("a","x"), ("b","y"), ("c","z")]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e58338" covers="array-for-each-pair">
      <description>array:for-each-pair row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:for-each-pair([1,2,3,4,5], [1,2,3,4,5], function($a, $b){$a * $b})]]></test>
      <result>
         <assert-deep-eq>[1,4,9,16,25]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e58349" covers="array-for-each-pair">
      <description>array:for-each-pair row 4</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:for-each-pair(["a", "b", "c", "d", "e"], ["x", "y", "z"], concat#2)]]></test>
      <result>
         <assert-deep-eq>["ax", "by", "cz"]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e60780" covers="array-get">
      <description>array:get row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","def","ghi"];
declare variable $array2 := ["abc", [10,20]];
 array:get($array1,2)]]></test>
      <result>
         <assert-deep-eq>"def"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e60791" covers="array-get">
      <description>array:get row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","def","ghi"];
declare variable $array2 := ["abc", [10,20]];
 array:get($array2,2)]]></test>
      <result>
         <assert-deep-eq>[10,20]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e60802" covers="array-get">
      <description>array:get row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","def","ghi"];
declare variable $array2 := ["abc", [10,20]];
 array:get($array2,3)]]></test>
      <result>
         <error code="FOAY0001"/>
      </result>
   </test-case>
   <test-case name="d1e60955" covers="map-get">
      <description>map:get row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {3:"first", 4:"second", 5:()};
 map:get($map1,3)]]></test>
      <result>
         <assert-deep-eq>"first"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e60966" covers="map-get">
      <description>map:get row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {3:"first", 4:"second", 5:()};
 map:get($map1,5)]]></test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   <test-case name="d1e60976" covers="map-get">
      <description>map:get row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {3:"first", 4:"second", 5:()};
 map:get($map1,6)]]></test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   <test-case name="d1e60986" covers="map-get">
      <description>map:get row 4</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {3:"first", 4:"second", 5:()};
 map:get($map1,"3")]]></test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   <test-case name="d1e61366" covers="array-head">
      <description>array:head row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:head(["abc","def","ghi"])]]></test>
      <result>
         <assert-deep-eq>"abc"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e61377" covers="array-head">
      <description>array:head row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:head(["abc"])]]></test>
      <result>
         <assert-deep-eq>"abc"</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e61388" covers="array-head">
      <description>array:head row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:head([])]]></test>
      <result>
         <error code="FOAY0001"/>
      </result>
   </test-case>
   <test-case name="d1e63192" covers="array-insert-before">
      <description>array:insert-before row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","ghi","jkl"];
 array:insert-before($array1,2,"def")]]></test>
      <result>
         <assert-deep-eq>["abc","def","ghi","jkl"]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e63203" covers="array-insert-before">
      <description>array:insert-before row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","ghi","jkl"];
 array:insert-before($array1,4,"mno")]]></test>
      <result>
         <assert-deep-eq>["abc","ghi","jkl","mno"]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e63214" covers="array-insert-before">
      <description>array:insert-before row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","ghi","jkl"];
 array:insert-before($array1,6,"mno")]]></test>
      <result>
         <error code="FOAY0001"/>
      </result>
   </test-case>
   <test-case name="d1e63227" covers="array-insert-before">
      <description>array:insert-before row 4</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","ghi","jkl"];
 array:insert-before($array1,0,"aaa")]]></test>
      <result>
         <error code="FOAY0001"/>
      </result>
   </test-case>
   <test-case name="d1e63488" covers="array-join">
      <description>array:join row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","def","ghi"];
declare variable $array2 := [1,2,3];
 array:join( ($array1,$array2) )]]></test>
      <result>
         <assert-deep-eq>["abc","def","ghi",1,2,3]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e63499" covers="array-join">
      <description>array:join row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","def","ghi"];
declare variable $array2 := [1,2,3];
 array:join( ($array2,$array1) )]]></test>
      <result>
         <assert-deep-eq>[1,2,3,"abc","def","ghi"]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e63510" covers="array-join">
      <description>array:join row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","def","ghi"];
declare variable $array2 := [1,2,3];
 array:join( ($array2,$array1,[4,5]) )]]></test>
      <result>
         <assert-deep-eq>[1,2,3,"abc","def","ghi",4,5]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e63521" covers="array-join">
      <description>array:join row 4</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","def","ghi"];
declare variable $array2 := [1,2,3];
 array:join( ($array1,[]) )]]></test>
      <result>
         <assert-deep-eq>["abc","def","ghi"]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e63532" covers="array-join">
      <description>array:join row 5</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","def","ghi"];
declare variable $array2 := [1,2,3];
 array:join( () )]]></test>
      <result>
         <assert-deep-eq>[ ]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e63543" covers="array-join">
      <description>array:join row 6</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","def","ghi"];
declare variable $array2 := [1,2,3];
 array:join( [ ] )]]></test>
      <result>
         <assert-deep-eq>[ ]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e63783" covers="map-keys">
      <description>map:keys row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
declare variable $map2 := map {1:"first"};
declare variable $map3 := map {};
 map:keys($map1)]]></test>
      <result>
         <assert-permutation>(1, 2)</assert-permutation>
      </result>
   </test-case>
   <test-case name="d1e63796" covers="map-keys">
      <description>map:keys row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
declare variable $map2 := map {1:"first"};
declare variable $map3 := map {};
 map:keys($map2)]]></test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e63807" covers="map-keys">
      <description>map:keys row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
declare variable $map2 := map {1:"first"};
declare variable $map3 := map {};
 map:keys($map3)]]></test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   <test-case name="d1e66015" covers="map-merge">
      <description>map:merge row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Tim Mills" on="2016-08-15" change="Bug 29723"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
declare variable $map2 := map {1:"ONE", "abc":"def"};
declare variable $map3 := map {"1":"first", "2":"second"};
deep-equal(
 map:merge( ($map1, $map2) ),
 map {1:"first", 2:"second", "abc":"def"}
 )]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e66026" covers="map-merge">
      <description>map:merge row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Tim Mills" on="2016-08-15" change="Bug 29723"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
declare variable $map2 := map {1:"ONE", "abc":"def"};
declare variable $map3 := map {"1":"first", "2":"second"};
deep-equal(
 map:merge( ($map2, $map1) ),
 map {1:"ONE", 2:"second", "abc":"def"}
 )]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e66037" covers="map-merge">
      <description>map:merge row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
declare variable $map2 := map {1:"ONE", "abc":"def"};
declare variable $map3 := map {"1":"first", "2":"second"};
deep-equal(
 map:merge( ($map1, $map3) ),
 map {1:"first", 2:"second", "1":"first", "2":"second"}
 )]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e66048" covers="map-merge">
      <description>map:merge row 4</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Tim Mills" on="2016-08-15" change="Bug 29723"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
declare variable $map2 := map {1:"ONE", "abc":"def"};
declare variable $map3 := map {"1":"first", "2":"second"};
deep-equal(
 map:merge( ($map1, $map2, $map3) ),
 map {1:"ONE", 2:"second", "abc":"def", "1":"first", "2":"second"}
 )]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   <test-case name="d1e66059" covers="map-merge">
      <description>map:merge row 5</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
declare variable $map2 := map {1:"ONE", "abc":"def"};
declare variable $map3 := map {"1":"first", "2":"second"};
deep-equal(
 map:merge( ($map1, map{3:"third"}) ),
 map {1:"first", 2:"second", 3:"third"}
 )]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e66070" covers="map-merge">
      <description>map:merge row 6</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Tim Mills" on="2016-08-15" change="Bug 29723"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
declare variable $map2 := map {1:"ONE", "abc":"def"};
declare variable $map3 := map {"1":"first", "2":"second"};
deep-equal(
 map:merge( ($map1, map{2:"second-new"}) ),
 map {1:"first", 2:"second"}
 )]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e66081" covers="map-merge">
      <description>map:merge row 7</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Tim Mills" on="2016-08-15" change="Bug 29723"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
declare variable $map2 := map {1:"ONE", "abc":"def"};
declare variable $map3 := map {"1":"first", "2":"second"};
deep-equal(
 map:merge( ($map1, map:entry(2,"second-new")) ),
 map {1:"first", 2:"second"}
 )]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e66092" covers="map-merge">
      <description>map:merge row 8</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
declare variable $map2 := map {1:"ONE", "abc":"def"};
declare variable $map3 := map {"1":"first", "2":"second"};
deep-equal(
 map:merge( ($map1) ),
 map {1:"first", 2:"second"}
 )]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e66103" covers="map-merge">
      <description>map:merge row 9</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
declare variable $map2 := map {1:"ONE", "abc":"def"};
declare variable $map3 := map {"1":"first", "2":"second"};
deep-equal(
 map:merge( () ),
 map {}
 )]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e69523" covers="fn-parse-ietf-date">
      <description>parse-ietf-date row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 parse-ietf-date("Wed, 05 Jul 2015 13:25:15 GMT")]]></test>
      <result>
         <assert-eq>xs:dateTime("2015-07-05T13:25:15Z")</assert-eq>
      </result>
   </test-case>
   <test-case name="d1e69534" covers="fn-parse-ietf-date">
      <description>parse-ietf-date row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 parse-ietf-date("Wed, 5 Jul 94 07:29 GMT")]]></test>
      <result>
         <assert-eq>xs:dateTime("1994-07-05T07:29:00Z")</assert-eq>
      </result>
   </test-case>
   <test-case name="d1e69545" covers="fn-parse-ietf-date">
      <description>parse-ietf-date row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 parse-ietf-date("Wed Jul 05 13:25:15 EST 2015")]]></test>
      <result>
         <assert-eq>xs:dateTime("2015-07-05T13:25:15-05:00")</assert-eq>
      </result>
   </test-case>
   <test-case name="d1e69556" covers="fn-parse-ietf-date">
      <description>parse-ietf-date row 4</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 parse-ietf-date("Sunday, 05-Nov-94 08:25:15 GMT")]]></test>
      <result>
         <assert-eq>xs:dateTime("1994-11-05T08:25:15Z")</assert-eq>
      </result>
   </test-case>
   <test-case name="d1e69567" covers="fn-parse-ietf-date">
      <description>parse-ietf-date row 5</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 parse-ietf-date("Wed, 5 Jul 2015 13:25:15 +0500")]]></test>
      <result>
         <assert-eq>xs:dateTime("2015-07-05T13:25:15+05:00")</assert-eq>
      </result>
   </test-case>
   <test-case name="d1e69767" covers="fn-parse-json">
      <description>A-198</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 deep-equal (
 parse-json('{
   "number": 557,
   "name": "Fleece Pullover",
   "colorChoices": ["navy","black"]
}'),
map {
   "number": xs:double(557),
   "name": "Fleece Pullover",
   "colorChoices": ["navy", "black"]
})
]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e70867" covers="map-put">
      <description>map:put row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
         deep-equal(
 map:put($map1, 1, "ONE"),
 map {1:"ONE", 2:"second"}
 )]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e70878" covers="map-put">
      <description>map:put row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
         deep-equal(
 map:put($map1, 3, "third"),
 map {1:"first", 2:"second", 3:"third"}
 )]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e70889" covers="map-put">
      <description>map:put row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
         deep-equal(
 map:put($map1, "abc", "def"),
 map {1:"first", 2:"second", "abc":"def"}
 )]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e71246" covers="fn-random-number-generator">
      <description>random-number-generator row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Michael Kay" on="2015-11-27" change="add HOF dependency"/>
      <environment ref="all"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test><![CDATA[
 random-number-generator()?number]]></test>
      <result>
         <all-of>
            <assert-type>xs:double</assert-type>
            <assert>$result >= 0 and $result &lt;=1</assert>
         </all-of>
      </result>
   </test-case>
   <test-case name="d1e71254" covers="fn-random-number-generator">
      <description>random-number-generator row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Michael Kay" on="2015-11-27" change="add HOF dependency"/>
      <environment ref="all"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test><![CDATA[
 random-number-generator()?permute(1 to 100)]]></test>
      <result>
         <all-of>
            <assert-type>xs:integer+</assert-type>
            <assert>count($result) = 100</assert>
         </all-of>
      </result>
   </test-case>
   <test-case name="d1e71262" covers="fn-random-number-generator">
      <description>random-number-generator row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Michael Kay" on="2015-11-27" change="add HOF dependency"/>
      <environment ref="all"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test><![CDATA[
 for $seq in 1 to 100 return random-number-generator()?number]]></test>
      <result>
         <all-of>
            <assert-type>xs:double+</assert-type>
            <assert>count($result) = 100</assert>
            <assert>count(distinct-values($result)) = 1</assert>
         </all-of>
      </result>
   </test-case>
   <test-case name="d1e71270" covers="fn-random-number-generator">
      <description>random-number-generator row 4</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Michael Kay" on="2015-11-27" change="add HOF dependency"/>
      <environment ref="all"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test><![CDATA[
 for $seq in 1 to 100 return random-number-generator($seq)?number]]></test>
      <result>
         <all-of>
            <assert-type>xs:double+</assert-type>
            <assert>count($result) = 100</assert>
         </all-of>
      </result>
   </test-case>
   <test-case name="d1e71288" covers="fn-random-number-generator">
      <description>A-215</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Michael Kay" on="2015-11-27" change="add HOF dependency"/>
      <environment ref="all"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test><![CDATA[
 declare function local:random-sequence($length as xs:integer,
                                       $rng as map(xs:string, item())) {
  if ($length eq 0)
  then ()
  else ($rng?number, local:random-sequence($length - 1, $rng?next()))
};
local:random-sequence(5, random-number-generator())]]></test>
      <result>
         <all-of>
            <assert-type>xs:double+</assert-type>
            <assert>count($result) = 5</assert>
            <assert>count(distinct-values($result)) = 5</assert>
         </all-of>
      </result>
   </test-case>
   <test-case name="d1e71531" covers="array-remove">
      <description>array:remove row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","def","ghi","jkl"];
 array:remove($array1,2)]]></test>
      <result>
         <assert-deep-eq>["abc","ghi","jkl"]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e71542" covers="array-remove">
      <description>array:remove row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","def","ghi","jkl"];
 array:remove(["abc"],1)]]></test>
      <result>
         <assert-deep-eq>[ ]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e71553" covers="array-remove">
      <description>array:remove row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","def","ghi","jkl"];
 array:remove($array1,5)]]></test>
      <result>
         <error code="FOAY0001"/>
      </result>
   </test-case>
   <test-case name="d1e71660" covers="map-remove">
      <description>map:remove row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
deep-equal(
 map:remove($map1,2),
 map {1:"first"}
 )]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e71671" covers="map-remove">
      <description>map:remove row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
deep-equal(
map:remove($map1,3),
map {1:"first", 2:"second"}
)]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e71682" covers="map-remove">
      <description>map:remove row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
deep-equal( map:remove($map1,"abc"),
map {1:"first", 2:"second"}
)]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e72747" covers="array-reverse">
      <description>array:reverse row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:reverse(["abc","def","ghi"])]]></test>
      <result>
         <assert-deep-eq>["ghi","def","abc"]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e72758" covers="array-reverse">
      <description>array:reverse row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:reverse(["abc"])]]></test>
      <result>
         <assert-deep-eq>["abc"]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e72769" covers="array-reverse">
      <description>array:reverse row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:reverse([("a","b","c")])]]></test>
      <result>
         <assert-deep-eq>[("a","b","c")]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e72779" covers="array-reverse">
      <description>array:reverse row 4</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:reverse([ ])]]></test>
      <result>
         <assert-deep-eq>[ ]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e74262" covers="array-size">
      <description>array:size row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:size([1, 2, 3])]]></test>
      <result>
         <assert-deep-eq>3</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e74273" covers="array-size">
      <description>array:size row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:size(["abc", ["def", "ghi"]])]]></test>
      <result>
         <assert-deep-eq>2</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e74283" covers="array-size">
      <description>array:size row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:size([ ])]]></test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e74294" covers="array-size">
      <description>array:size row 4</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:size([[ ]])]]></test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e74304" covers="array-size">
      <description>array:size row 5</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 count([1, 2, 3])]]></test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e74388" covers="array-size">
      <description>map:size row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
declare variable $map2 := map {};
 map:size( $map1 )]]></test>
      <result>
         <assert-deep-eq>2</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e74399" covers="array-size">
      <description>map:size row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $map1 := map {1:"first", 2:"second"};
declare variable $map2 := map {};
 map:size( $map2 )]]></test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e74563" covers="fn-sort">
      <description>sort row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 sort((6,2,4))]]></test>
      <result>
         <assert-deep-eq>(2,4,6)</assert-deep-eq>
      </result>
   </test-case>
   <!-- phw -->
   <test-case name="d1e74585" covers="fn-sort">
      <description>sort row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 sort(doc("catalog.xml")//product/number/number(.))]]></test>
      <result>
         <assert-deep-eq>(xs:double(443),xs:double(557),xs:double(563),xs:double(784))</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e74596" covers="fn-sort">
      <description>sort row 4</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Tim Mills" on="2016-08-18" change="See Bug 29722"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 sort(doc("catalog.xml")//product, (), function($prod) {$prod/number})]]></test>
      <result>
         <assert-xml><![CDATA[<product dept="ACC">
  <number>443</number>
  <name language="en">Deluxe Travel Bag</name>
 </product><product dept="WMN">
  <number>557</number>
  <name language="en">Fleece Pullover</name>
  <colorChoices>navy black</colorChoices>
 </product><product dept="ACC">
  <number>563</number>
  <name language="en">Floppy Sun Hat</name>
 </product><product dept="MEN">
  <number>784</number>
  <name language="en">Cotton Dress Shirt</name>
  <colorChoices>white gray</colorChoices>
  <desc>Our <i>favorite</i> shirt!</desc>
 </product>]]></assert-xml>
      </result>
   </test-case>
   <test-case name="d1e74610" covers="fn-sort">
      <description>sort row 5</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Tim Mills" on="2016-08-18" change="See Bug 29722"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 sort(doc("catalog.xml")//product, (), function($prod) {$prod/name, $prod/number})]]></test>
      <result>
         <assert-xml><![CDATA[<product dept="MEN">
  <number>784</number>
  <name language="en">Cotton Dress Shirt</name>
  <colorChoices>white gray</colorChoices>
  <desc>Our <i>favorite</i> shirt!</desc>
 </product><product dept="ACC">
  <number>443</number>
  <name language="en">Deluxe Travel Bag</name>
 </product><product dept="WMN">
  <number>557</number>
  <name language="en">Fleece Pullover</name>
  <colorChoices>navy black</colorChoices>
 </product><product dept="ACC">
  <number>563</number>
  <name language="en">Floppy Sun Hat</name>
 </product>
 ]]></assert-xml>
      </result>
   </test-case>
   <test-case name="d1e74627" covers="fn-sort">
      <description>sort row 6</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Tim Mills" on="2016-08-18" change="See Bug 29722"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 sort((-6,-2,4),(),abs#1)]]></test>
      <result>
         <assert-deep-eq>(-2,4,-6)</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e74798" covers="array-sort">
      <description>array:sort row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:sort([6,2,4])]]></test>
      <result>
         <assert-deep-eq>[2,4,6]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e74809" covers="array-sort">
      <description>array:sort row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:sort([("a","c","b"), ("a","b","f")])]]></test>
      <result>
         <assert-deep-eq>[("a","b","f"), ("a","c","b")]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e74820" covers="array-sort">
      <description>array:sort row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Tim Mills" on="2016-08-18" change="See Bug 29722"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:sort([6,2,-4],(),abs#1)]]></test>
      <result>
         <assert-deep-eq>[2,-4,6]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e76034" covers="array-subarray">
      <description>array:subarray row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","def","ghi","jkl"];
 array:subarray($array1,2)]]></test>
      <result>
         <assert-deep-eq>["def","ghi","jkl"]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e76045" covers="array-subarray">
      <description>array:subarray row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","def","ghi","jkl"];
 array:subarray($array1,2,2)]]></test>
      <result>
         <assert-deep-eq>["def","ghi"]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e76056" covers="array-subarray">
      <description>array:subarray row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","def","ghi","jkl"];
 array:subarray($array1,2,1)]]></test>
      <result>
         <assert-deep-eq>["def"]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e76067" covers="array-subarray">
      <description>array:subarray row 4</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","def","ghi","jkl"];
 array:subarray($array1,2,0)]]></test>
      <result>
         <assert-deep-eq>[ ]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e76078" covers="array-subarray">
      <description>array:subarray row 5</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
       <modified by="Christian Gruen" on="2015-10-21" change="Error code fixed."/>
     <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","def","ghi","jkl"];
 array:subarray($array1,6)]]></test>
      <result>
         <error code="FOAY0001"/>
      </result>
   </test-case>
   <test-case name="d1e76091" covers="array-subarray">
      <description>array:subarray row 6</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","def","ghi","jkl"];
 array:subarray($array1,2,6)]]></test>
      <result>
         <error code="FOAY0001"/>
      </result>
   </test-case>
   <test-case name="d1e76104" covers="array-subarray">
      <description>array:subarray row 7</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[declare variable $array1 := ["abc","def","ghi","jkl"];
 array:subarray($array1,2,-1)]]></test>
      <result>
         <error code="FOAY0002"/>
      </result>
   </test-case>
   <test-case name="d1e77397" covers="array-tail">
      <description>array:tail row 1</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:tail(["abc","def","ghi"])]]></test>
      <result>
         <assert-deep-eq>["def","ghi"]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e77408" covers="array-tail">
      <description>array:tail row 2</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:tail(["abc"])]]></test>
      <result>
         <assert-deep-eq>[ ]</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="d1e77419" covers="array-tail">
      <description>array:tail row 3</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <environment ref="all"/>
      <test><![CDATA[
 array:tail([])]]></test>
      <result>
         <error code="FOAY0001"/>
      </result>
   </test-case>
   <test-case name="d1e78807" covers="fn-transform">
      <description>A-268</description>
      <created by="Priscilla Walmsley" on="2015-06-10"/>
      <modified by="Debbie Lockett, Saxonica" on="2016-04-21" change="edit relative
         stylesheet-location, in response to bug 29582"/>
      <dependency type="feature" value="fn-transform-XSLT" satisfied="true"/>
      <environment ref="all"/>
      <test><![CDATA[
         deep-equal(
 let $result := transform(
  map {
    "stylesheet-location" : "render.xsl",
    "source-node"    : doc("catalog.xml")
  })
return $result?output ,
document {<p>There are 4 products in the catalog.</p>}
)]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="d1e78807c" covers="fn-json-to-xml">
      <description>json-to-xml simple</description>
      <created by="Priscilla Walmsley" on="2015-07-14"/>
      <test><![CDATA[
 json-to-xml('{
   "number": 557,
   "name": "Fleece Pullover",
   "colorChoices": ["navy", "black"],
   "is-current": true,
   "other": null
}')]]></test>
      <result>
         <assert-xml ignore-prefixes="true"><![CDATA[<map 
            xmlns="http://www.w3.org/2005/xpath-functions"><number 
            key="number">557</number><string 
            key="name">Fleece Pullover</string><array 
            key="colorChoices"><string>navy</string><string>black</string></array><boolean 
            key="is-current">true</boolean><null key="other"/></map>
         ]]></assert-xml> 
      </result>
   </test-case>
   <test-case name="d1e78807d" covers="fn-json-to-xml">
      <description>json-to-xml complex</description>
      <created by="Priscilla Walmsley" on="2015-07-14"/>
      <modified by="Michael Kay" on="2015-11-27" change="add HOF dependency"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test><![CDATA[
 json-to-xml('{
   "number": 557,
   "name": "Fleece Pullover",   
   "name": "Fleece Pullover Redux",
   "colorChoices": ["navy \u00E9", "black \uFFFF"],
   "is-current": true,
   "other": null
}',
map {
"duplicates": "use-first",
"validate": false(),
"escape": false(),
"fallback": function($s){"ERROR!!"}
})
]]></test>
      <result>
         <assert-xml ignore-prefixes="true"><![CDATA[<map 
            xmlns="http://www.w3.org/2005/xpath-functions"><number 
            key="number">557</number><string 
            key="name">Fleece Pullover</string><array 
            key="colorChoices"><string>navy é</string><string>black ERROR!!</string></array><boolean 
            key="is-current">true</boolean><null 
            key="other"/></map>
         ]]></assert-xml> 
      </result>
   </test-case>
   <test-case name="d1e78807e" covers="fn-xml-to-json">
      <description>xml-to-json</description>
      <created by="Priscilla Walmsley" on="2015-07-14"/>
      <test><![CDATA[
         deep-equal(
 parse-json(xml-to-json(<map xmlns="http://www.w3.org/2005/xpath-functions">
   <number key="number">557</number>
   <string key="name">Fleece Pullover</string>
   <array key="colorChoices">
      <string>navy</string>
      <string>black</string>
   </array>
   <boolean key="is-current">true</boolean>
   <null key="other"/>
</map>,
map{"indent":true()})) ,
map {   "number": 557,
   "name": "Fleece Pullover",
   "colorChoices": ["navy", "black"],
   "is-current": true(),
   "other": () }
)]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e78807f" covers="fn-parse-json">
      <description>parse-json simple</description>
      <created by="Priscilla Walmsley" on="2015-07-14"/>
      <test><![CDATA[
 deep-equal (
 parse-json('{
   "number": 557,
   "name": "Fleece Pullover",
   "colorChoices": ["navy","black"],
   "is-current": true,
   "other": null 
}'),
map {
   "number": xs:double(557),
   "name": "Fleece Pullover",
   "colorChoices": ["navy", "black"],
   "is-current": true(),
   "other": () 
})
]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e78807g" covers="fn-parse-json">
      <description>parse-json complex</description>
      <created by="Priscilla Walmsley" on="2015-07-14"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test><![CDATA[
 deep-equal (
 parse-json('{
   "number": 557,
   "name": "Fleece Pullover",
   "name": "Fleece Pullover Redux",
   "colorChoices": ["navy \u00E9", "black \uFFFF"],
   "is-current": true,
   "other": null
}',
map {
"duplicates": "use-first",
"validate": false(),
"escape": false(),
"fallback": function($s){"ERROR!!"}}),
map {
   "number": xs:double(557),
   "name": "Fleece Pullover",
   "colorChoices": ["navy é", "black ERROR!!"],
   "is-current": true(),
   "other": () 
})
]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e78807h" covers="fn-serialize">
      <description>serialize with JSON</description>
      <created by="Priscilla Walmsley" on="2015-07-14"/>
      <environment ref="all"/>
      <test><![CDATA[
 deep-equal (
 parse-json(serialize(map {
   "number": xs:double(557),
   "name": "Fleece Pullover",
   "colorChoices": ["navy", "black"],
   "is-current": true(),
   "other": () 
},
<output:serialization-parameters
   xmlns:output = "http://www.w3.org/2010/xslt-xquery-serialization">
  <output:method value="json"/>
  <output:indent value="yes"/>
</output:serialization-parameters>)),
parse-json('{
   "number": 557,
   "name": "Fleece Pullover",
   "colorChoices": ["navy", "black"],
   "is-current": true,
   "other": null 
}')
)
]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="d1e78807i" covers="fn-load-xquery-module">
      <description>load-xquery-module simple</description>
      <created by="Priscilla Walmsley" on="2015-07-14"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <dependency type="feature" value="fn-load-xquery-module" satisfied="true"/>
      <environment ref="all"/>
      <module uri="http://datypic.com/strings" file="Walmsley/strings.xqm"/>
      <test>declare namespace strings = "http://datypic.com/strings";
         let $library := load-xquery-module("http://datypic.com/strings")
         let $trimFunction := $library?functions?(xs:QName("strings:trim"))?1
         return $trimFunction("   x   y   ")</test>
      <result>
         <assert-string-value>x   y</assert-string-value>
      </result>
   </test-case>
   <test-case name="d1e78807j" covers="fn-load-xquery-module">
      <description>load-xquery-module complex</description>
      <created by="Priscilla Walmsley" on="2015-07-14"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <dependency type="feature" value="fn-load-xquery-module" satisfied="true"/>
      <environment ref="all"/>
      <module uri="http://datypic.com/prod" file="Walmsley/lib2.xqm"/>
      <test>declare namespace prod = "http://datypic.com/prod";
         let $library := load-xquery-module("http://datypic.com/prod",
         map {"context-item" : doc("catalog.xml")/catalog,
         "location-hints" : "lib2.xqm",
         "variables" : map{
         xs:QName("prod:label") : "Product Count"}
         })
         let $prodsVariableValue := $library?variables?(xs:QName("prod:prods"))
         let $countProdArity1 := $library?functions?(xs:QName("prod:countProds"))?1
         return $countProdArity1($prodsVariableValue)</test>
      <result>
         <assert-string-value>Product Count: 4</assert-string-value>
      </result>
   </test-case>   
   <test-case name="d1e78807k" covers="fn-load-xquery-module">
      <description>load-xquery-module complex 2</description>
      <created by="Debbie Lockett" on="2015-07-16"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <dependency type="feature" value="fn-load-xquery-module" satisfied="true"/>
      <environment ref="all"/>      
      <module uri="http://datypic.com/prod" file="Walmsley/lib2.xqm"/>
      <test>
         declare namespace prod = "http://datypic.com/prod";
         let $library := load-xquery-module("http://datypic.com/prod",
         map {"context-item" : doc("catalog.xml")/catalog,
         "variables" : map{
         xs:QName("prod:label") : "Product Count"}
         })
         let $prodsVariableValue := $library?variables?(xs:QName("prod:prods"))
         let $countProdArity2 := $library?functions?(xs:QName("prod:countProds"))?2
         return $countProdArity2($prodsVariableValue, "ACC")
      </test>
      <result>
         <assert-string-value>Product Count: 2</assert-string-value>
      </result>
   </test-case>   
</test-set>
