<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="misc-Serialization">
   <description>Tests for the Serialization</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-Serialization"/>

   <test-case name="K2-Serialization-1">
      <description> A standalone attribute node cannot be serialized. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[attribute name {<anElement/>}]]></test>
      <result>
         <assert-serialization-error code="SENR0001"/>
      </result>
   </test-case>

   <test-case name="K2-Serialization-2">
      <description> An attribute node appearing after an element cannot be serialized. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e/>, attribute name {<anElement/>}]]></test>
      <result>
         <assert-serialization-error code="SENR0001"/>
      </result>
   </test-case>

   <test-case name="K2-Serialization-3">
      <description> An attribute node appearing before an element cannot be serialized. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[attribute name {<anElement/>}, <e/>]]></test>
      <result>
         <assert-serialization-error code="SENR0001"/>
      </result>
   </test-case>

   <test-case name="K2-Serialization-4">
      <description> An attribute node appearing between two element nodes cannot be serialized. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e/>, attribute name {<anElement/>}, <e/>]]></test>
      <result>
         <assert-serialization-error code="SENR0001"/>
      </result>
   </test-case>

   <test-case name="K2-Serialization-5">
      <description> Ensure that CR, NEL and LINE SEPARATOR in text nodes are escaped when serialized. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="Michael Kay" on="2012-05-23" change="use new serialization assertion"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a>&#xD;&#x85;&#x2028;</a>]]></test>
      <result>
         <any-of>
           <serialization-matches flags="i"><![CDATA[&#xD;&#x85;&#x2028;]]></serialization-matches>
           <serialization-matches><![CDATA[&#13;&#133;&#8232;]]></serialization-matches>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-Serialization-6">
      <description> Ensure that CR, NL, TAB, NEL and LINE SEPARATOR in attributes are escaped when serialized. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="Michael Kay" on="2012-05-23" change="use new serialization assertion"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a attr="&#xD;&#xA;&#x9;&#x85;&#x2028;"/>]]></test>
      <result>
         <any-of>
           <serialization-matches flags="i"><![CDATA[&#xD;&#xA;&#x9;&#x85;&#x2028;]]></serialization-matches>
           <serialization-matches><![CDATA[&#13;&#10;&#9;&#133;&#8232;]]></serialization-matches>
         </any-of>  
      </result>
   </test-case>

   <test-case name="K2-Serialization-7">
      <description> Use characters in a text node that in XML 1.0 are invalid, and in XML 1.1 must be escaped. #x1 - #x1F </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="Michael Kay" on="2012-05-23" change="use new serialization assertion"/>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="xml-version" value="1.1"/>
      <test><![CDATA[<a>{codepoints-to-string(1 to 31)}</a>]]></test>
      <result>
         <any-of>
            <serialization-matches flags="i"><![CDATA[&#x1;&#x2;&#x3;&#x4;&#x5;&#x6;&#x7;&#x8;\t\n&#xB;&#xC;&#xD;&#xE;&#xF;&#x10;&#x11;&#x12;&#x13;&#x14;&#x15;&#x16;&#x17;&#x18;&#x19;&#x1A;&#x1B;&#x1C;&#x1D;&#x1E;&#x1F;]]></serialization-matches>
            <serialization-matches><![CDATA[&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8;\t\n&#11;&#12;&#13;&#14;&#15;&#16;&#17;&#18;&#19;&#20;&#21;&#22;&#23;&#24;&#25;&#26;&#27;&#28;&#29;&#30;&#31;]]></serialization-matches>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="K2-Serialization-7a">
      <description> Use characters in a text node that in XML 1.0 are invalid, and in XML 1.1 must be escaped. #x1 - #x1F </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="Michael Kay" on="2012-05-23" change="separate out XML 1.0 version of test"/>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="xml-version" value="1.0"/>
      <test><![CDATA[<a>{codepoints-to-string(1 to 31)}</a>]]></test>
      <result>
         <any-of>
            <error code="FOCH0001"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-Serialization-8">
      <description> Use characters in an attribute node that in XML 1.0 are invalid, and in XML 1.1 must be escaped. #x1 - #x1F </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="Michael Kay" on="2012-05-23" change="use new serialization assertion"/>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="xml-version" value="1.1"/>
      <test><![CDATA[<a attr="{codepoints-to-string(1 to 31)}"></a>]]></test>
      <result>
         <any-of>
            <serialization-matches flags="i"><![CDATA[&#x1;&#x2;&#x3;&#x4;&#x5;&#x6;&#x7;&#x8;&#x9;&#xA;&#xB;&#xC;&#xD;&#xE;&#xF;&#x10;&#x11;&#x12;&#x13;&#x14;&#x15;&#x16;&#x17;&#x18;&#x19;&#x1A;&#x1B;&#x1C;&#x1D;&#x1E;&#x1F;]]></serialization-matches>
            <serialization-matches><![CDATA[&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8;&#9;&#10;&#11;&#12;&#13;&#14;&#15;&#16;&#17;&#18;&#19;&#20;&#21;&#22;&#23;&#24;&#25;&#26;&#27;&#28;&#29;&#30;&#31;]]></serialization-matches>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="K2-Serialization-8a">
      <description> Use characters in an attribute node that in XML 1.0 are invalid, and in XML 1.1 must be escaped. #x1 - #x1F </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="Michael Kay" on="2012-05-23" change="separate out XML 1.0 version of test"/>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="xml-version" value="1.0"/>
      <test><![CDATA[<a attr="{codepoints-to-string(1 to 31)}"></a>]]></test>
      <result>
         <error code="FOCH0001"/>
      </result>
   </test-case>

   <test-case name="K2-Serialization-9">
      <description> Use characters in the range of #x7F through #x9F in an attribute node and ensure they are escaped properly. #x7F - #x9F </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="Michael Kay" on="2012-05-23" change="use new serialization assertion"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a attr="{codepoints-to-string(127 to 159)}"/>]]></test>
      <result>
         <any-of>
           <serialization-matches flags="i"><![CDATA[&#x7f;&#x80;&#x81;&#x82;&#x83;&#x84;&#x85;&#x86;&#x87;&#x88;&#x89;&#x8a;&#x8b;&#x8c;&#x8d;&#x8e;&#x8f;&#x90;&#x91;&#x92;&#x93;&#x94;&#x95;&#x96;&#x97;&#x98;&#x99;&#x9a;&#x9b;&#x9c;&#x9d;&#x9e;&#x9f;]]></serialization-matches>         
           <serialization-matches><![CDATA[&#127;&#128;&#129;&#130;&#131;&#132;&#133;&#134;&#135;&#136;&#137;&#138;&#139;&#140;&#141;&#142;&#143;&#144;&#145;&#146;&#147;&#148;&#149;&#150;&#151;&#152;&#153;&#154;&#155;&#156;&#157;&#158;&#159;]]></serialization-matches>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-Serialization-10">
      <description> Use characters in the range of #x7F through #x9F in a text node and ensure they are escaped properly. #x7F - #x9F </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="Michael Kay" on="2012-05-23" change="use new serialization assertion"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a>{codepoints-to-string(127 to 159)}</a>]]></test>
      <result>
         <any-of>
           <serialization-matches flags="i"><![CDATA[&#x7f;&#x80;&#x81;&#x82;&#x83;&#x84;&#x85;&#x86;&#x87;&#x88;&#x89;&#x8a;&#x8b;&#x8c;&#x8d;&#x8e;&#x8f;&#x90;&#x91;&#x92;&#x93;&#x94;&#x95;&#x96;&#x97;&#x98;&#x99;&#x9a;&#x9b;&#x9c;&#x9d;&#x9e;&#x9f;]]></serialization-matches>         
           <serialization-matches><![CDATA[&#127;&#128;&#129;&#130;&#131;&#132;&#133;&#134;&#135;&#136;&#137;&#138;&#139;&#140;&#141;&#142;&#143;&#144;&#145;&#146;&#147;&#148;&#149;&#150;&#151;&#152;&#153;&#154;&#155;&#156;&#157;&#158;&#159;]]></serialization-matches>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-Serialization-11">
      <description> Ensure a new-line character is properly escaped. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="O'Neil Delpratt" on="2011-09-08" change="Corrected expected result"/>
      <modified by="Michael Kay" on="2012-05-23" change="use new serialization assertion"/>
      <modified by="Michael Kay" on="2013-01-11" change="allow \r\n in serialized result - see bug 20647"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["a&#xD;aa&#xD;&#xA;a&#xD;&#xA;"]]></test>
      <result>
         <all-of>
            <any-of>
              <serialization-matches flags="i"><![CDATA[a&#xD;aa&#xD;]]></serialization-matches>
              <serialization-matches><![CDATA[a&#13;aa&#13;]]></serialization-matches>
            </any-of>
            <serialization-matches>\r?\n.*\r?\n</serialization-matches>
            <!-- the serializer is allowed to serialize a newline as \r\n -->
         </all-of>
      </result>
   </test-case>

   <test-case name="K2-Serialization-12">
      <description> Write out elements and attributes that have the same names except for their prefixes.
                    (Note by MHK: this is not really a serialization test.)
      </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e> <a:a xmlns:a="http://www.example.com/A" a:a="value"/> <b:a xmlns:b="http://www.example.com/A" b:a="value"/> </e>]]></test>
      <result>
         <assert-xml><![CDATA[<e><a:a xmlns:a="http://www.example.com/A" a:a="value"/><b:a xmlns:b="http://www.example.com/A" b:a="value"/></e>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="K2-Serialization-13">
      <description>Test item-separator property</description>
      <created by="Michael Kay" on="2013-10-04"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
      	declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "xml";
        declare option output:item-separator "|";
        1 to 10
      ]]></test>
      <result>
         <serialization-matches><![CDATA[1|2|3|4|5|6|7|8|9|10]]></serialization-matches>
      </result>
   </test-case>
   
   <test-case name="K2-Serialization-14">
      <description>Test item-separator property</description>
      <created by="Michael Kay" on="2013-10-04"/>
      <modified by="Michael Kay" on="2014-01-15" change="escape vertical bar in regex (was passing for the wrong reason)"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
      	declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "xml";
        declare option output:item-separator "|";
        <a>{1,2,3}</a>,<b>{4,5,6}</b>
      ]]></test>
      <result>
         <serialization-matches><![CDATA[<a>1 2 3</a>\|<b>4 5 6</b>]]></serialization-matches>
      </result>
   </test-case>
   
   <test-case name="K2-Serialization-15">
      <description>Test item-separator property</description>
      <created by="Michael Kay" on="2013-10-04"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
      	declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "xml";
        declare option output:item-separator "|";
        document { 1 to 5 }
      ]]></test>
      <result>
         <serialization-matches><![CDATA[1 2 3 4 5]]></serialization-matches>
      </result>
   </test-case>
   
   <test-case name="K2-Serialization-16">
      <description>Test item-separator property</description>
      <created by="Michael Kay" on="2013-10-04"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
      	declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "xml";
        declare option output:item-separator "==";
        (1 to 4)!text{.}
      ]]></test>
      <result>
         <serialization-matches><![CDATA[1==2==3==4]]></serialization-matches>
      </result>
   </test-case>

   <test-case name="Serialization-html-1" covers="html-output">
      <description>Test that HTML 4.0 elements with empty content model are serialized using only a start tag</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="O'Neil Delpratt" on="2013-05-30" change="added dependency inline with bug issue #21868"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare boundary-space strip;
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:version  "4.0";

<html><body><area/><base/><br/><col/><embed/><frame/><hr/><img/><input/><isindex/><link/><meta/><param/></body></html>
]]></test>
      <result>
         <serialization-matches><![CDATA[<html><body><area><base><br><col><embed><frame><hr><img><input><isindex><link><meta><param></body></html>]]></serialization-matches>
      </result>
   </test-case>

   <test-case name="Serialization-html-2" covers="html-output">
      <description>Test that HTML 5.0 elements with empty content model are serialized using only a start tag</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="O'Neil Delpratt" on="2013-05-30" change="added dependency inline with bug issue #21868"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare boundary-space strip;        
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:version  "5.0";

<html><body><area/><base/><br/><col/><command/><embed/><hr/><img/><input/><keygen/><link/><meta/><param/><source/><track/><wbr/></body></html>
]]></test>
      <result>
         <all-of>
           <serialization-matches><![CDATA[<html><body><area><base><br><col><command><embed><hr><img><input><keygen><link><meta><param><source><track><wbr></body></html>]]></serialization-matches>
           <serialization-matches flags="i"><![CDATA[<!DOCTYPE .*]]></serialization-matches>
         </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-html-3" covers="html-output">
      <description>Test that elements in the XHTML namespace whose local names match those of HTML 4.0 elements with empty content model are serialized as XML</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="O'Neil Delpratt" on="2013-05-15" change="Added alternative result. See bug issue #21968" />
      <modified by="O'Neil Delpratt" on="2013-05-30" change="added dependency inline with bug issue #21868"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare boundary-space strip;        
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:version  "4.0";

<html xmlns="http://www.w3.org/1999/xhtml"><body><area/><base/><br/><col/><embed/><frame/><hr/><img/><input/><isindex/><link/><meta/><param/></body></html>
]]></test>
      <result>
         <any-of>
            <serialization-matches><![CDATA[<html xmlns="http://www.w3.org/1999/xhtml"><body><area/><base/><br/><col/><embed/><frame/><hr/><img/><input/><isindex/><link/><meta/><param/></body></html>]]></serialization-matches>
            <serialization-matches><![CDATA[<html xmlns="http://www.w3.org/1999/xhtml"><body><area></area><base></base><br></br><col></col><embed></embed><frame></frame><hr></hr><img></img><input></input><isindex></isindex><link></link><meta></meta><param></param></body></html>]]></serialization-matches>
         </any-of>
      </result>
   </test-case>

   <test-case name="Serialization-html-4" covers="html-output">
      <description>Test that elements in the XHTML namespace whose local names match those of HTML 5.0 elements with empty content model are serialized using only a start tag</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="O'Neil Delpratt" on="2013-05-30" change="added dependency inline with bug issue #21868"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare boundary-space strip;        
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:version  "5.0";

<html xmlns="http://www.w3.org/1999/xhtml"><body><area/><base/><br/><col/><embed
/><frame/><hr/><img/><input/><isindex/><link/><meta/><param/></body></html>
]]></test>
      <result>
         <all-of>
           <serialization-matches><![CDATA[<html xmlns="http://www.w3.org/1999/xhtml"><body><area><base><br><col><embed><frame><hr><img><input><isindex><link><meta><param></body></html>]]></serialization-matches>
           <serialization-matches flags="i"><![CDATA[<!DOCTYPE .*]]></serialization-matches>
         </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-html-5" covers="html-output">
      <description>Test serialization of XML islands for HTML 4.0</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[ () ]]></test>
      <result>
        <assert-empty />
      </result>
   </test-case>

   <test-case name="Serialization-html-6" covers="html-output">
      <description>Test serialization of XML islands for HTML 5.0</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[ () ]]></test>
      <result>
        <assert-empty />
      </result>
   </test-case>

   <test-case name="Serialization-html-7" covers="html-output">
      <description>Test serialization of unknown elements in no namespace for HTML 5.0</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[ () ]]></test>
      <result>
        <assert-empty />
      </result>
   </test-case>

   <test-case name="Serialization-html-8" covers="html-output">
      <description>Test serialization of unknown elements in no namespace or in the XHTML namespace for HTML 5.0</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[ () ]]></test>
      <result>
        <assert-empty />
      </result>
   </test-case>

   <test-case name="Serialization-html-9" covers="html-output">
      <description>Test that no escaping is performed for text node descendants or attributes of same in the script and style elements</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[ () ]]></test>
      <result>
        <assert-empty />
      </result>
   </test-case>

   <test-case name="Serialization-html-10" covers="html-output">
      <description>Verify HTML elements are recognized regardless of case</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[ () ]]></test>
      <result>
        <assert-empty />
      </result>
   </test-case>

   <test-case name="Serialization-html-11" covers="html-output">
      <description>Verify that an ampersand in an attribute value is not escaped if it is immediately followed by a left brace</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[ () ]]></test>
      <result>
        <assert-empty />
      </result>
   </test-case>

   <test-case name="Serialization-html-12" covers="html-output">
      <description>Verify boolean attributes in HTML 4.0 are serialized in minimized form only if the name and value match, without regard to case</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <dependency type="spec" value="XQ30+"/>
     <test><![CDATA[ () ]]></test>
      <result>
        <assert-empty />
      </result>
   </test-case>

   <test-case name="Serialization-html-13" covers="html-output">
      <description>Verify boolean attributes in HTML 5.0 are serialized in minimized form only if the name and value match, without regard to case</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <dependency type="spec" value="XQ30+"/>
     <test><![CDATA[ () ]]></test>
      <result>
        <assert-empty />
      </result>
   </test-case>

   <test-case name="Serialization-html-14" covers="html-output">
      <description>Test the effect of the indent serialization parameter with value yes</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <dependency type="spec" value="XQ30+"/>
     <test><![CDATA[ () ]]></test>
      <result>
        <assert-empty />
      </result>
   </test-case>

   <test-case name="Serialization-html-15" covers="html-output">
      <description>Test the effect of the indent serialization parameter with value no</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <dependency type="spec" value="XQ30+"/>
     <test><![CDATA[ () ]]></test>
      <result>
        <assert-empty />
      </result>
   </test-case>

   <test-case name="Serialization-html-16" covers="html-output">
      <description>Test the effect of the suppress-indentation serialization parameter if the indent parameter has value yes</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <dependency type="spec" value="XQ30+"/>
     <test><![CDATA[ () ]]></test>
      <result>
        <assert-empty />
      </result>
   </test-case>

   <test-case name="Serialization-html-17" covers="html-output">
      <description>Test the effect of the suppress-indentation serialization parameter if the indent parameter has value no</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <dependency type="spec" value="XQ30+"/>
     <test><![CDATA[ () ]]></test>
      <result>
        <assert-empty />
      </result>
   </test-case>

   <test-case name="Serialization-html-18" covers="html-output">
      <description>Test with cdata-section-elements for HTML 4.0</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="O'Neil Delpratt" on="2013-05-30" change="added dependency inline with bug issue #21868"/>
      <modified by="Michael Kay" on="2013-06-13" change="correct expected result"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare namespace ex = "http://www.example.org";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:version  "4.0";
declare option output:cdata-section-elements  "p em ex:isle1";

<html><body><p>No CDATA<em>No CDATA</em>No CDATA<ex:isle1>Some CDATA<ex:isle2>No CDATA</ex:isle2>More CDATA</ex:isle1></p></body></html>]]></test>
      <result>
        <serialization-matches><![CDATA[<html><body><p>No CDATA<em>No CDATA</em>No CDATA<ex:isle1 *xmlns:ex=(['"])http://www.example.org\1><!\[CDATA\[Some CDATA\]\]><ex:isle2>No CDATA</ex:isle2><!\[CDATA\[More CDATA\]\]></ex:isle1></p></body></html>]]></serialization-matches>
      </result>
   </test-case>

   <test-case name="Serialization-html-19a" covers="html-output">
      <description>Test with cdata-section-elements for HTML 5.0</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="O'Neil Delpratt" on="2013-05-30" change="added dependency inline with bug issue #21868"/>
      <modified by="Michael Kay" on="2013-06-13" change="correct expected result"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare namespace ex = "http://www.example.org";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:version  "5.0";
declare option output:cdata-section-elements  "p em ex:isle1";

<html><body><p>No CDATA<em>No CDATA</em>No CDATA<ex:isle1>Some CDATA<ex:isle2>No CDATA</ex:isle2>More CDATA</ex:isle1></p></body></html>]]></test>
      <result>
        <serialization-matches><![CDATA[<html><body><p>No CDATA<em>No CDATA</em>No CDATA<ex:isle1 *xmlns:ex=(['"])http://www.example.org\1><!\[CDATA\[Some CDATA\]\]><ex:isle2>No CDATA</ex:isle2><!\[CDATA\[More CDATA\]\]></ex:isle1></p></body></html>]]></serialization-matches>
      </result>
   </test-case>

   <test-case name="Serialization-html-19b" covers="html-output">
      <description>Test with cdata-section-elements for HTML 4.0</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="O'Neil Delpratt" on="2013-05-30" change="added dependency inline with bug issue #21868"/>
      <modified by="Michael Kay" on="2013-06-13" change="correct expected result"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare namespace html = "http://www.w3.org/1999/xhtml";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:version  "4.0";
declare option output:cdata-section-elements  "b html:em";

<html><body><p><b>No CDATA</b><em>No CDATA</em><html:b>No CDATA</html:b><html:em>Some CDATA</html:em></p></body></html>]]></test>
      <result>
        <serialization-matches><![CDATA[<html><body><p><b>No CDATA</b><em>No CDATA</em><html:b *xmlns:html=(['"])http://www.w3.org/1999/xhtml\1>No CDATA</html:b><html:em *xmlns:html=(['"])http://www.w3.org/1999/xhtml\2><!\[CDATA\[Some CDATA\]\]></html:em></p></body></html>]]></serialization-matches>
      </result>
   </test-case>

   <test-case name="Serialization-html-19c" covers="html-output">
      <description>Test with cdata-section-elements for HTML 5.0</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="O'Neil Delpratt" on="2013-05-30" change="added dependency inline with bug issue #21868"/>
      <modified by="Michael Kay" on="2013-06-13" change="correct expected result"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare namespace html = "http://www.w3.org/1999/xhtml";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:version  "5.0";
declare option output:cdata-section-elements  "b html:em";

<html><body><p><b>No CDATA</b><em>No CDATA</em><html:b>No CDATA</html:b><html:em>No CDATA</html:em></p></body></html>]]></test>
      <result>
        <serialization-matches><![CDATA[<html><body><p><b>No CDATA</b><em>No CDATA</em><html:b *xmlns:html=(['"])http://www.w3.org/1999/xhtml\1>No CDATA</html:b><html:em *xmlns:html=(['"])http://www.w3.org/1999/xhtml\2>No CDATA</html:em></p></body></html>]]></serialization-matches>
      </result>
   </test-case>

   <test-case name="Serialization-html-20" covers="html-output">
      <description>Test with doctype-public and doctype-system absent for HTML 4.0</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="O'Neil Delpratt" on="2013-05-08" change="Added alternate result" />
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:version  "4.0";

<html/>
]]></test>
      <result>
        <any-of>
          <serialization-matches><![CDATA[<html/>]]></serialization-matches>
          <serialization-matches><![CDATA[<html></html>]]></serialization-matches>
        </any-of>
      </result>
   </test-case>

   <test-case name="Serialization-html-21" covers="html-output">
      <description>Test with doctype-public and doctype-system absent for HTML 4
.0 and first child is HTML</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="O'Neil Delpratt" on="2013-05-08" change="Added alternate result" />
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:version  "5.0";

<html/>
]]></test>
      <result>
        <any-of>
          <serialization-matches><![CDATA[<html/>]]></serialization-matches>
          <serialization-matches><![CDATA[<html></html>]]></serialization-matches>
        </any-of>
      </result>
   </test-case>

   <test-case name="Serialization-html-22" covers="html-output">
      <description>Test with doctype-public and doctype-system absent for HTML 5.0 and first child is HTML</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="O'Neil Delpratt" on="2013-05-08" change="Added alternate result" />
      <modified by="O'Neil Delpratt" on="2013-05-30" change="added dependency inline with bug issue #21868"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:version  "5.0";

<html/>
]]></test>
      <result>
        <all-of>
          <any-of>
            <serialization-matches><![CDATA[<html/>]]></serialization-matches>
            <serialization-matches><![CDATA[<html></html>]]></serialization-matches>
          </any-of>
          <serialization-matches flags="i"><![CDATA[<!DOCTYPE .*]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-html-23" covers="html-output">
      <description>Test with doctype-public and doctype-system absent for HTML 4
.0 and first child is not HTML</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="Michael Kay" on="2013-06-13" change="See bug 22350"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:version  "4.0";

<foo/>
]]></test>
      <result>
        <serialization-matches><![CDATA[<foo></foo>]]></serialization-matches>
      </result>
   </test-case>

   <test-case name="Serialization-html-24" covers="html-output">
      <description>Test with doctype-public and doctype-system absent for HTML 5.0 and first child is not HTML</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="Michael Kay" on="2013-06-13" change="See bug 22350"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:version  "5.0";

<foo/>
]]></test>
      <result>
        <serialization-matches><![CDATA[<foo></foo>]]></serialization-matches>
      </result>
   </test-case>

   <test-case name="Serialization-html-25" covers="html-output">
      <description>Test with doctype-public present and doctype-system absent for HTML 4.0</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="O'Neil Delpratt" on="2013-05-30" change="added dependency inline with bug issue #21868"/>
      <modified by="Michael Kay" on="2013-06-14" change="relax the result patterns"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:version  "4.0";
declare option output:doctype-public  "-//W3C//DTD HTML 4.0//EN";

<html/>
]]></test>
      <result>
        <all-of>
          <serialization-matches flags="i"><![CDATA[<!DOCTYPE\s+html\s+PUBLIC\s+(['"])-//W3C//DTD HTML 4.0//EN\1\s*>\s*<html]]></serialization-matches>
          <serialization-matches flags="s"><![CDATA[html.+<html]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-html-26" covers="html-output">
      <description>Test with doctype-system present and doctype-public absent for HTML 4.0</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="O'Neil Delpratt" on="2013-05-30" change="added dependency inline with bug issue #21868"/>
      <modified by="Michael Kay" on="2013-06-14" change="relax the result patterns"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:version  "4.0";
declare option output:doctype-system  "http://www.w3.org/TR/REC-html40/strict.dtd";

<html/>
]]></test>
      <result>
        <all-of>
          <serialization-matches flags="i"><![CDATA[<!DOCTYPE\s+html\s+SYSTEM\s+(['"])http://www.w3.org/TR/REC-html40/strict.dtd\1\s*>\s*<html]]></serialization-matches>
          <serialization-matches flags="s"><![CDATA[html.+<html]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-html-27" covers="html-output">
      <description>Test with doctype-public present and doctype-system absent for HTML 5</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="O'Neil Delpratt" on="2013-05-30" change="added dependency inline with bug issue #21868"/>
      <modified by="Michael Kay" on="2013-06-14" change="relax the result patterns"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:version  "5.0";
declare option output:doctype-public  "-//W3C//DTD HTML 4.0//EN";

<html/>
]]></test>
      <result>
        <all-of>
          <serialization-matches flags="i"><![CDATA[<!DOCTYPE\s+html\s+PUBLIC\s+(['"])-//W3C//DTD HTML 4.0//EN\1\s*>\s*<html]]></serialization-matches>
          <serialization-matches flags="s"><![CDATA[html.+<html]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-html-28" covers="html-output">
      <description>Test with doctype-system present and doctype-public absent for HTML 5</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="O'Neil Delpratt" on="2013-05-30" change="added dependency inline with bug issue #21868"/>
      <modified by="Michael Kay" on="2013-06-14" change="relax the result patterns"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:version  "5.0";
declare option output:doctype-system  "about:legacy-compat";

<html/>
]]></test>
      <result>
        <all-of>
          <serialization-matches><![CDATA[<!.......\s+html\s+......\s+(['"])about:legacy-compat\1\s*>\s*<html]]></serialization-matches>
          <serialization-matches flags="i"><![CDATA[<!DOCTYPE\s+....\s+SYSTEM]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-html-29" covers="html-output">
      <description>Test with doctype-system and doctype-public present for HTML 4.0</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="O'Neil Delpratt" on="2013-05-30" change="added dependency inline with bug issue #21868"/>
      <modified by="Michael Kay" on="2013-06-14" change="relax the result patterns"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:version  "4.0";
declare option output:doctype-system  "http://www.w3.org/TR/REC-html40/strict.dtd";
declare option output:doctype-public  "-//W3C//DTD HTML 4.0//EN";

<html/>
]]></test>
      <result>
        <all-of>
          <serialization-matches><![CDATA[<!.......\s+html\s+......\s+(['"])\-//W3C//DTD HTML 4.0//EN\1\s*(['"])http://www.w3.org/TR/REC\-html40/strict.dtd\2\s*>\s*<html]]></serialization-matches>
          <serialization-matches flags="i"><![CDATA[<!DOCTYPE\s+....\s+PUBLIC]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-html-30" covers="html-output">
      <description>Test with doctype-system and doctype-public present for HTML 5.0</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="O'Neil Delpratt" on="2013-05-30" change="added dependency inline with bug issue #21868"/>
      <modified by="Michael Kay" on="2013-06-14" change="relax the result patterns"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:version  "5.0";
declare option output:doctype-system  "http://www.w3.org/TR/REC-html40/strict.dtd";
declare option output:doctype-public  "-//W3C//DTD HTML 4.0//EN";

<html/>
]]></test>
      <result>
        <all-of>
          <serialization-matches><![CDATA[<!.......\s+html\s+......\s+(['"])\-//W3C//DTD HTML 4.0//EN\1\s*(['"])http://www.w3.org/TR/REC\-html40/strict.dtd\2\s*>\s*<html]]></serialization-matches>
          <serialization-matches flags="i"><![CDATA[<!DOCTYPE\s+....\s+PUBLIC]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-html-31" covers="html-output">
      <description>Test with normalization-form serialization parameter for HTML 4.0</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[ () ]]></test>
      <result>
        <assert-empty />
      </result>
   </test-case>

   <test-case name="Serialization-html-32" covers="html-output">
      <description>Test with normalization-form serialization parameter for HTML 5.0</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[ () ]]></test>
      <result>
        <assert-empty />
      </result>
   </test-case>

   <test-case name="Serialization-html-33" covers="html-output">
      <description>Test media-type and include-content-type parameters for HTML 4.0, where input had a head element</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="O'Neil Delpratt" on="2013-05-30" change="added dependency inline with bug issue #21868"/>
      <modified by="Michael Kay" on="2013-06-14" change="remove expectation that the generated meta element will end with />"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:include-content-type  "yes";
declare option output:media-type  "text/html";
declare option output:encoding  "UTF-8";
declare option output:version  "4.0";

<html><head/></html>
]]></test>
      <result>
        <all-of>
          <serialization-matches flags="i"><![CDATA[<html><head><meta +(?:(?:http-equiv=(['"])content-type\1 +content=(['"])text/html; *charset=UTF-8\2)|(?:content=(['"])text/html; *charset=UTF-8\3 +http-equiv=(['"])content-type\4)) *></head></html>]]></serialization-matches>
          <serialization-matches><![CDATA[<html><head><[^>]*></head></html>]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-html-34" covers="html-output">
      <description>Test media-type and include-content-type parameters for HTML 4.0, where input had a head element already containing a meta element</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="O'Neil Delpratt" on="2013-05-30" change="added dependency inline with bug issue #21868"/>
      <modified by="Michael Kay" on="2013-06-14" change="remove expectation that the generated meta element will end with />"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:include-content-type  "yes";
declare option output:media-type  "text/html";
declare option output:encoding  "UTF-8";
declare option output:version  "4.0";

<html><head><meta http-equiv="Content-Type" content="text/html;version='3.0'"/></head></html>
]]></test>
      <result>
        <all-of>
          <serialization-matches flags="i"><![CDATA[<html><head><meta +(?:(?:http-equiv=(['"])content-type\1 +content=(['"])text/html; *charset=UTF-8\2)|(?:content=(['"])text/html; *charset=UTF-8\3 +http-equiv=(['"])content-type\4)) *></head></html>]]></serialization-matches>
          <serialization-matches><![CDATA[<html><head><[^>]*></head></html>]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-html-35" covers="html-output">
      <description>Test media-type and include-content-type parameters for HTML 4.0, where input had no head element</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="O'Neil Delpratt" on="2013-05-30" change="added dependency inline with bug issue #21868"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:include-content-type  "yes";
declare option output:media-type  "text/html";
declare option output:encoding  "UTF-8";
declare option output:version  "4.0";

<html/>
]]></test>
      <result>
        <all-of>
          <serialization-matches><![CDATA[<html></html>]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-html-36" covers="html-output">
      <description>Test media-type and include-content-type parameters for HTML 5.0, where input had a head element</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="O'Neil Delpratt" on="2013-05-30" change="added dependency inline with bug issue #21868"/>
      <modified by="Michael Kay" on="2013-06-14" change="relax the expected result pattern"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:include-content-type  "yes";
declare option output:media-type  "text/html";
declare option output:encoding  "UTF-8";
declare option output:version  "5.0";

<html><head/></html>
]]></test>
      <result>
        <all-of>
          <serialization-matches flags="i"><![CDATA[<!DOCTYPE\s+html\s*>\s*<html><head><meta +(?:(?:http-equiv=(['"])content-type\1 +content=(['"])text/html; *charset=UTF-8\2)|(?:content=(['"])text/html; *charset=UTF-8\3 +http-equiv=(['"])content-type\4)) *></head></html>]]></serialization-matches>
          <serialization-matches><![CDATA[<!.......\s+(html|HTML)\s*>\s*<html><head><[^>]*></head></html>]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-html-37" covers="html-output">
      <description>Test media-type and include-content-type parameters for HTML 5.0, where input had a head element already containing a meta element</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="O'Neil Delpratt" on="2013-05-30" change="added dependency inline with bug issue #21868"/>
      <modified by="Michael Kay" on="2013-06-14" change="relax the expected result pattern"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:include-content-type  "yes";
declare option output:media-type  "text/html";
declare option output:encoding  "UTF-8";
declare option output:version  "5.0";

<html><head><meta http-equiv="Content-Type" content="text/html;version='3.0'"/></head></html>
]]></test>
      <result>
        <all-of>
          <serialization-matches flags="i"><![CDATA[<!DOCTYPE +html *>\s*<html><head><meta +(?:(?:http-equiv=(['"])content-type\1 +content=(['"])text/html; *charset=UTF-8\2)|(?:content=(['"])text/html; *charset=UTF-8\3 +http-equiv=(['"])content-type\4)) *></head></html>]]></serialization-matches>
          <serialization-matches><![CDATA[<!....... +(html|HTML) *>\s*<html><head><[^>]*></head></html>]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-html-38" covers="html-output">
      <description>Test media-type and include-content-type parameters for HTML 5.0, where input had no head element</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="O'Neil Delpratt" on="2013-05-30" change="added dependency inline with bug issue #21868"/>
      <modified by="Michael Kay" on="2013-06-14" change="relax the expected result pattern"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:include-content-type  "yes";
declare option output:media-type  "text/html";
declare option output:encoding  "UTF-8";
declare option output:version  "5.0";

<html/>
]]></test>
      <result>
        <all-of>
          <serialization-matches flags="i"><![CDATA[<!DOCTYPE +html *>\s*<html></html>]]></serialization-matches>
          <serialization-matches><![CDATA[<!....... +(html|HTML) *>\s*<html></html>]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-html-39" covers="html-output">
      <description>Test include-content-type parameter with a value of no for HTML 4.0</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="O'Neil Delpratt" on="2013-05-30" change="added dependency inline with bug issue #21868"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:include-content-type  "no";
declare option output:media-type  "text/html";
declare option output:encoding  "UTF-8";
declare option output:version  "4.0";

<html><head/></html>
]]></test>
      <result>
        <serialization-matches><![CDATA[<html><head></head></html>]]></serialization-matches>
      </result>
   </test-case>

   <test-case name="Serialization-html-40" covers="html-output">
      <description>Test include-content-type parameter with a value of no for HTML 5.0</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <modified by="O'Neil Delpratt" on="2013-05-30" change="added dependency inline with bug issue #21868"/>
      <modified by="Michael Kay" on="2013-06-14" change="relax the expected result pattern"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "html";
declare option output:indent  "no";
declare option output:include-content-type  "no";
declare option output:media-type  "text/html";
declare option output:encoding  "UTF-8";
declare option output:version  "5.0";

<html><head/></html>
]]></test>
      <result>
        <all-of>
          <serialization-matches><![CDATA[<!....... +(html|HTML) *>\s*<html><head></head></html>]]></serialization-matches>
          <serialization-matches flags="i"><![CDATA[<!DOCTYPE .*]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-html-41" covers="html-output">
      <description>Test byte-order-mark parameter for HTML 4.0</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[ () ]]></test>
      <result>
        <assert-empty />
      </result>
   </test-case>

   <test-case name="Serialization-html-42" covers="html-output">
      <description>Test byte-order-mark parameter for HTML 5.0</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <dependency type="spec" value="XQ30+"/>
     <test><![CDATA[ () ]]></test>
      <result>
        <assert-empty />
      </result>
   </test-case>

   <test-case name="Serialization-html-43" covers="html-output">
      <description>Test escape-uri-attributes parameter for HTML 4.0</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <dependency type="spec" value="XQ30+"/>
     <test><![CDATA[ () ]]></test>
      <result>
        <assert-empty />
      </result>
   </test-case>

   <test-case name="Serialization-html-44" covers="html-output">
      <description>Test escape-uri-attributes parameter for HTML 5.0</description>
      <created by="Henry Zongaro" on="2012-10-26"/>
      <dependency type="spec" value="XQ30+"/>
     <test><![CDATA[ () ]]></test>
      <result>
        <assert-empty />
      </result>
   </test-case>


   <test-case name="Serialization-json-1">
      <description>Test the JSON serialization output method</description>
      <created by="Josh Spiegel" on="2014-10-10"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
     	declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        [ ] 

      ]]></test>
      <result>
        <serialization-matches>\[\]</serialization-matches>
      </result>
   </test-case>

   <test-case name="Serialization-json-2">
      <description>Test the JSON serialization output method</description>
      <created by="Josh Spiegel" on="2014-10-10"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
     	declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        map { }

      ]]></test>
      <result>
        <serialization-matches>\{\}</serialization-matches>
      </result>
   </test-case>

   <test-case name="Serialization-json-3">
      <description>Test the JSON serialization output method - empty serializes as null </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
     	declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        ()

      ]]></test>
      <result>
        <serialization-matches>null</serialization-matches>
      </result>
   </test-case>

   <test-case name="Serialization-json-4">
      <description>Test the JSON serialization output method - empty serializes as null </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        [(),map{"k":()},[()]]

      ]]></test>
      <result>
        <serialization-matches>\[null,\{"k":null\},\[null\]\]</serialization-matches>
      </result>
   </test-case>
   
   <test-case name="Serialization-json-5">
      <description>Test the JSON serialization output method - true/false </description>
      <created by="Josh Spiegel" on="2014-10-10"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        [true(), not(true())]

      ]]></test>
      <result>
        <serialization-matches>\[true,false\]</serialization-matches>
      </result>
   </test-case>   
   
   <test-case name="Serialization-json-6">
      <description>Test the JSON serialization output method - true/false </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        1 eq 1

      ]]></test>
      <result>
        <serialization-matches>true</serialization-matches>
      </result>
   </test-case>
   
   <test-case name="Serialization-json-7">
      <description>Test the JSON serialization output method - strings </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        "abcd"

      ]]></test>
      <result>
        <serialization-matches>"abcd"</serialization-matches>
      </result>
   </test-case>
   
   <test-case name="Serialization-json-8">
      <description>Test the JSON serialization output method - strings </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        ["a","b","c"]

      ]]></test>
      <result>
        <serialization-matches>\["a","b","c"\]</serialization-matches>
      </result>
   </test-case>
   
   <test-case name="Serialization-json-9">
      <description>Test the JSON serialization output method - numbers </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        1234

      ]]></test>
      <result>
        <serialization-matches>1234</serialization-matches>
      </result>
   </test-case>
   
   <test-case name="Serialization-json-10">
      <description>Test the JSON serialization output method - numbers </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        [12,12.34,xs:int("45"),xs:decimal("45.67"),xs:unsignedShort("89")]

      ]]></test>
      <result>
        <serialization-matches>\[12,12.34,45,45.67,89\]</serialization-matches>
      </result>
   </test-case>   
   
   <test-case name="Serialization-json-11">
      <description>Test the JSON serialization output method - numbers </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        xs:float("-0")

      ]]></test>
      <result>
        <serialization-matches>-0</serialization-matches>
      </result>
   </test-case>     
   
   <test-case name="Serialization-json-12">
      <description>Test the JSON serialization output method - numbers </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        xs:float("INF")

      ]]></test>
      <result>
        <assert-serialization-error code="SERE0020"/>
      </result>
   </test-case>    
   
   <test-case name="Serialization-json-13">
      <description>Test the JSON serialization output method - numbers </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        [xs:double("-INF")]

      ]]></test>
      <result>
        <assert-serialization-error code="SERE0020"/>
      </result>
   </test-case>    
   
   <test-case name="Serialization-json-14">
      <description>Test the JSON serialization output method - numbers </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        xs:double("NaN")

      ]]></test>
      <result>
        <assert-serialization-error code="SERE0020"/>
      </result>
   </test-case>     

   <test-case name="Serialization-json-15">
      <description>Test the JSON serialization output method - numbers </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        map { "a" : xs:float("NaN") }

      ]]></test>
      <result>
        <assert-serialization-error code="SERE0020"/>
      </result>
   </test-case>     
   
   <test-case name="Serialization-json-16">
      <description>Test the JSON serialization output method - numbers </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        1e-5

      ]]></test>
      <result>
        <serialization-matches>0\.00001</serialization-matches>
      </result>
   </test-case>  
   
   <test-case name="Serialization-json-17">
      <description>Test the JSON serialization output method - numbers </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        [-10000000 cast as xs:double]

      ]]></test>
      <result>
        <serialization-matches>-1\.0E7</serialization-matches>
      </result>
   </test-case>
   
   <test-case name="Serialization-json-18">
      <description>Test the JSON serialization output method - numbers </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        map { "a" : xs:decimal(12678967.543233) cast as xs:float }

      ]]></test>
      <result>
        <serialization-matches>\{"a":1\.2678\d*E7\}</serialization-matches>
      </result>
   </test-case>
      
   <test-case name="Serialization-json-19">
      <description>Test the JSON serialization output method - other atomic </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        "abc"

      ]]></test>
      <result>
        <serialization-matches>"abc"</serialization-matches>
      </result>
   </test-case>    
   
   <test-case name="Serialization-json-20">
      <description>Test the JSON serialization output method - other atomic </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        [xs:QName("abc")]

      ]]></test>
      <result>
        <serialization-matches>"abc"</serialization-matches>
      </result>
   </test-case>
    
   <test-case name="Serialization-json-21">
      <description>Test the JSON serialization output method - other atomic </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        map { "a" : xs:gYearMonth("1995-05") }

      ]]></test>
      <result>
        <serialization-matches>\{"a":"1995-05"\}</serialization-matches>
      </result>
   </test-case>       
    
   <test-case name="Serialization-json-22">
      <description>Test the JSON serialization output method - other atomic </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        xs:hexBinary("0fb7")

      ]]></test>
      <result>
        <serialization-matches>"0FB7"</serialization-matches>
      </result>
   </test-case>
    
   <test-case name="Serialization-json-23">
      <description>Test the JSON serialization output method - SERE0023 </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        1, 2

      ]]></test>
      <result>
        <assert-serialization-error code="SERE0023"/>
      </result>
   </test-case>     
         
   <test-case name="Serialization-json-24">
      <description>Test the JSON serialization output method - SERE0023 </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        [(1, 2)]

      ]]></test>
      <result>
        <assert-serialization-error code="SERE0023"/>
      </result>
   </test-case>  
   
   <test-case name="Serialization-json-25">
      <description>Test the JSON serialization output method - SERE0023 </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        map { "a" : (1, 2) }

      ]]></test>
      <result>
        <assert-serialization-error code="SERE0023"/>
      </result>
   </test-case> 
   
   <test-case name="Serialization-json-26">
      <description>Test the JSON serialization output method - SERE0023 </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        [1],[2]

      ]]></test>
      <result>
        <assert-serialization-error code="SERE0023"/>
      </result>
   </test-case>
   
   <test-case name="Serialization-json-27">
      <description>Test the JSON serialization output method - nodes </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        <e/>

      ]]></test>
      <result>
        <serialization-matches><![CDATA[<e/>]]></serialization-matches>
      </result>
   </test-case>
   
   <test-case name="Serialization-json-28">
      <description>Test the JSON serialization output method - nodes </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        comment {" hello world "}

      ]]></test>
      <result>
        <serialization-matches><![CDATA[<!-- hello world -->]]></serialization-matches>
      </result>
   </test-case>       
   
   <test-case name="Serialization-json-29">
      <description>Test the JSON serialization output method - nodes </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        array {
           text { "a" },
           processing-instruction {"a"} {"b"},
           comment { "a" },
           element {"a"} {"b"},
           document { element {"a"}{"b"} }
        }

      ]]></test>
      <result>
        <serialization-matches><![CDATA[\["a","<\?a b\?>","<!--a-->","<a>b</a>","<a>b</a>"\]]]></serialization-matches>
      </result>
   </test-case>     
   
   <test-case name="Serialization-json-30">
      <description>Test the JSON serialization output method - nodes </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        [attribute {"a"} {"b"}]

      ]]></test>
      <result>
        <assert-serialization-error code="SENR0001"/>
      </result>
   </test-case>
   
   
   <test-case name="Serialization-json-31">
      <description>Test the JSON serialization output method - normalization form </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        declare option output:normalization-form "NFC";
        
        "suc&#807;on"

      ]]></test>
      <result>
        <serialization-matches>"su&#231;on"</serialization-matches>
      </result>
   </test-case>   
    
   <test-case name="Serialization-json-32">
      <description>Test the JSON serialization output method - normalization form </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        declare option output:normalization-form "none";
        
        "suc&#807;on"

      ]]></test>
      <result>
        <serialization-matches>"suc&#807;on"</serialization-matches>
      </result>
   </test-case>
   
   <test-case name="Serialization-json-33">
      <description>Test the JSON serialization output method - non-BMP </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        "-&#x10330;-"

      ]]></test>
      <result>
        <serialization-matches>"-&#x10330;-"</serialization-matches>
      </result>
   </test-case>   
   
   <test-case name="Serialization-json-34">
      <description>Test the JSON serialization output method - use-character-map </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:parameter-document "Serialization/json-character-map.xml";
        
        ["abc","XabcX"]

      ]]></test>
      <result>
        <serialization-matches>\["AAABBBCCC","XAAABBBCCCX"\]</serialization-matches>
      </result>
   </test-case>
     
   
   <test-case name="Serialization-json-35">
      <description>Test the JSON serialization output method - use-character-map (replacement shouldn't be normalized) </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:parameter-document "Serialization/json-character-map.xml";
        declare option output:normalization-form "NFC";
        
        "|z|"

      ]]></test>
      <result>
        <serialization-matches>"|suc&#807;on|"</serialization-matches>
      </result>
   </test-case>
   
   <test-case name="Serialization-json-36">
      <description>Test the JSON serialization output method - use-character-map (replacement shouldn't be escaped) </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:parameter-document "Serialization/json-character-map.xml";
        
        map { "|y|" : "y" }

      ]]></test>
      <result>
        <serialization-matches>\{"\|"\|":"""\}</serialization-matches>
      </result>
   </test-case>   
        
   <test-case name="Serialization-json-37">
      <description>Test the JSON serialization output method - use-character-map (duplicate keys) </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:parameter-document "Serialization/json-character-map.xml";
        
        map { "w" : 1, "x" : 1 }

      ]]></test>
      <result>
        <serialization-matches>\{"k":1,"k":1\}</serialization-matches>
      </result>
   </test-case>
   
   <test-case name="Serialization-json-38">
      <description>Test the JSON serialization output method - use-character-map non-string </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:parameter-document "Serialization/json-character-map.xml";
        
        xs:QName("abc")

      ]]></test>
      <result>
        <serialization-matches>"AAABBBCCC"</serialization-matches>
      </result>
   </test-case>
   
   <test-case name="Serialization-json-39">
      <description>Test the JSON serialization output method - use-character-map non-string </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:parameter-document "Serialization/json-character-map.xml";
        
        [123, "123", xs:gDay("---11")]

      ]]></test>
      <result>
        <serialization-matches>\[123,"one23","---oneone"\]</serialization-matches>
      </result>
   </test-case> 
   
   
   <test-case name="Serialization-json-40">
      <description>Test the JSON serialization output method - escaping </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <modified by="O'Neil Delpratt" on="2014-12-16" change="See bug 27477" />
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        codepoints-to-string((9,10,13,32))

      ]]></test>
      <result>
        <serialization-matches>\t\n\r </serialization-matches>
      </result>
   </test-case>
   
   <test-case name="Serialization-json-41">
      <description>Test the JSON serialization output method - escaping </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        map { """" : "\
"}

      ]]></test>
      <result>
        <serialization-matches>\{"\\"":"\\\\\\n"\}</serialization-matches>
      </result>
   </test-case>
   
   <test-case name="Serialization-json-42">
      <description>Test the JSON serialization output method - escaping </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        declare option output:encoding "US-ASCII";
        
        "&#x10330;"

      ]]></test>
      <result>
        <any-of>
          <serialization-matches>"\\uD800\\uDF30"</serialization-matches>
          <assert-serialization-error code="SESU0007"/>
        </any-of>
      </result>
   </test-case>
      
   <test-case name="Serialization-json-43">
      <description>Test the JSON serialization output method - escaping </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        "<"

      ]]></test>
      <result>
        <serialization-matches>"&lt;"</serialization-matches>
      </result>
   </test-case>     
   
   <test-case name="Serialization-json-44">
      <description>Test the JSON serialization output method - escaping </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        text { "<" }

      ]]></test>
      <result>
        <serialization-matches>"&amp;lt;"</serialization-matches>
      </result>
   </test-case>
   
   <test-case name="Serialization-json-45">
      <description>Test the JSON serialization output method - allow-duplicate-names </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        declare option output:allow-duplicate-names "yes";
        
        map { "one" : 1, xs:QName("one") : 1 }  

      ]]></test>
      <result>
        <serialization-matches>\{"one":1,"one":1\}</serialization-matches>
      </result>
   </test-case>
   
   <test-case name="Serialization-json-46">
      <description>Test the JSON serialization output method - allow-duplicate-names </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        declare option output:allow-duplicate-names "no";
        
        map { "one" : 1, xs:QName("one") : 1 }  

      ]]></test>
      <result>
        <assert-serialization-error code="SERE0022"/>
      </result>
   </test-case> 
   
   <test-case name="Serialization-json-47">
      <description>Test the JSON serialization output method - allow-duplicate-names </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        
        map { "on" || "e" : 1, xs:QName("one") : 1 }  

      ]]></test>
      <result>
        <assert-serialization-error code="SERE0022"/>
      </result>
   </test-case>
   
   <test-case name="Serialization-json-48">
      <description>Test the JSON serialization output method - allow-duplicate-names </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        declare option output:allow-duplicate-names "no";
        
        map { "a" : map { "a" : map { "a" : 1 } } }  

      ]]></test>
      <result>
        <serialization-matches>\{"a":\{"a":\{"a":1\}\}\}</serialization-matches>
      </result>
   </test-case>        
   
   <test-case name="Serialization-json-49">
      <description>Test the JSON serialization output method - allow-duplicate-names </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        declare option output:allow-duplicate-names "no";
        
        map { "1" : map { "1" : map { "1" : 1 }, 1 : 1 } }  

      ]]></test>
      <result>
        <assert-serialization-error code="SERE0022"/>
      </result>
   </test-case>
   
   <test-case name="Serialization-json-50">
      <description>Test the JSON serialization output method - allow-duplicate-names </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        declare option output:allow-duplicate-names "no";
        
        map { "a": 1, "2014-10-01" : 1, "b" : 1, xs:date("2014-10-01") : 1 }  

      ]]></test>
      <result>
        <assert-serialization-error code="SERE0022"/>
      </result>
   </test-case>
   
   <test-case name="Serialization-json-51">
      <description>Test the JSON serialization output method - json-node-output-method </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        declare option output:json-node-output-method "xml";
        
        <e>hi</e>

      ]]></test>
      <result>
        <serialization-matches><![CDATA["<e>hi</e>"]]></serialization-matches>
      </result>   
   </test-case>
   
   <test-case name="Serialization-json-52">
      <description>Test the JSON serialization output method - json-node-output-method </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        declare option output:json-node-output-method "text";
        
        <e>hi</e>

      ]]></test>
      <result>
        <serialization-matches><![CDATA["hi"]]></serialization-matches>
      </result>   
   </test-case> 
   
   <test-case name="Serialization-json-53">
      <description>Test the JSON serialization output method - json-node-output-method parameter doc </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:parameter-document "Serialization/json-node-serialization.xml";
        
        <e>hi</e>

      ]]></test>
      <result>
        <serialization-matches><![CDATA["hi"]]></serialization-matches>
      </result>   
   </test-case>    
   
   <test-case name="Serialization-json-54">
      <description>Test the JSON serialization output method - allow-duplicate-names parameter doc </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:parameter-document "Serialization/json-allow-duplicates.xml";
        
        map { "one" : 1, xs:QName("one") : 1 }  

      ]]></test>
      <result>
        <serialization-matches>\{"one":1,"one":1\}</serialization-matches>
      </result>
   </test-case>
   
      
   <test-case name="Serialization-json-55">
      <description>Test the JSON serialization output method</description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <modified by="O'Neil Delpratt" on="2014-12-16" change="See bug 27477" />
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:parameter-document "Serialization/json-allow-duplicates.xml";
        [text { "&#xd;" }, "&#xd;"]
      ]]></test>
      <result>
          <any-of>
               <serialization-matches>\["&amp;#13;","\r"\]</serialization-matches>
              <serialization-matches>\["&amp;#xD;","\r"\]</serialization-matches>
              <serialization-matches>\["&amp;#xd;","\r"\]</serialization-matches>
          </any-of>
      </result>
   </test-case>
   
   <test-case name="Serialization-json-56">
      <description>Test the JSON serialization output method - nulls </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        [(),(),<e><f>a</f></e>,()]
      ]]></test>
      <result>
        <serialization-matches><![CDATA[\[null,null,"<e><f>a</f></e>",null\]]]></serialization-matches>
      </result>
   </test-case>   
   
   <test-case name="Serialization-json-57">
      <description>Test the JSON serialization output method - escaping </description>
      <created by="Josh Spiegel" on="2014-11-02"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
 
        declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
        declare option output:method "json";
        declare option output:encoding "US-ASCII";
        
        "&#x20ac;"

      ]]></test>
      <result>
        <any-of>
          <serialization-matches>"\\u20AC"</serialization-matches>
          <assert-serialization-error code="SESU0007"/>
        </any-of>
      </result>
   </test-case>      

   <test-case name="Serialization-json-58" covers="json-output">
      <description>Test json output method - maps and arrays only</description>
      <created by="Andrew Coleman" on="2014-09-26"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "json";
declare option output:indent  "no";
declare option output:media-type  "text/json";
declare option output:encoding  "UTF-8";
declare option output:json-node-output-method  "xml";

map {
    "book": map {
        "title": "Data on the Web",
        "year": 2000,
        "author": [
            map {
                "last": "Abiteboul",
                "first": "Serge"
            },
            map {
                "last": "Buneman",
                "first": "Peter"
            },
            map {
                "last": "Suciu",
                "first": "Dan"
            }
        ],
        "publisher": "Morgan Kaufmann Publishers",
        "price": 39.95
    }
}
]]></test>
 <!--     <result>
         <assert-serialization><![CDATA[{"book":{"title":"Data on the Web","year":2000,"author":[{"last":"Abiteboul","first":"Serge"},{"last":"Buneman","first":"Peter"},{"last":"Suciu","first":"Dan"}],"publisher":"Morgan Kaufmann Publishers","price":39.95}}]]></assert-serialization>
      </result> -->
      <result>
        <all-of>
         <serialization-matches><![CDATA[\{"book":\{.*"title":"Data on the Web".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"year":2000.*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"publisher":"Morgan Kaufmann Publishers".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"price":39.95.*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"author":\[\{.*"last":"Abiteboul".*},\{.*"last":"Buneman".*},\{.*"last":"Suciu".*}].*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"author":\[\{.*"first":"Serge".*},\{.*"first":"Peter".*},\{.*"first":"Dan".*}].*}}]]></serialization-matches>
        </all-of>
      </result>

   </test-case>

   <test-case name="Serialization-json-59" covers="json-output">
      <description>Test json output method - maps and arrays only</description>
      <created by="Andrew Coleman" on="2014-09-26"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "json";
declare option output:indent  "no";
declare option output:media-type  "text/json";
declare option output:encoding  "UTF-8";
declare option output:json-node-output-method  "xml";

parse-json(unparsed-text('Serialization/data001.json'))
]]></test>
<!--      <result>
         <assert-serialization><![CDATA[{"glossary":{"title":"example glossary","GlossDiv":{"title":"S","GlossList":{"GlossEntry":{"ID":"SGML","SortAs":"SGML","GlossTerm":"Standard Generalized Markup Language","Acronym":"SGML","Abbrev":"ISO 8879:1986","GlossDef":{"para":"A meta-markup language, used to create markup languages such as DocBook.","GlossSeeAlso":["GML","XML"]},"GlossSee":"markup"}}}}}]]></assert-serialization>
      </result> -->
      <result>
        <all-of>
         <serialization-matches><![CDATA[\{"glossary":\{.*"title":"example glossary".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"glossary":\{.*"GlossDiv":\{.*"title":"S".*}.*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"glossary":\{.*"GlossDiv":\{.*"GlossList":\{"GlossEntry":\{.*"ID":"SGML".*}}.*}.*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"glossary":\{.*"GlossDiv":\{.*"GlossList":\{"GlossEntry":\{.*"SortAs":"SGML".*}}.*}.*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"glossary":\{.*"GlossDiv":\{.*"GlossList":\{"GlossEntry":\{.*"GlossTerm":"Standard Generalized Markup Language".*}}.*}.*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"glossary":\{.*"GlossDiv":\{.*"GlossList":\{"GlossEntry":\{.*"Acronym":"SGML".*}}.*}.*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"glossary":\{.*"GlossDiv":\{.*"GlossList":\{"GlossEntry":\{.*"Abbrev":"ISO 8879:1986".*}}.*}.*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"glossary":\{.*"GlossDiv":\{.*"GlossList":\{"GlossEntry":\{.*"GlossSee":"markup".*}}.*}.*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"glossary":\{.*"GlossDiv":\{.*"GlossList":\{"GlossEntry":\{.*"GlossDef":\{.*"para":"A meta-markup language, used to create markup languages such as DocBook.".*}.*}}.*}.*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"glossary":\{.*"GlossDiv":\{.*"GlossList":\{"GlossEntry":\{.*"GlossDef":\{.*"GlossSeeAlso":\["GML","XML"].*}.*}}.*}.*}}]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-json-60" covers="json-output">
      <description>Test json output method - maps and arrays only</description>
      <created by="Andrew Coleman" on="2014-09-26"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "json";
declare option output:indent  "no";
declare option output:media-type  "text/json";
declare option output:encoding  "UTF-8";
declare option output:json-node-output-method  "xml";

parse-json(unparsed-text('Serialization/data002.json'))
]]></test>
<!--      <result>
         <assert-serialization><![CDATA[{"menu":{"id":"file","value":"File","popup":{"menuitem":[{"value":"New","onclick":"CreateNewDoc()"},{"value":"Open","onclick":"OpenDoc()"},{"value":"Close","onclick":"CloseDoc()"}]}}}]]></assert-serialization>
      </result> -->
      <result>
        <all-of>
         <serialization-matches><![CDATA[\{"menu":\{.*"id":"file".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"menu":\{.*"value":"File".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"menu":\{.*"popup":\{"menuitem":\[\{.*"value":"New".*},\{.*"value":"Open".*},\{.*"value":"Close".*}]}.*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"menu":\{.*"popup":\{"menuitem":\[\{.*"onclick":"CreateNewDoc()".*},\{.*"onclick":"OpenDoc()".*},\{.*"onclick":"CloseDoc()".*}]}.*}}]]></serialization-matches>
         </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-json-61" covers="json-output">
      <description>Test json output method - maps and arrays only</description>
      <created by="Andrew Coleman" on="2014-09-26"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "json";
declare option output:indent  "no";
declare option output:media-type  "text/json";
declare option output:encoding  "UTF-8";
declare option output:json-node-output-method  "xml";

parse-json(unparsed-text('Serialization/data003.json'))
]]></test>
<!--      <result>
         <assert-serialization><![CDATA[{"widget":{"debug":"on","window":{"title":"Sample Konfabulator Widget","name":"main_window","width":500,"height":500},"image":{"src":"Images/Sun.png","name":"sun1","hOffset":250,"vOffset":250,"alignment":"center"},"text":{"data":"Click Here","size":36,"style":"bold","name":"text1","hOffset":250,"vOffset":100,"alignment":"center","onMouseUp":"sun1.opacity = (sun1.opacity / 100) * 90;"}}}]]></assert-serialization>
      </result> -->
      <result>
        <all-of>
         <serialization-matches><![CDATA[\{"widget":\{.*"debug":"on".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"widget":\{.*"window":\{.*}.*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"widget":\{.*"image":\{.*}.*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"widget":\{.*"text":\{.*}.*}}]]></serialization-matches>
         <serialization-matches><![CDATA["window":\{.*"title":"Sample Konfabulator Widget".*}]]></serialization-matches>
         <serialization-matches><![CDATA["window":\{.*"name":"main_window".*}]]></serialization-matches>
         <serialization-matches><![CDATA["window":\{.*"width":500.*}]]></serialization-matches>
         <serialization-matches><![CDATA["window":\{.*"height":500.*}]]></serialization-matches>
         <serialization-matches><![CDATA["image":\{.*"src":"Images/Sun.png".*}]]></serialization-matches>
         <serialization-matches><![CDATA["image":\{.*"name":"sun1".*}]]></serialization-matches>
         <serialization-matches><![CDATA["image":\{.*"hOffset":250.*}]]></serialization-matches>
         <serialization-matches><![CDATA["image":\{.*"vOffset":250.*}]]></serialization-matches>
         <serialization-matches><![CDATA["image":\{.*"src":"Images/Sun.png".*}]]></serialization-matches>
         <serialization-matches><![CDATA["image":\{.*"alignment":"center".*}]]></serialization-matches>
         <serialization-matches><![CDATA["text":\{.*"data":"Click Here".*}]]></serialization-matches>
         <serialization-matches><![CDATA["text":\{.*"size":36.*}]]></serialization-matches>
         <serialization-matches><![CDATA["text":\{.*"style":"bold".*}]]></serialization-matches>
         <serialization-matches><![CDATA["text":\{.*"name":"text1".*}]]></serialization-matches>
         <serialization-matches><![CDATA["text":\{.*"hOffset":250.*}]]></serialization-matches>
         <serialization-matches><![CDATA["text":\{.*"vOffset":250.*}]]></serialization-matches>
         <serialization-matches><![CDATA["text":\{.*"alignment":"center".*}]]></serialization-matches>
         <serialization-matches><![CDATA["text":\{.*"onMouseUp":"sun1\.opacity = \(sun1\.opacity / 100\) * 90;".*}]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-json-62" covers="json-output">
      <description>Test json output method - maps and arrays only</description>
      <created by="Andrew Coleman" on="2014-09-26"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "json";
declare option output:indent  "no";
declare option output:media-type  "text/json";
declare option output:encoding  "UTF-8";
declare option output:json-node-output-method  "xml";

parse-json(unparsed-text('Serialization/data004.json'))
]]></test>
<!--      <result>
         <assert-serialization><![CDATA[{"web-app":{"servlet":[{"servlet-name":"cofaxCDS","servlet-class":"org.cofax.cds.CDSServlet","init-param":{"configGlossary:installationAt":"Philadelphia, PA","configGlossary:adminEmail":"ksm@pobox.com","configGlossary:poweredBy":"Cofax","configGlossary:poweredByIcon":"/images/cofax.gif","configGlossary:staticPath":"/content/static","templateProcessorClass":"org.cofax.WysiwygTemplate","templateLoaderClass":"org.cofax.FilesTemplateLoader","templatePath":"templates","templateOverridePath":"","defaultListTemplate":"listTemplate.htm","defaultFileTemplate":"articleTemplate.htm","useJSP":false,"jspListTemplate":"listTemplate.jsp","jspFileTemplate":"articleTemplate.jsp","cachePackageTagsTrack":200,"cachePackageTagsStore":200,"cachePackageTagsRefresh":60,"cacheTemplatesTrack":100,"cacheTemplatesStore":50,"cacheTemplatesRefresh":15,"cachePagesTrack":200,"cachePagesStore":100,"cachePagesRefresh":10,"cachePagesDirtyRead":10,"searchEngineListTemplate":"forSearchEnginesList.htm","searchEngineFileTemplate":"forSearchEngines.htm","searchEngineRobotsDb":"WEB-INF/robots.db","useDataStore":true,"dataStoreClass":"org.cofax.SqlDataStore","redirectionClass":"org.cofax.SqlRedirection","dataStoreName":"cofax","dataStoreDriver":"com.microsoft.jdbc.sqlserver.SQLServerDriver","dataStoreUrl":"jdbc:microsoft:sqlserver://LOCALHOST:1433;DatabaseName=goon","dataStoreUser":"sa","dataStorePassword":"dataStoreTestQuery","dataStoreTestQuery":"SET NOCOUNT ON;select test='test';","dataStoreLogFile":"/usr/local/tomcat/logs/datastore.log","dataStoreInitConns":10,"dataStoreMaxConns":100,"dataStoreConnUsageLimit":100,"dataStoreLogLevel":"debug","maxUrlLength":500}},{"servlet-name":"cofaxEmail","servlet-class":"org.cofax.cds.EmailServlet","init-param":{"mailHost":"mail1","mailHostOverride":"mail2"}},{"servlet-name":"cofaxAdmin","servlet-class":"org.cofax.cds.AdminServlet"},{"servlet-name":"fileServlet","servlet-class":"org.cofax.cds.FileServlet"},{"servlet-name":"cofaxTools","servlet-class":"org.cofax.cms.CofaxToolsServlet","init-param":{"templatePath":"toolstemplates/","log":1,"logLocation":"/usr/local/tomcat/logs/CofaxTools.log","logMaxSize":"","dataLog":1,"dataLogLocation":"/usr/local/tomcat/logs/dataLog.log","dataLogMaxSize":"","removePageCache":"/content/admin/remove?cache=pages&id=","removeTemplateCache":"/content/admin/remove?cache=templates&id=","fileTransferFolder":"/usr/local/tomcat/webapps/content/fileTransferFolder","lookInContext":1,"adminGroupID":4,"betaServer":true}}],"servlet-mapping":{"cofaxCDS":"/","cofaxEmail":"/cofaxutil/aemail/*","cofaxAdmin":"/admin/*","fileServlet":"/static/*","cofaxTools":"/tools/*"},"taglib":{"taglib-uri":"cofax.tld","taglib-location":"/WEB-INF/tlds/cofax.tld"}}}]]></assert-serialization>
      </result>  -->
      <result>
        <all-of>
         <serialization-matches><![CDATA[\{"web-app":\{.*"servlet":\[(\{.*},){4}\{.*}].*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"web-app":\{.*"servlet-mapping":\{.*}.*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"web-app":\{.*"taglib":\{.*}.*}}]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-json-63" covers="json-output">
      <description>Test json output method - maps and arrays only</description>
      <created by="Andrew Coleman" on="2014-09-26"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "json";
declare option output:indent  "no";
declare option output:media-type  "text/json";
declare option output:encoding  "UTF-8";
declare option output:json-node-output-method  "xml";

parse-json(unparsed-text('Serialization/data005.json'))
]]></test>
<!--      <result>
         <assert-serialization><![CDATA[{"menu":{"header":"SVG Viewer","items":[{"id":"Open"},{"id":"OpenNew","label":"Open New"},null,{"id":"ZoomIn","label":"Zoom In"},{"id":"ZoomOut","label":"Zoom Out"},{"id":"OriginalView","label":"Original View"},null,{"id":"Quality"},{"id":"Pause"},{"id":"Mute"},null,{"id":"Find","label":"Find..."},{"id":"FindAgain","label":"Find Again"},{"id":"Copy"},{"id":"CopyAgain","label":"Copy Again"},{"id":"CopySVG","label":"Copy SVG"},{"id":"ViewSVG","label":"View SVG"},{"id":"ViewSource","label":"View Source"},{"id":"SaveAs","label":"Save As"},null,{"id":"Help"},{"id":"About","label":"About Adobe CVG Viewer..."}]}}]]></assert-serialization>
      </result> -->
      <result>
        <all-of>
         <serialization-matches><![CDATA[\{"menu":\{.*"header":"SVG Viewer".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"menu":\{.*"items":\[(\{[^}]*},){2}null,((\{[^}]*},){3}null,){2}(\{[^}]*},){8}null,\{"id":"Help"},\{.*}].*}}]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-json-64" covers="json-output">
      <description>Test json output method - maps and arrays with embedded node</description>
      <created by="Andrew Coleman" on="2014-09-26"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "json";
declare option output:indent  "no";
declare option output:media-type  "text/json";
declare option output:encoding  "UTF-8";
declare option output:json-node-output-method  "xml";

map {
    "book": map {
        "title": "Data on the Web",
        "year": 2000,
        "author": [
            map {
                "last": "Abiteboul",
                "first": "Serge"
            },
            map {
                "last": "Buneman",
                "first": "Peter"
            },
            map {
                "last": "Suciu",
                "first": "Dan"
            }
        ],
        "xml-content": <simple>text-value</simple>,
        "publisher": "Morgan Kaufmann Publishers",
        "price": 39.95
    }
}
]]></test>
<!--      <result>
         <assert-serialization><![CDATA[{"book":{"title":"Data on the Web","year":2000,"author":[{"last":"Abiteboul","first":"Serge"},{"last":"Buneman","first":"Peter"},{"last":"Suciu","first":"Dan"}],"xml-content":"<simple>text-value</simple>","publisher":"Morgan Kaufmann Publishers","price":39.95}}]]></assert-serialization>
      </result>  -->
      <result>
        <all-of>
         <serialization-matches><![CDATA[\{"book":\{.*"title":"Data on the Web".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"year":2000.*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"author":\[{[^}]*},{[^}]*},{[^}]*}].*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"xml-content":"<simple>text-value<\/simple>".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"publisher":"Morgan Kaufmann Publishers".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"price":39.95.*}}]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-json-65" covers="json-output">
      <description>Test json output method - maps and arrays with embedded node</description>
      <created by="Andrew Coleman" on="2014-09-26"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "json";
declare option output:indent  "no";
declare option output:media-type  "text/json";
declare option output:encoding  "UTF-8";
declare option output:json-node-output-method  "xml";

map {
    "book": map {
        "title": "Data on the Web",
        "year": 2000,
        "author": [
            map {
                "last": "Abiteboul",
                "first": "Serge"
            },
            map {
                "last": "Buneman",
                "first": "Peter"
            },
            map {
                "last": "Suciu",
                "first": "Dan"
            }
        ],
        "xml-content": element simple { "text-value" },
        "publisher": "Morgan Kaufmann Publishers",
        "price": 39.95
    }
}
]]></test>
<!--      <result>
         <assert-serialization><![CDATA[{"book":{"title":"Data on the Web","year":2000,"author":[{"last":"Abiteboul","first":"Serge"},{"last":"Buneman","first":"Peter"},{"last":"Suciu","first":"Dan"}],"xml-content":"<simple>text-value</simple>","publisher":"Morgan Kaufmann Publishers","price":39.95}}]]></assert-serialization>
      </result> -->
      <result>
        <all-of>
         <serialization-matches><![CDATA[\{"book":\{.*"title":"Data on the Web".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"year":2000.*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"author":\[{[^}]*},{[^}]*},{[^}]*}].*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"xml-content":"<simple>text-value<\/simple>".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"publisher":"Morgan Kaufmann Publishers".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"price":39.95.*}}]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-json-66" covers="json-output">
      <description>Test json output method - maps and arrays with embedded node</description>
      <created by="Andrew Coleman" on="2014-09-26"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "json";
declare option output:indent  "no";
declare option output:media-type  "text/json";
declare option output:encoding  "UTF-8";
declare option output:json-node-output-method  "xml";

map {
    "book": map {
        "title": "Data on the Web",
        "year": 2000,
        "author": [
            map {
                "last": "Abiteboul",
                "first": "Serge"
            },
            map {
                "last": "Buneman",
                "first": "Peter"
            },
            map {
                "last": "Suciu",
                "first": "Dan"
            }
        ],
        "xml-content": element simple { 1 + 1 },
        "publisher": "Morgan Kaufmann Publishers",
        "price": 39.95
    }
}
]]></test>
<!--      <result>
         <assert-serialization><![CDATA[{"book":{"title":"Data on the Web","year":2000,"author":[{"last":"Abiteboul","first":"Serge"},{"last":"Buneman","first":"Peter"},{"last":"Suciu","first":"Dan"}],"xml-content":"<simple>2</simple>","publisher":"Morgan Kaufmann Publishers","price":39.95}}]]></assert-serialization>
      </result>  -->
      <result>
        <all-of>
         <serialization-matches><![CDATA[\{"book":\{.*"title":"Data on the Web".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"year":2000.*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"author":\[{[^}]*},{[^}]*},{[^}]*}].*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"xml-content":"<simple>2<\/simple>".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"publisher":"Morgan Kaufmann Publishers".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"price":39.95.*}}]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-json-67" covers="json-output">
      <description>Test json output method - maps and arrays with embedded node</description>
      <created by="Andrew Coleman" on="2014-09-26"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "json";
declare option output:indent  "no";
declare option output:media-type  "text/json";
declare option output:encoding  "UTF-8";
declare option output:json-node-output-method  "xml";

map {
    "book": map {
        "title": "Data on the Web",
        "year": 2000,
        "author": [
            map {
                "last": "Abiteboul",
                "first": "Serge"
            },
            map {
                "last": "Buneman",
                "first": "Peter"
            },
            element simple { 1 + 1 },
            map {
                "last": "Suciu",
                "first": "Dan"
           }
        ],
        "publisher": "Morgan Kaufmann Publishers",
        "price": 39.95
    }
}
]]></test>
<!--      <result>
         <assert-serialization><![CDATA[{"book":{"title":"Data on the Web","year":2000,"author":[{"last":"Abiteboul","first":"Serge"},{"last":"Buneman","first":"Peter"},"<simple>2</simple>",{"last":"Suciu","first":"Dan"}],"publisher":"Morgan Kaufmann Publishers","price":39.95}}]]></assert-serialization>
      </result>  -->
      <result>
        <all-of>
         <serialization-matches><![CDATA[\{"book":\{.*"title":"Data on the Web".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"year":2000.*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"author":\[{[^}]*},{[^}]*},"<simple>2<\/simple>",{[^}]*}].*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"publisher":"Morgan Kaufmann Publishers".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"price":39.95.*}}]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-json-68" covers="json-output">
      <description>Test json output method - maps and arrays with embedded node</description>
      <created by="Andrew Coleman" on="2014-09-26"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "json";
declare option output:indent  "no";
declare option output:media-type  "text/json";
declare option output:encoding  "UTF-8";
declare option output:json-node-output-method  "xml";

map {
    "book": map {
        "title": "Data on the Web",
        "year": 2000,
        "author": [
            map {
                "last": "Abiteboul",
                "first": "Serge"
            },
            map {
                "last": "Buneman",
                "first": "Peter"
            },
            map {
                "last": "Suciu",
                "first": "Dan"
            }
        ],
        <node-key>strange</node-key> : element simple { 1 + 1 },
        "publisher": "Morgan Kaufmann Publishers",
        "price": 39.95
    }
}
]]></test>
<!--      <result>
         <assert-serialization><![CDATA[{"book":{"title":"Data on the Web","year":2000,"author":[{"last":"Abiteboul","first":"Serge"},{"last":"Buneman","first":"Peter"},{"last":"Suciu","first":"Dan"}],"<node-key>strange</node-key>":"<simple>2</simple>","publisher":"Morgan Kaufmann Publishers","price":39.95}}]]></assert-serialization>
      </result>  -->
      <result>
        <all-of>
         <serialization-matches><![CDATA[\{"book":\{.*"title":"Data on the Web".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"year":2000.*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"author":\[{[^}]*},{[^}]*},{[^}]*}].*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"<node-key>strange<\/node-key>":"<simple>2<\/simple>".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"publisher":"Morgan Kaufmann Publishers".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"price":39.95.*}}]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-json-69" covers="json-output">
      <description>Test json output method - maps and arrays with embedded node</description>
      <created by="Andrew Coleman" on="2014-09-26"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "json";
declare option output:indent  "no";
declare option output:media-type  "text/json";
declare option output:encoding  "UTF-8";
declare option output:json-node-output-method  "xml";

map {
    "book": map {
        "title": "Data on the Web",
        "year": 2000,
        "author": [
            map {
                "last": "Abiteboul",
                "first": "Serge"
            },
            map {
                "last": "Buneman",
                "first": "Peter"
            },
            map {
                "last": "Suciu",
                "first": "Dan"
            }
        ],
        "xml-content": <complex><simple>text-value</simple></complex>,
        "publisher": "Morgan Kaufmann Publishers",
        "price": 39.95
    }
}
]]></test>
<!--      <result>
         <assert-serialization><![CDATA[{"book":{"title":"Data on the Web","year":2000,"author":[{"last":"Abiteboul","first":"Serge"},{"last":"Buneman","first":"Peter"},{"last":"Suciu","first":"Dan"}],"xml-content":"<complex><simple>text-value</simple></complex>","publisher":"Morgan Kaufmann Publishers","price":39.95}}]]></assert-serialization>
      </result> -->
      <result>
        <all-of>
         <serialization-matches><![CDATA[\{"book":\{.*"title":"Data on the Web".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"year":2000.*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"author":\[{[^}]*},{[^}]*},{[^}]*}].*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"xml-content":"<complex><simple>text-value<\/simple><\/complex>".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"publisher":"Morgan Kaufmann Publishers".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"price":39.95.*}}]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-json-70" covers="json-output">
      <description>Test default value of json-node-output-method is xml</description>
      <created by="Andrew Coleman" on="2014-09-26"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "json";
declare option output:indent  "no";
declare option output:media-type  "text/json";
declare option output:encoding  "UTF-8";

map {
    "book": map {
        "title": "Data on the Web",
        "year": 2000,
        "author": [
            map {
                "last": "Abiteboul",
                "first": "Serge"
            },
            map {
                "last": "Buneman",
                "first": "Peter"
            },
            map {
                "last": "Suciu",
                "first": "Dan"
            }
        ],
        "xml-content": <complex><simple>text-value</simple></complex>,
        "publisher": "Morgan Kaufmann Publishers",
        "price": 39.95
    }
}
]]></test>
<!--      <result>
         <assert-serialization><![CDATA[{"book":{"title":"Data on the Web","year":2000,"author":[{"last":"Abiteboul","first":"Serge"},{"last":"Buneman","first":"Peter"},{"last":"Suciu","first":"Dan"}],"xml-content":"<complex><simple>text-value</simple></complex>","publisher":"Morgan Kaufmann Publishers","price":39.95}}]]></assert-serialization>
      </result>  -->
      <result>
        <all-of>
         <serialization-matches><![CDATA[\{"book":\{.*"title":"Data on the Web".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"year":2000.*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"author":\[{[^}]*},{[^}]*},{[^}]*}].*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"xml-content":"<complex><simple>text-value<\/simple><\/complex>".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"publisher":"Morgan Kaufmann Publishers".*}}]]></serialization-matches>
         <serialization-matches><![CDATA[\{"book":\{.*"price":39.95.*}}]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-json-71" covers="json-output">
      <description>Test json output method - maps and arrays, various atomic types</description>
      <created by="Andrew Coleman" on="2014-09-26"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "json";
declare option output:indent  "no";
declare option output:media-type  "text/json";
declare option output:encoding  "UTF-8";
declare option output:json-node-output-method  "xml";

map {
  "string-value": "a string",
  "numeric-value": 123.456,
  "node-value": element el1 { element el2 { "simple content" }},
  xs:integer("123456"): xs:integer("123456"),
  xs:date("2014-09-30"): "date-key",
  "array": [
    xs:integer("123456"), xs:date("2014-09-30"), xs:boolean("true"), xs:boolean("false")
  ]
}
]]></test>
 <!--     <result>
         <assert-serialization><![CDATA[{"string-value":"a string","numeric-value":123.456,"node-value":"<el1><el2>simple content</el2></el1>","123456":123456,"2014-09-30":"date-key","array":[123456,"2014-09-30",true,false]}]]></assert-serialization>
      </result> -->
      <result>
        <all-of>
         <serialization-matches><![CDATA[\{.*"string-value":"a string".*}]]></serialization-matches>
         <serialization-matches><![CDATA[\{.*"numeric-value":123.456.*}]]></serialization-matches>
         <serialization-matches><![CDATA[\{.*"node-value":"<el1><el2>simple content</el2></el1>".*}]]></serialization-matches>
         <serialization-matches><![CDATA[\{.*"123456":123456.*}]]></serialization-matches>
         <serialization-matches><![CDATA[\{.*"2014-09-30":"date-key".*}]]></serialization-matches>
         <serialization-matches><![CDATA[\{.*"array":\[123456,"2014-09-30",true,false].*}]]></serialization-matches>
        </all-of>
      </result>

   </test-case>

   <test-case name="Serialization-json-72" covers="json-output">
      <description>Test json output method - allow-duplicate-names = yes</description>
      <created by="Andrew Coleman" on="2014-09-26"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "json";
declare option output:indent  "no";
declare option output:media-type  "text/json";
declare option output:encoding  "UTF-8";
declare option output:json-node-output-method  "xml";
declare option output:allow-duplicate-names "yes";

map {
  "string-value": "a string",
  "numeric-value": 123.456,
  "node-value": element el1 { element el2 { "simple content" }},
  xs:integer("123456"): xs:integer("123456"),
  xs:date("2014-09-30"): "date-key",
  "2014-09-30": "string date key",
  "array": [
    xs:integer("123456"), xs:date("2014-09-30"), xs:boolean("true"), xs:boolean("false")
  ]
}
]]></test>
  <!--    <result>
         <assert-serialization><![CDATA[{"string-value":"a string","numeric-value":123.456,"node-value":"<el1><el2>simple content</el2></el1>","123456":123456,"2014-09-30":"date-key","2014-09-30":"string date key","array":[123456,"2014-09-30",true,false]}]]></assert-serialization>
      </result> -->
      <result>
        <all-of>
         <serialization-matches><![CDATA[\{.*"string-value":"a string".*}]]></serialization-matches>
         <serialization-matches><![CDATA[\{.*"numeric-value":123.456.*}]]></serialization-matches>
         <serialization-matches><![CDATA[\{.*"node-value":"<el1><el2>simple content</el2></el1>".*}]]></serialization-matches>
         <serialization-matches><![CDATA[\{.*"123456":123456.*}]]></serialization-matches>
         <serialization-matches><![CDATA[\{.*"2014-09-30":"date-key".*}]]></serialization-matches>
         <serialization-matches><![CDATA[\{.*"2014-09-30":"string date key".*}]]></serialization-matches>
         <serialization-matches><![CDATA[\{.*"array":\[123456,"2014-09-30",true,false].*}]]></serialization-matches>
        </all-of>
      </result>
   </test-case>

   <test-case name="Serialization-json-73" covers="json-output">
      <description>Test json output method - allow-duplicate-names = no</description>
      <created by="Andrew Coleman" on="2014-09-26"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "json";
declare option output:indent  "no";
declare option output:media-type  "text/json";
declare option output:encoding  "UTF-8";
declare option output:json-node-output-method  "xml";
declare option output:allow-duplicate-names "no";

map {
  "string-value": "a string",
  "numeric-value": 123.456,
  "node-value": element el1 { element el2 { "simple content" }},
  xs:integer("123456"): xs:integer("123456"),
  xs:date("2014-09-30"): "date-key",
  "2014-09-30": "string date key",
  "array": [
    xs:integer("123456"), xs:date("2014-09-30"), xs:boolean("true"), xs:boolean("false")
  ]
}
]]></test>
      <result>
        <assert-serialization-error code="SERE0022"/>
      </result>
   </test-case>

   <test-case name="Serialization-json-74" covers="json-output">
      <description>Test json output method - allow-duplicate-names - default no</description>
      <created by="Andrew Coleman" on="2014-09-26"/>
      <dependency type="feature" value="serialization" satisfied="true"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method  "json";
declare option output:indent  "no";
declare option output:media-type  "text/json";
declare option output:encoding  "UTF-8";
declare option output:json-node-output-method  "xml";

map {
  "string-value": "a string",
  "numeric-value": 123.456,
  "node-value": element el1 { element el2 { "simple content" }},
  xs:integer("123456"): xs:integer("123456"),
  xs:date("2014-09-30"): "date-key",
  "2014-09-30": "string date key",
  "array": [
    xs:integer("123456"), xs:date("2014-09-30"), xs:boolean("true"), xs:boolean("false")
  ]
}
]]></test>
      <result>
        <assert-serialization-error code="SERE0022"/>
      </result>
   </test-case>

</test-set>
