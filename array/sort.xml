<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="array-sort"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" covers="array-sort">
    <description>Tests for the array:sort function introduced in XPath 3.1</description>
    <link type="spec" document="http://www.w3.org/TR/xpath-functions-31/" idref="func-array-sort"/>
    <dependency type="spec" value="XP31+ XQ31+"/>
    
    <test-case name="array-sort-001">
        <description>Apply sort function to array with number members</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-24"/>
        <environment ref="array"/>
        <test>array:sort([1, 4, 6, 5, 3])</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 5</assert>
                <assert-deep-eq>[1, 3, 4, 5, 6]</assert-deep-eq>
            </all-of>
        </result>
    </test-case>     
    <test-case name="array-sort-002">
        <description>Apply sort function to array with number members, sort by fn:abs</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-24"/>
        <dependency type="feature" value="higherOrderFunctions"/>
        <environment ref="array"/>
        <test>array:sort([1, -2, 5, 10, -10, 10, 8], fn:abs#1)</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 7</assert>
                <assert-deep-eq>[1, -2, 5, 8, 10, -10, 10]</assert-deep-eq>
            </all-of>
        </result>
    </test-case> 
    <test-case name="array-sort-003">
        <description>Apply sort function to array with sequence members</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-24"/>
        <environment ref="array"/>
        <test>array:sort([(1,0), (1,1), (0,1), (0,0)])</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 4</assert>
                <assert-deep-eq>[(0,0), (0,1), (1,0), (1,1)]</assert-deep-eq>
            </all-of>
        </result>
    </test-case>     
    <test-case name="array-sort-004">
        <description>Apply sort function to array with sequence members</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-24"/>
        <environment ref="array"/>
        <test>array:sort([(1,0), (1,1), (0,1), (0,0), (), (1), (0,0,1)])</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 7</assert>
                <assert-deep-eq>[(), (0,0), (0,0,1), (0,1), (1), (1,0), (1,1)]</assert-deep-eq>
            </all-of>
        </result>
    </test-case>
    <test-case name="array-sort-005">
        <description>Apply sort function to array with sequence members, sort by fn:count</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-24"/>
        <dependency type="feature" value="higherOrderFunctions"/>
        <environment ref="array"/>
        <test>array:sort([(1,0), (1,1), (0,1), (0,0), (), (1), (0,0,1)], count#1)</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 7</assert>
                <assert-deep-eq>[(), (1), (1,0), (1,1), (0,1), (0,0), (0,0,1)]</assert-deep-eq>
            </all-of>
        </result>
    </test-case>
    <test-case name="array-sort-006">
        <description>Apply sort function to array with string members</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-24"/>
        <environment ref="array"/>
        <test>array:sort(["one", "two", "three", "four", "five", "fourteen"])</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 6</assert>
                <assert-deep-eq>["five", "four", "fourteen", "one", "three", "two"]</assert-deep-eq>
            </all-of>
        </result>
    </test-case> 
    <test-case name="array-sort-007">
        <description>Apply sort function to array - error: non-comparable types</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-25"/>
        <environment ref="array"/>
        <test>array:sort(["one", "two", "three", (0), (2,3)])</test>
        <result>
            <error code="XPTY0004"/>
        </result>
    </test-case>    
    <test-case name="array-sort-008">
        <description>Apply sort function to array with string members, sort by composite function</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-25"/>
        <dependency type="feature" value="higherOrderFunctions"/>
        <environment ref="array"/>
        <test>array:sort(["one", "two", "three", "four", "five", "fourteen"], function($x) {string-length($x), data($x)})</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 6</assert>
                <assert-deep-eq>["one", "two", "five", "four", "three", "fourteen"]</assert-deep-eq>
            </all-of>
        </result>
    </test-case> 
    <test-case name="array-sort-009">
        <description>Apply sort function to array with array members</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-25"/>
        <dependency type="feature" value="higherOrderFunctions"/>
        <environment ref="array"/>
        <test>array:sort([[2,3],[],[4,5,6,7],[6,7],[3]], array:size#1)</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 5</assert>
                <assert-deep-eq>[[],[3],[2,3],[6,7],[4,5,6,7]]</assert-deep-eq>
            </all-of>
        </result>
    </test-case> 
    <test-case name="array-sort-010">
        <description>Apply sort function to array with array members</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-25"/>
        <dependency type="feature" value="higherOrderFunctions"/>
        <environment ref="array"/>
        <test>array:sort([[2,3],[],[4,5,6,7],[6,7],[3]], fn:data#1)</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 5</assert>
                <assert-deep-eq>[[],[2,3],[3],[4,5,6,7],[6,7]]</assert-deep-eq>
            </all-of>
        </result>
    </test-case>    
    <test-case name="array-sort-011">
        <description>Apply sort function to array with array members</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-25"/>
        <dependency type="feature" value="higherOrderFunctions"/>
        <environment ref="array"/>
        <test>array:sort([[1,0], [1,1], [0,1], [0,0], [], [1], [0,0,1]], fn:data#1)</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 7</assert>
                <assert-deep-eq>[[], [0,0], [0,0,1], [0,1], [1], [1,0], [1,1]]</assert-deep-eq>
            </all-of>
        </result>
    </test-case> 
    <test-case name="array-sort-012">
        <description>Apply sort function to array with string members</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-25"/>
        <dependency type="feature" value="higherOrderFunctions"/>
        <environment ref="array"/>
        <test>array:sort(["the cat", "sat", "on the mat"], function($x) {count(tokenize($x, " "))})</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 3</assert>
                <assert-deep-eq>["sat", "the cat", "on the mat"]</assert-deep-eq>
            </all-of>
        </result>
    </test-case>
    <test-case name="array-sort-012a" covers="fn-tokenize#1">
        <description>Apply sort function to array with string members. The use of tokenize with one argument</description>
        <created by="O'Neil Delpratt, Saxonica" on="2015-01-20"/>
        <dependency type="feature" value="higherOrderFunctions"/>
        <environment ref="array"/>
        <test>array:sort(["the cat", "sat", "on the mat"], function($x) {count(tokenize($x))})</test>
        <result>
            <all-of>
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 3</assert>
                <assert-deep-eq>["sat", "the cat", "on the mat"]</assert-deep-eq>
            </all-of>
        </result>
    </test-case>
    <test-case name="array-sort-013" covers="fn-data">
        <description>Apply sort function to array with array members</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-26"/>
        <dependency type="feature" value="higherOrderFunctions"/>
        <environment ref="array"/>
        <test>array:sort([["John","Smith"], ["John","Brown"], ["Fred","Brown"], ["Fred","Smith"]], function($emp) {fn:data(array:get($emp, 1))})</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 4</assert>
                <assert-deep-eq>[["Fred","Brown"], ["Fred","Smith"], ["John","Smith"], ["John","Brown"]]</assert-deep-eq>
            </all-of>
        </result>
    </test-case>
    <test-case name="array-sort-014"  covers="fn-data">
        <description>Apply sort function to array with array members, sort by composite function</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-26"/>
        <dependency type="feature" value="higherOrderFunctions"/>
        <environment ref="array"/>
        <test>array:sort([["John","Smith"], ["John","Brown"], ["Fred","Brown"], ["Fred","Smith"]], function($emp) {fn:data(array:get($emp, 2)), fn:data(array:get($emp, 1))})</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 4</assert>
                <assert-deep-eq>[["Fred","Brown"], ["John","Brown"], ["Fred","Smith"], ["John","Smith"]]</assert-deep-eq>
            </all-of>
        </result>
    </test-case>
    <test-case name="array-sort-015">
        <description>Apply sort function to array with array members, sort by composite function with implicit atomization</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-26"/>
        <dependency type="feature" value="higherOrderFunctions"/>
        <environment ref="array"/>
        <test>array:sort([["John","Smith"], ["John","Brown"], ["Fred","Brown"], ["Fred","Smith"]], function($emp) {array:get($emp, 2), array:get($emp, 1)})</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 4</assert>
                <assert-deep-eq>[["Fred","Brown"], ["John","Brown"], ["Fred","Smith"], ["John","Smith"]]</assert-deep-eq>
            </all-of>
        </result>
    </test-case>
    <test-case name="array-sort-016">
        <description>Apply sort function to array with array members, sort by composite function</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-26"/>
        <dependency type="feature" value="higherOrderFunctions"/>
        <environment ref="array"/>
        <test>array:sort([[1,0], [1,1], [0,1], [0,0], [], [1], [0,0,1]], function($x) {array:size(array:filter($x, function($y) {$y eq 1}))})</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 7</assert>
                <assert-deep-eq>[[0,0], [], [1,0], [0,1], [1], [0,0,1], [1,1]]</assert-deep-eq>
            </all-of>
        </result>
    </test-case>
    <test-case name="array-sort-017">
        <description>Apply sort function to array with array members</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-26"/>
        <dependency type="feature" value="higherOrderFunctions"/>
        <environment ref="array"/>
        <test>array:sort([[1,0], [1,1], [0,1], [0,0], [], [1], [0,0,1]], function($x) {array:size($x), array:size(array:filter($x, function($y) {$y eq 1}))})</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 7</assert>
                <assert-deep-eq>[[], [1], [0,0], [1,0], [0,1], [1,1], [0,0,1]]</assert-deep-eq>
            </all-of>
        </result>
    </test-case>    
    <test-case name="array-sort-018">
        <description>Sort complex nested arrays</description>
        <created by="Josh Spiegel" on="2015-08-10"/>
        <test><![CDATA[
            array:sort(
             [
                [<e>a</e>, <e>b</e>],
                [(<f>a</f>, <f>b</f>)],
                [<g>a</g>, <g>b</g>],
                "A",
                ("A","B")     
             ]
            )
        ]]></test>
        <result>
            <all-of>                
                <assert>array:size($result) eq 5</assert>
                <assert-deep-eq><![CDATA[
                  [
                    "A",
                    ("A","B"),                    
                    [<e>a</e>, <e>b</e>],
                    [(<f>a</f>, <f>b</f>)],
                    [<g>a</g>, <g>b</g>]   
                  ]                    
                ]]></assert-deep-eq>
            </all-of>
        </result>
    </test-case>       
    <test-case name="array-sort-019">
        <description>Atomize a map</description>
        <created by="Josh Spiegel" on="2015-08-10"/>
        <test>array:sort([map{},1])</test>
        <result>
            <error code="FOTY0013"/>
        </result>
    </test-case>
    <test-case name="array-sort-020">
        <description>Sort mix of complex and simple</description>
        <created by="Josh Spiegel" on="2015-08-10"/>
        <test><![CDATA[
          array:sort([[3],2,validate type xs:integer { <e>1</e> }])
        ]]></test>
        <result>
            <all-of>                
                <assert>$result(1) eq 1</assert>
                <assert>$result(2) eq 2</assert>
                <assert>$result(3) eq 3</assert>
            </all-of>
        </result>
    </test-case>
    <test-case name="array-sort-021">
        <description>Sort NaN values.  Result may depend on the outcome of bug 29044</description>
        <created by="Josh Spiegel" on="2015-08-10"/>
        <test><![CDATA[
          let $a := [xs:float("NaN"), 1]     
          let $b := [xs:float("NaN"), 2]
          return     
             array:sort([$a,$b,$a,$b])
        ]]></test>
        <result>
            <all-of>                
                <assert>every $x in 1 to 4 satisfies deep-equal($result($x)(1), xs:float("NaN"))</assert>
                <assert>$result(1)(2) eq 1 and $result(2)(2) eq 1</assert>
                <assert>$result(3)(2) eq 2 and $result(4)(2) eq 2</assert>
            </all-of>
        </result>
    </test-case>              
</test-set>