<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="xs-numeric" covers="xs-numeric-type">
   <description>Tests the xs:numeric union type introduced in XPath 3.1</description>

   <dependency type="spec" value="XP31+ XQ31+"/>

   <test-case name="xs-numeric-001">
      <description>A double is an xs:numeric</description>
      <created by="Michael Kay" on="2014-10-21"/>
      <test>3.14e0 instance of xs:numeric</test>
      <result>
        <assert-true/>
      </result>
   </test-case>
   
   <test-case name="xs-numeric-002">
      <description>A decimal is an xs:numeric</description>
      <created by="Michael Kay" on="2014-10-21"/>
      <test>3.14 instance of xs:numeric</test>
      <result>
        <assert-true/>
      </result>
   </test-case>
   
   <test-case name="xs-numeric-003">
      <description>An integer is an xs:numeric</description>
      <created by="Michael Kay" on="2014-10-21"/>
      <test>3 instance of xs:numeric</test>
      <result>
        <assert-true/>
      </result>
   </test-case>
   
   <test-case name="xs-numeric-004">
      <description>A float is an xs:numeric</description>
      <created by="Michael Kay" on="2014-10-21"/>
      <test>xs:float('93.7') instance of xs:numeric</test>
      <result>
        <assert-true/>
      </result>
   </test-case>
   
   <test-case name="xs-numeric-005">
      <description>A nonNegativeInteger is an xs:numeric</description>
      <created by="Michael Kay" on="2014-10-21"/>
      <test>xs:nonNegativeInteger('93') instance of xs:numeric</test>
      <result>
        <assert-true/>
      </result>
   </test-case>
   
   <test-case name="xs-numeric-006">
      <description>treat as xs:numeric</description>
      <created by="Michael Kay" on="2014-10-21"/>
      <test>
        let $x := if (current-date() lt xs:date('2500-01-01')) then -3 else 'minus three'
        return abs($x treat as xs:numeric)</test>
      <result>
        <assert-eq>3</assert-eq>
      </result>
   </test-case>
   
   <test-case name="xs-numeric-007">
      <description>cast as xs:numeric, always gives a double</description>
      <created by="Michael Kay" on="2014-10-21"/>
      <test>xs:numeric('12') instance of xs:double</test>
      <result>
        <assert-true/>
      </result>
   </test-case>
   
   <test-case name="xs-numeric-008">
      <description>cast as xs:numeric, always gives a double</description>
      <created by="Michael Kay" on="2014-10-21"/>
      <test>xs:numeric('12.5') instance of xs:double</test>
      <result>
        <assert-true/>
      </result>
   </test-case>
   
   <test-case name="xs-numeric-009">
      <description>cast as xs:numeric, always gives a double</description>
      <created by="Michael Kay" on="2014-10-21"/>
      <test>xs:numeric('12.5e2') instance of xs:double</test>
      <result>
        <assert-true/>
      </result>
   </test-case>
   
   <test-case name="xs-numeric-010">
      <description>cast as xs:numeric, failure case</description>
      <created by="Michael Kay" on="2014-10-21"/>
      <test>xs:numeric('12.5f2') instance of xs:double</test>
      <result>
        <error code="FORG0001"/>
      </result>
   </test-case>
   
   <test-case name="xs-numeric-011">
      <description>castable as xs:numeric, success case</description>
      <created by="Michael Kay" on="2014-10-21"/>
      <test>'12.5' castable as xs:numeric</test>
      <result>
        <assert-true/>
      </result>
   </test-case>
   
   <test-case name="xs-numeric-012">
      <description>castable as xs:numeric, failure case</description>
      <created by="Michael Kay" on="2014-10-21"/>
      <test>'12.5.7' castable as xs:numeric</test>
      <result>
        <assert-false/>
      </result>
   </test-case>
   
   <test-case name="xs-numeric-013">
      <description>cast as xs:numeric, from a member type of the union</description>
      <created by="Michael Kay" on="2014-10-21"/>
      <test>17 cast as xs:numeric</test>
      <result>
        <all-of>
          <assert-eq>17</assert-eq>
          <assert-type>xs:integer</assert-type>
        </all-of>
      </result>
   </test-case>
   
   <test-case name="xs-numeric-014">
      <description>cast as xs:numeric, from a member type of the union</description>
      <created by="Michael Kay" on="2014-10-21"/>
      <test>17.2 cast as xs:numeric</test>
      <result>
        <all-of>
          <assert-eq>17.2</assert-eq>
          <assert-type>xs:decimal</assert-type>
        </all-of>
      </result>
   </test-case>
   
   <test-case name="xs-numeric-015">
      <description>cast as xs:numeric, from a member type of the union</description>
      <created by="Michael Kay" on="2014-10-21"/>
      <test>1e3 cast as xs:numeric</test>
      <result>
        <all-of>
          <assert-eq>1e3</assert-eq>
          <assert-type>xs:double</assert-type>
        </all-of>
      </result>
   </test-case>
   
   <test-case name="xs-numeric-016">
      <description>cast as xs:numeric, from a member type of the union</description>
      <created by="Michael Kay" on="2014-10-21"/>
      <test>xs:float(1e3) cast as xs:numeric</test>
      <result>
        <all-of>
          <assert-eq>xs:float(1e3)</assert-eq>
          <assert-type>xs:float</assert-type>
        </all-of>
      </result>
   </test-case>
   
   <test-case name="xs-numeric-017">
      <description>cast as xs:numeric, from a member type of the union</description>
      <created by="Michael Kay" on="2014-10-21"/>
      <test>xs:short(256) cast as xs:numeric</test>
      <result>
        <all-of>
          <assert-eq>256</assert-eq>
          <assert-type>xs:short</assert-type>
        </all-of>
      </result>
   </test-case>
   
   <test-case name="xs-numeric-018">
      <description>cast as xs:numeric, from boolean</description>
      <created by="Michael Kay" on="2014-10-21"/>
      <test>true() cast as xs:numeric</test>
      <result>
        <all-of>
          <assert-eq>1e0</assert-eq>
          <assert-type>xs:double</assert-type>
        </all-of>
      </result>
   </test-case>
   
   <test-case name="xs-numeric-019">
      <description>xs:numeric in a function signature</description>
      <created by="Michael Kay" on="2014-10-21"/>
      <modified by="Michael Kay" on="2015-11-27" change="add HOF dependency"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>let $f := function($n as xs:numeric) as xs:numeric { $n+1 } return $f(255)</test>
      <result>
        <all-of>
          <assert-eq>256</assert-eq>
          <assert-type>xs:integer</assert-type>
        </all-of>
      </result>
   </test-case>
   
   <test-case name="xs-numeric-020">
      <description>implicit conversion to xs:numeric from xs:untypedAtomic</description>
      <created by="Michael Kay" on="2014-10-21"/>
      <dependency type="spec" value="XQ31+"/>
      <test><![CDATA[
        declare function local:f ($n as xs:numeric) as xs:numeric { $n+1 };
        local:f(<a>255</a>)
      ]]></test>
      <result>
        <all-of>
          <assert-eq>256</assert-eq>
          <assert-type>xs:double</assert-type>
        </all-of>
      </result>
   </test-case>
   
   <test-case name="xs-numeric-021">
      <description>xs:numeric as an element type</description>
      <created by="Michael Kay" on="2014-10-21"/>
      <modified by="Michael Kay" on="2014-12-14" change="add dependency, bug 27180"/>
      <modified by="O'Neil Delpratt" on="2014-12-16" change="Bug fix relating #27180: Added schemaImport dependency" />
      <environment ref="atomic"/>
      <dependency type="feature" value="schemaValidation"/>
      <dependency type="feature" value="schemaImport"/>
      <test>/*/*:float instance of element(*, xs:numeric)</test>
      <result>
        <assert-true/>
      </result>
   </test-case>
   
   <test-case name="xs-numeric-022">
      <description>xs:numeric as an attribute type</description>
      <created by="Michael Kay" on="2014-10-21"/>
      <modified by="Michael Kay" on="2014-12-14" change="add dependency, bug 27180"/>
      <modified by="O'Neil Delpratt" on="2014-12-16" change="Bug fix relating #27180: Added schemaImport dependency" />
      <environment ref="atomic"/>
      <dependency type="feature" value="schemaValidation"/>
      <dependency type="feature" value="schemaImport"/>
      <test>/*/*:decimal/@*:attr instance of attribute(*, xs:numeric)</test>
      <result>
        <assert-true/>
      </result>
   </test-case>
   


</test-set>
